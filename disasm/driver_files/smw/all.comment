008000 Disable interrupts
008001 Clear NMI and V/H Count, disable joypad
008004 Disable HDMA
008007 Disable DMA
00800A \
00800D  |Clear APU I/O ports 1-4
008010  |
008013 /
008016 \ Turn off screen
008018 /
00801B \ Turn off emulation mode
00801C /
00801D 16 bit A,X,Y, Decimal mode off
00801F \ Set direct page
008022 /
008023 \ Set stack location
008026 /
008027 \
00802A  |
00802E  |
008031  |
008034  |
008037  |
00803B  |
00803C  |Create routine in RAM
008040  |
008041  |
008044  |
008045  |
008046  |
008047  |
008048  |
00804A  |
00804C  |
00804E /
008052 SPC700 Bank 02 + Main code upload handler
008055 Set game mode to 0
008058 Set secondary game mode to 0
008064 \ Set OAM Size and Data Area Designation to x03
008066 /
008069 Skip the following loop
00806B  |Loop until the interrupt routine sets $10
00806D / to a non-zero value.
00806F Enable interrupts
008070 Increase frame number
008072 The actual game
008075 \ Wait for interrupt
008077 /
008089 Load byte to start transfer
0080E8 \ this address (0E:8000) is the start of the SPC engine
0080EA  | instrument settings/sound effect data
0080ED  | AND the code used for all music banks.
0080EF  |
0080F2  |
0080F4 /
0080FD \
0080FF  |
008102  |Loads The Address 0F:8000 to 00-02 	(SAMPLE DATA + PTRS)
008104  |[SPC Sample Pointers/Data ROM Address, this is]
008107  |
008109 /
00810E \
008110  |
008113  |Loads the Bank 1 music data (Map) to 00-02
008115  | ($0E:98B1)
008118  |
00811A /
008148 \
00814A  |Loads the Bank 2 music address(Levels)
00814D  | (0E:AED6)
00814F  |
008152  |
008154 /
008159 \
00815B  |Bank 3 music(Ending) ROM address
00815E  |
008160  | ($03:E400)
008163  |
008165 /
00816A Looks like this might be the NMI routine here. That is correct.
00816B I thought it was, just from the address, but I wasn't too sure.
008174 8 bit A,X,Y
008176 Load "NMI Enable."  This has the effect of clearing the Interrupt, so that
008179 \
00817C  |
00817E  |
008181  |Update SPC700 I/O port 2
008184  |
008186  |
008189  |
00818C  |
00818F \
008192  |
008195  |
008198  |Update SPC700 I/O ports 0, 1 and 3
00819B  |
00819E  |
0081A1  |
0081A4  |
0081A7 /
0081AA \ Screen off, brightness=0
0081AC /
0081AF Zero The HDMA reg
0081C6 \
0081C9  |If in a "Special level",
0081CB  |jump to $82C4
0081CE \ Get the CGADSUB byte...
0081D0  |Get the Add/Subtract Select and Enable part...
0081D2 / ...and store it to the A/SSaE register...
0081D5 \ 8x8 tiles, Graphics mode 1
0081D7 /
0081DA \ If there isn't any lag,
0081DC / branch to $81E7
0081DE \
0081E1  |If not on a special level, branch to NMINotSpecialLv
0081E2 /
0081F7 \
0081FA  |If the current cutscene isn't the ending,
0081FC / branch to $8209
0081FE \
008201  |Related to reloading the palettes when switching
008203  |to another background during the credits.
008207 /
008246 \
008248  |Set BG 1 Horizontal Scroll Offset
00824B  |to X position of screen boundry
00824D /
008250 \
008252  |
008253  |Set BG 1 Vertical Scroll Offset
008256  |to Y position of screen boundry + Layer 1 disposition
008259  |
00825B  |
00825E /
008261 \
008263  |Set BG 2 Horizontal Scroll Offset
008266  |to X position of Layer 2
008268 /
00826B \
00826D  |Set BG 2 Vertical Scroll Offset
008270  |to Y position of Layer 2
008272 /
008275 \ If in a normal (not special) level, branch
008278 /
00827C \
00827F  |If not playing ending movie, branch to $82A1
008281 /
008283 \
008286 / Set brightness to $0DAE
008289 \
00828C / Set HDMA channel enable to $0D9F
008292 \ IRQ timer, at which scanline the IRQ will be fired.
008294  |(i.e. below the status bar)
008297  |
00829A /
0082A4  \
0082A7   |Set Layer 3 horizontal and vertical
0082AA   |scroll to x00 ; Write twice register
0082AD  /
0082B0 \
0082B3 / Set brightness to $0DAE
0082B6 \
0082B9 / Set HDMA channel enable to $0D9F
0082BC \ Pull all
0082BE  |
0082BF  |
0082C0  |
0082C1  |
0082C2 /
0082C3 And return
0082C4 \ If there is lag,
0082C6 / branch to $82F7
0082CA \ If Mario Start! graphics shouldn't be loaded,
0082CD / branch to $82D4
008374 Set Interrupt flag so routine can start
008375 \ Save A/X/Y/P/B
008376  |P = Processor Flags, B = bank number for all $xxxx operations
008378  |Set B to 0$0
008379  |
00837A  |
00837B  |
00837C  |
00837D /
008380 Read the IRQ register, 'unapply' the interrupt
008383 If "Timer IRQ" is clear, skip the next code block
00838A If Bit 7 (negative flag) is set, branch to a different IRQ mode
00838C Enable NMI Interrupt and Automatic Joypad reading
008394 \ Adjust scroll settings for layer 3
008396  |
008399  |
00839B  |
00839E  |
0083A0  |
0083A3  |
0083A5 /
0083A8 \Set the layer BG sizes, L3 priority, and BG mode
0083AA /(Effectively, this is the screen mode)
0083AD \Write CGADSUB
0083AF /
0083B2 \ Pull everything back
0083B4  |
0083B5  |
0083B6  |
0083B7  |
0083B8 /
0083B9 And Return
0083BA Get bit 6 of $0D9B
0083BD If clear, skip the next code section
0083BF \Skip if $11 = 0
0083C1 /
0083C3 #$81 -> NMI / Controller Enable reg
0083D0 $11++
0083D2 \ Set up the IRQ routine for layer 3
0083D5  |-\
0083D7  |  |Vertical Counter trigger at 174 - $1888
0083D8  |-/ Oddly enough, $1888 seems to be 16-bit, but the
0083DB  |Store to Vertical Counter Timer
0083DE / Make the high byte of said timer 0
0083E1 A = NMI enable, V count enable, joypad automatic read enable, H count disable
0083E3 if $1493 = 0 skip down
0083E8 \ If $1495 is <#$40
0083EB  |
0083ED / Skip down
0083F1 Jump up to IRQNMIEnding
0083F3 A -> NMI/Joypad Auto-Read/HV-Count Control Register
0083F9 \Not often you see NOP, I think there was a JSL here at one point maybe
0083FA /
0083FB \Write Screen register
0083FD /
008400 \ Write L1 Horizontal scroll
008402  |
008405  |
008407 /
00840A \ Write L1 Vertical Scroll
00840C  |
00840F  |
008411 /
008414 And exit IRQ
008416 \
008418 /Write L1 GFX source address
00841B \Write L1/L2 Tilemap address
00841D /
008420 \ Write L1 Horizontal scroll
008422  |
008425  |
008427 /
00842A \ $1C + $1888 -> L1 Vert scroll
00842C  |$1888 = Some sort of vertioffset
00842D  |
008430 /
008433 \Other half of L1 vert scroll
008435 /
008438 Return
008439 <<- Could this be just to waste time?
00843B So... LDY gets set with 20 if there is a H-Blank...?
00843E if in H-Blank, make Y #$20 and try again
008440 Now wait until not in H-Blank
008445  |Y = 0
008446 / ...wait a second... why didn't they just do LDY #$00? ...waste more time?
008448 return
00844E OAM address
008454 Dest. address = $2104 (data write to OAM)
00845A Source address = $00:0200
008460 $0220 bytes to transfer
008465 Start DMA
00846A \
00846C  |
00846F  |Change the OAM read/write address to #$8000 + $3F
008471 /
008474 Return
0084C8 Wrapper
0084D0 Not used?
0084D3 Title screen
0084D6 OW border
0084DC CONTINUE/END
0084E2 1 PLAYER GAME/2 PLAYER GAME
0084E5 OW scroll arrows
0084E8 Remove OW scroll arrows
0084EE CONTINUE AND SAVE
0084F4 Cutscene 1 text: Line 7
0084F7 Cutscene 1 text: Line 6
0084FA Cutscene 1 text: Line 5
0084FD Cutscene 1 text: Line 4
008500 Cutscene 1 text: Line 3
008503 Cutscene 1 text: Line 2
008506 Cutscene 1 text: Line 1
008509 Cutscene 2 text: Line 8
00850C Cutscene 2 text: Line 7
00850F Cutscene 2 text: Line 6
008515 ...etc...
008599 Cutscene border, cave ground
0085A5 Ending: THE END
0085A8 Ending: Enemies: Lakitu
0085AB Ending: Enemies: Hammer Bro.
0085AE Ending: Enemies: Pokey
0085B1 Ending: Enemies: Rex
0085B4 Ending: Enemies: Dino-Rhino
0085B7 Ending: Enemies: Blargg
0085BA Ending: Enemies: Urchin
0085BD Ending: Enemies: Boo
0085C0 Ending: Enemies: Dry Bones
0085C3 Ending: Enemies: Grinder
0085C6 Ending: Enemies: Reznor
0085C9 Ending: Enemies: Mechakoopa
0085CC Ending: Enemies: Bowser
0085D2 12 = Image loader
0085D4 \
0085D7  |
0085D9   |Load pointer
0085DC  |
0085DE   |
0085E1 /
0085F7 Do not reload the same thing next frame
008601 Set "VRAM Address Increment Value" to x00
008604 Set "Address for VRAM Read/Write (Low Byte)" to x00
008607 \ Set "Address for VRAM Read/Write (High Byte)" to x50
008609 /
008617 DMA something to VRAM, my guess is a tilemap...
008625 \Change CRAM address
008628  |
00862A /
00862D And Repeat the DMA
008638 \but change desination address to $2119
00863A /
00863D Start DMA
008640 $3B = 0 (not sure what $3B is)
008642 and JSL to a RAM routine
008646 Jump to the next part of this routine
008650 \
008653  |
008655  |
008658  |
008659  |
00865C  |
00865F  |
008662  |
008665  |
008668  |
00866B  |
00866C  |
00866F  |
008672  |
008675  |Read controller data
008678  |
00867B  |
00867D  |
008680  |
008681  |
008684  |
008687  |
00868A  |
00868D  |
008690  |
008693  |
008694  |
008697  |
00869A  |
00869D /
0086A0 \
0086A3  |If $0DA0 is positive, set X to $0DA0
0086A5  |Otherwise, set X to current character
0086A8 \
0086AB  |
0086AD  |
0086B0  |
0086B2  |
0086B5  |Update controller data bytes
0086B7  |
0086BA  |
0086BC  |
0086BF  |
0086C1  |
0086C4 /
0086C6 Return
0086DF "Push" Y
0086E4 16 bit A
0086E6 A = Game mode
0086E9 Multiply game mode by 2
0086F1 A is 16-bit
0086F5 "Pull" Y
0086F7 Jump to the game mode's routine, which has been loaded into $00-02
0086FF 16 bit A,X,Y
008701 \ A = Tileset/byte 3 (TB3)
008704 / Store A in $03
008706 \ Multiply A by 2
008707  |Add TB3 to A
008709 / Set Y to A
00871E 16 bit X,Y
008723 Set index to 0
008726 \ Read line header byte 1
008728  |If the byte & %10000000 is true,
00872A  |Set A,X,Y to 8 bit and return
00872C  |
00872D Store byte in $04
00872F Move onto the next byte
008730 Read line header byte 2
008732 Store byte in $03
008734 Move onto the next byte
008735 Read line header byte 3
008737 \
008739  |Store direction bit in $07
00873A /
00873C \ Set B address (DMA) to x18
00873E /
008741 Re-read line header byte 3
008743 \
008745  |
008746  |Store RLE bit << 3 in $05
008747  |
008748 /
008751 16 bit A
008770 8 bit A
0087AF \
0087B2  |If Layer 1 has to be updated,
0087B4  |jump to $88DD
0087B7 \
0087B9  |
0087BB  |If on a vertical level,
0087BD  |jump to $8849
0087C0 \ Set "VRAM Address Increment Value" to x81
0087C2 /
0087DC \ Enable DMA channel 1
0087DE /
008800 \ Enable DMA channel 1
008803 /
00881E \ Enable DMA channel 1
008820 /
008841 \ Enable DMA channel 1
008843 /
008A79 Set "Screen Initial Settings" to x00
008A7C Turn off mosaic
008AAE \ Set Mode7 "Screen Over" to %10000000, disable Mode7 flipping
008AB0 /
008AB3 Return
008CFF More DMA
008D01 Increment when $2119 accessed
008D04 \VRAM address = #$502E
008D06  |
008D09  |
008D0B /
008D13 Load up the DMA regs
008D16 DMA Source = 8C:8118 (...)
008D17 Dest = $2118, Transfer: #$08 bytes
008D1B Do the DMA
008D1E \ Set VRAM mode = same as above
008D20  |Address = #$5042
008D23  |
008D25  |
008D28  |
008D2A /
008D2D \ Set up more DMA
008D2F  |Dest = $2100
008D32  |Fixed source address = $89:1801 (Lunar Address: 7E:1801)
008D35  |#$808C bytes to transfer
008D36 /Type = One reg write once
008D3A Start DMA
008D3D \prep VRAM for another write
008D3F  |
008D42  |
008D44  |
008D47  |
008D49 /
008D4C \ Load up DMA again
008D4E  |Dest = $2118
008D51  |Source Address = $39:8CC1
008D54  |Size = #$0100 bytes
008D55 /Type = Two reg write once
008D57 \Start Transfer
008D59 /
008D5C \
008D5E  |Set up VRAM once more
008D61  |
008D63  |
008D66  |
008D68 /
008D6B \Last DMA...
008D6D  |Reg = $2118 Type = Two reg write once
008D70  |Source Address = $08:8CF7
008D73  |Size = #$9C00 bytes (o_o)
008D74 /
008D76 \Transfer
008D78 /
008D7B \Copy some data into RAM
008D7D  |
008D7F  |
008D82  |
008D85  |
008D86  |
008D87  |
008D88 /
008D8C #$28 -> Timer frame counter
008D8F Return
008DAC Set VRAM Address Increment Value to x00
008DAF \
008DB1  |Set Address for VRAM Read/Write to x5042
008DB4  |
008DB6 /
008DB9 \
008DBB  |Load settings from DMAdata_StBr1 into DMA channel 1
008DBE  |
008DC1  |
008DC2 /
008DC4 \ Activate DMA channel 1
008DC6 /
008DC9 Set VRAM Address Increment Value to x00
008DCC \
008DCE  |Set Address for VRAM Read/Write to x5063
008DD1  |
008DD3 /
008DD6 \
008DD8  |Load settings from DMAdata_StBr2 into DMA channel 1
008DDB  |
008DDE  |
008DDF /
008DE1 \ Activate DMA channel 1
008DE3 /
008DE6 Return
008DE7 DMA settings for copying the top half
008DEB of the status bar to VRAM
008DEE DMA settings for copying the bottom half
008DF2 of the status bar to VRAM
008E1A \
008E1D  |If level is ending or sprites are locked,
008E1F / branch to $8E6F
008E32 \
008E35  |If time is 0,
008E38  |branch to $8E6F
008E3B /
008E4C \
008E4F  |
008E51  |
008E54  |If time is 99,
008E57  |speed up the music
008E59  |
008E5B  |
008E5D  |
008E60 \
008E63  |
008E66  |If time is 0,
008E69  |JSL to $00F606
008E6B  |
008E6F \
008E72  |
008E75  |Copy time to $0F25-$0F27
008E78  |
008E7B  |
008E7E /
008E9E 16 bit A
008EAE 8 bit A
008EBF 8 bit A
008EC6 \ Store high byte of Mario's score in $00
008EC9 /
008ECB Store x00 in $01
008ECD \ Store mid byte of Mario's score in $03
008ED0 /
008ED2 \ Store low byte of Mario's score in $02
008ED5 /
008EDE \
008EE0  |
008EE3  |
008EE5  |Replace all leading zeroes in the score with spaces
008EE7  |
008EEA  |
008EEB  |
008EED  |
008EEF Get current player
008EF2 If player is Mario, branch to $8F1D
008EF4 \ Store high byte of Luigi's score in $00
008EF7 /
008EF9 Store x00 in $01
008EFB \ Store mid byte of Luigi's score in $03
008EFE /
008F00 \ Store low byte of Luigi's score in $02
008F03 /
008F0C \
008F0E  |
008F11  |
008F13  |Replace all leading zeroes in the score with spaces
008F15  |
008F18  |
008F19  |
008F1B /
008F1D \ If Coin increase isn't x00,
008F20 / branch to $8F3B
008F22 Decrease "Coin increase"
008F25 Increase coins by 1
008F28 \
008F2B  |If coins<100, branch to $8F3B
008F2D /
008F2F Increase lives by 1
008F32 \
008F35  |Decrease coins by 100
008F36  |
008F38 /
008F3B \ If amount of lives is negative,
008F3E / branch to $8F49
008F40 \ If amount of lives is less than 98,
008F42 / branch to $8F49
008F44 \ Set amount of lives to 98
008F46 /
008F49 \
008F4C  |Get amount of lives in decimal
008F4D /
008F50 \
008F51  |If 10s is 0, replace with space
008F53  |
008F55 \ Write lives to status bar
008F58 /
008F5B \ Get bonus stars
008F5E /
008F61 \ If bonus stars is less than 100,
008F63 / branch to $8F73
008F65 \ Start bonus game when the level ends
008F67 /
008F6A \
008F6D  |Subtract bonus stars by 100
008F6E  |
008F70 /
008F73 \ Get amount of coins in decimal
008F76 /
008F79 \
008F7A  |If 10s is 0, replace with space
008F7C  |
008F7E \ Write coins to status bar
008F81 /
008F84 8 bit A
008F86 Load Character into X
009012 8 bit A
009017 16 bit A
009032 8 bit A
009042 8 bit A
009045  |
009047  |
009049  |Sets A to 10s of original A
00904B  |Sets X to 1s of original A
00904D  |
00904E  |
009050 /
009095  Bug: Most sprites have glitched gfx if put in item reserve.  See ItemFix.asm
0091BD \
0091C0  |Set timer to 000
0091C3 /
009235 Set "Address for CG-RAM Write" to 0
009260 Disable all HDMA channels
009263 16 bit A
009265 \
009268  |
00926A  |Clear "HDMA table for windowing effects"
00926D  |...hang on again.  It clears one set of RAM here, but not the same
009270  |
009271  |
009272 /
009274 \ Set A to 8bit and return
009276 /
009291 out?
009294 *note to self: ctrl+insert, not shift+insert*
009296 ...  This is, uh, strange.  It pastes $00FF into the $04A0,x table
009299 instead of $FF00 o_O
0092A0  Enable channel 7 in HDMA, disable all other HDMA channels
0092A2  $7E:0D9F - H-DMA Channel Enable RAM Mirror
0092A8 these are somewhat the same subroutine, but also not >_>
009322 Load game mode
009329 00 -
00932B 01 -
00932D 02 -
00932F 03 -
009331 04 -
009333 05 -
009335 06 -
009337 07 -
009339 08 -
00933B 09 -
00933D 0A -
00933F 0B -
009341 0C -
009343 0D -
009345 0E -
009347 0F -
009349 10 -
00934B 11 -
00934D 12 -
00934F 13 -
009351 14 -
009353 15 -
009355 16 -
009357 17 -
009359 18 -
00935B 19 -
00935D 1A -
00935F 1B -
009361 1C -
009363 1D -
009365 1E -
009367 1F -
009369 20 -
00936B 21 -
00936D 22 -
00936F 23 -
009371 24 -
009373 25 -
009375 26 -
009377 27 -
009379 28 -
00937B 29 -
00937D Disable NMI ,VIRQ, HIRQ, Joypads
009380 Turn off all HDMA
009383 \
009385 /Disable Screen
009388 And return
009389 Nintendo Presents X locations
00938D Nintendo Presents tilemap
00939A \ Load Nintendo Presents logo
00939C  |
00939E  |
0093A1  |
0093A4  |   <-Y position of logo
0093A6  |
0093A9  |
0093AC  |
0093AF  |
0093B1  |
0093B4  |
0093B5  |
0093B6  |
0093B7  |
0093B8  |
0093B9 /
0093BB \ Related to making the sprites 16x16?
0093BD /
0093C0 \ Play "Bing" sound?
0093C2 /
0093C5 \ Set timer to x40
0093C7 /
0093CA \ Set brightness to max
0093CC /
0093D4 Sprite palette setting = 0
0093D7 Load the palette
0093DA \ Black background
0093DD /
0093E3 Set menu pointer position to 0
0093E6 Enable sprites, disable layers
0093E8 Set Layer 3 to subscreen
0093EF CGADSUB = 20
0093F1 Apply above settings
0093F4 Move on to Game Mode 01
0093F7 \ Enable NMI and joypad, Disable V-count and H-cout
0093F9 /
0093FD \ Set CGADSUB settings to A
009400 /
009402 Set "Background and Object Enable" to X
009405 Set "Sub Screen Designation" Y
009408 \ Set "Window Mask Designation" for main and sub screen to x00
00940B /
00940E Return
00940F Decrease timer
009412 \ If timer is 0:
009414  |Jump to sub $B888
009417  |Move on to Game Mode 02
00941A Return
009446 \
009448  |Store x80 in $00,
00944A  |Store x70 in $01
00944C /
009450 Background colors to use for cutscenes
009454 Purpose of first byte is unknown
009458 Castle palette to use for cutscenes
00945C Purpose of first byte is unknown
009471 Cutscene number
00950A Change to #$30 to enter debug region below
009510 \ Unreachable
009512  | Debug: Boss defeated scene select
009514  |
009516  |
009519  |
00951A  |
00951C  |
00951E  |
009520  |
009523  |
009525  |
009528 /
0096C6 \ Set title screen music
0096C8 /
0097BE Set brightness to full (RAM mirror)
0097C7 \
0097C9 |Not sure what these bytes are used for yet, unless they're just more
0097CB /scratch (I find that unlikely)
00986A  Y speed = 0
0098A9 \
0098AC  |If "Special level" is even,
0098AD / branch to $98E1
0098B6 16 bit A
0098E1 16 bit A
009922 8 bit A
009A74 \Read old-style controller register for player 1
009A77 /LSR A, but then discard (Is this for carry flag or something?)
009A78 \Load And Rotate left A (player 2 old-style controller regs)
009A7B /
009A7C AND A with #$03
009A7E If A AND #$03 = 0 Then STA $0DA0 (A=0)
009A8A *yawn*
009A91 Zero the timer
009A97 \ Load title screen Layer 3 image
009A99  |
009A9B /
009AA4 todo: NOTE TO SELF: Check this routine out after making Bank4.asm
009AA8 \ Set special level to x01
009AAA /
009AD0 Blinking cursor frame counter (file select, save prompt, etc)
009B80 Wrapper
009BA8 Wrapper
009C6C Zero controller RAM mirror
009C6F (Unknown byte) -> X
009C72 Decrement $1DF5 (unknown byte)
009C75 if !=  0 branch forward
009C77 Load $00/9C20,$1DF4
009C7A And store to $1DF5
009C7E $1DF4+=2
009C82 With the +=2 above, this is effectively LDA $9C20,$1DF4
009C89 If = #$FF, switch to game mode #$02...
009C8E ...And finish
009C91 Write to controller RAM byte 01
009C9A Write to byte 01, Just-pressed variant
009C9C Jump to another section of this routine
009C9F IIRC, this contains a lot of STZ instructions
009CA5 Zero something related to PPU
009CAD Disable all HDMA
009CB2 #$E9 -> Uknown RAM byte
009CB8 -> here
009CBB Increase the Game mode and return (at jump point)
009CD1 16 bit A
009D24 \ Draw 1 PLAYER GAME/2 PLAYER GAME text
009D26  |Increase Game Mode
009D29 /
009D30 Store A in BG color
009D33 Store Y in CGADSUB
009D35 8 bit A
009D41 X =  read index
009D45 Y = write index
009D47 Layer 3-related table
009D4E If not at end of loop, continue
009D5D  $05 = $05 / 2
009F10 \
009F13 |Write overworld settings to OW L1 table
009F16 /
009F22 <- This probably means that the table above ends at 1FB7
009F37 \If 0DB1 = 0 Then Exit Ssub
009F3A /Decrease it either way.
009F3C #$01 -> $0DB1
009F42 \
009F45  |Increase $0DB0 (mosaic size) by $9F31,y
009F46  |
009F49 /
009F4C Load Brightness byte from RAM
009F4F \Add $9F2F,Y
009F50 /
009F53 Store back to brightness RAM byte
009F5B Game Mode += 1
009F5E \
009F61  |$0DAF = $0DAF XOR 1
009F63 /
009F66 \
009F68  |Set mosaic size to $0DB0, enable mosaic on Layer 1 and 2.
009F6B /
009F6E I think we're done here
009F6F Decrement something...  Seems like it might be a timing counter
009F72 If positive, return from subroutine.
009F74 Remain in this mode
009F77 $0DAF -> Y,
009F7A BRA to the fade control routine
009FB8 \
009FBB  |Get (Tileset*3), store in $00
009FBC  |
009FBD  |
009FC0 /
00A153 \ Load overworld border
00A155  |
00A157 /
00A1A6 16 bit X,Y
00A1A8 8 bit A
00A1AA \
00A1AD  |Clear RAM addresses $1A-$D7
00A1AF  |
00A1B0 /
00A1B2 \
00A1B5  |Clear RAM addresses $13D3-$1BA1
00A1B8  |
00A1B9 /
00A1BB 16 bit X,Y
00A1BD Return
00A1C1 Increase alternate frame counter
00A1C7 (Bank 4.asm)
00A249 \ Unreachable
00A24C  | Debug: Slow motion
00A24E  |
00A251  |
00A253  |
00A255  |
00A257  |
00A259 /
00A274 \ Unreachable
00A276  | Debug: Beat level with Start+Select
00A278  |
00A27A /
00A2AF  \ Reset amout to shift level
00A2B2  /
00A2B5  \ If shake ground timer is set
00A2B8   |
00A2BA   | Decrement timer
00A2BD   |
00A2BF   |
00A2C0   |
00A2C3   | $1888-$1889 = Amount to shift level
00A2C6   |
00A2C7   |
00A2C9   | Adjust screen boundry accordingly
00A2CB   |
00A2CE   |
00A2D1   |
00A2D3  /
00A300 16 bit A
00A302 We're using DMA channel 2
00A309 \ Set Address for CG-RAM Write to x86
00A30B /
00A314 \ Get location of palette from $0D82-$0D83
00A317 /
00A31A \ Palette is stored in bank x00
00A31C /
00A31F \ x14 bytes will be transferred
00A322 /
00A325 Transfer the colors
00A328 \ Set VRAM Address Increment Value to x80
00A32A /
00A33F \ Set bank to x7E
00A341 /
00A344 \ x20 bytes will be transferred
00A347 /
00A34A Transfer
00A34D \ Set Address for VRAM Read/Write to x6000
00A350 /
00A355 \ Get address of graphics to copy
00A358 /
00A35B \ x40 bytes will be transferred
00A35E /
00A361 \ Transfer
00A363 /
00A366 \ Move to next address
00A367 /
00A368 \ Repeat last segment while X<$0D84
00A36B /
00A36D \ Set Address for VRAM Read/Write to x6100
00A370 /
00A375 \ Get address of graphics to copy
00A378 /
00A37B \ x40 bytes will be transferred
00A37E /
00A381 \ Transfer
00A383 /
00A386 \ Move to next address
00A387 /
00A388 \ Repeat last segment while X<$0D84
00A38B /
00A38D 8 bit A
00A38F Return
00A43E 16 bit A
00A47C 8 bit A
00A594 Wrapper
00A59C gah, stupid keyboard >_<
00A5AB ->here
00A5B4 Working on this routine
00A635  If blue pow...
00A638  ...or silver pow...
00A640 \ Branch if Mario doesn't have star
00A643 /
00A654  Zero out POW timer
00A657  Zero out silver POW timer
00A65D Zero out star timer
00A709  \ Animation = Rise off screen,
00A70B  / for Yoshi Wing bonus stage
00A711  \ Set upward speed, #$90
00A713  /
00A768  \ Set downward speed, #$1C
00A76A  /
00A7C2 16 bit A
00A82A 8 bit A
00A8C3 Forest
00A8C7 Castle
00A8CB Mushroom
00A8CF Underground
00A8D3 Water
00A8D7 Pokey
00A8DB Underground 2
00A8DF Ghost House
00A8E3 Banzai Bill
00A8E7 Yoshi's House
00A8EB Dino-Rhino
00A8EF Switch Palace
00A8F3 Mechakoopa
00A8F7 Wendy/Lemmy
00A8FB Ninji
00A8FF Unused
00A92B Normal 1
00A92F Castle 1
00A933 Rope 1
00A937 Underground 1
00A93B Switch Palace 1
00A93F Ghost House 1
00A943 Rope 2
00A947 Normal 2
00A94B Rope 3
00A94F Underground 2
00A953 Switch Palace 2
00A957 Castle 2
00A95B Cloud/Forest
00A95F Ghost House 2
00A963 Underground 2
00A993 \
00A996  |Set "Address for VRAM Read/Write" to x4000
00A998 /
00A9C4 \
00A9C7  |Set "Address for VRAM Read/Write" to x6000
00A9C9 /
00A9DA Decompression as well?
00A9DC VRAM transfer control port
00A9E1 $192B = current sprite GFX list index
00A9E4 \
00A9E5  }4A -> Y
00A9E6 /
00A9E7  |
00A9EA  |
00A9EC  |
00A9ED  |
00A9EE /
00A9F0 #$03 -> A -> $0F
00A9F4 $0F -> X
00A9F6 #$00 -> $2116
00A9F9 My guess: Locations in VRAM to upload GFX to
00A9FC Set VRAM address to $??00
00A9FF Y is possibly which GFX file
00AA01 to upload to a section in VRAM, used in
00AA04 the subroutine $00:BA28
00AA06 don't upload when it''s not needed
00AA08 JSR to a JSL...
00AA0B Decrement $0F
00AA0D if >= #$00, continue transfer
00AA0F \
00AA11  |Update $0101-$0104 to reflect the new sprite GFX
00AA13  |That's loaded now.
00AA16  |
00AA17 /
00AA19 LDA Tileset
00AA1E Branch to a routine that uploads file #$80 to every slot in FG/BG
00AA22 this routine is pretty close to the above
00AA25 one, I'm guessing this does
00AA26 object/BG GFX.
00AA27 4A -> Y
00AA28 FG/BG GFX table
00AA2F FG/Bg to upload -> $04 - $07
00AA33 #$03 -> $0F
00AA35 $0F -> X
00AA3A Load + Store VRAM upload positions
00AA42 Check to see if the file to be uploaded already
00AA45 exists in the slot in VRAM - if so,
00AA47 don't bother uploading it again.
00AA49 Upload the GFX file
00AA4C Next GFX file
00AA5A Return from uploading the GFX
00AA5B If zero flag set, don't update the tileset
00AA62 my guess is that it gets called in the same set of routines
00AA6A Return
00AA76 handle the post-special world graphics and koopa color swap.
00AA80 A = 16bit
00AA85 LDX Tileset
00AA88 CPX #$11
00AA8A If Tileset < #$11 skip to lower area
00AA8C if Y = #$08 skip to JSR
00AA90 If Y = #$1E then
00AA92 JMP otherwise
00AA94 don't JMP
00AB01 Return
00AB09 \Completely pointless code.
00AB0B /(Why not just NOPing it out, Nintendo?)
00AB0F \ Okay, so take [$00], store
00AB11  |it to VRAM, then bitwise
00AB14  |OR the high and low bytes together
00AB15  |store in both bytes of A
00AB17 /and store to $1BB2,x
00AB1A \Increment $7E:0000 by 2
00AB1C /
00AB1E \And continue on another 7 times (or 8 times total)
00AB1F /
00AB21 hm..  It's like a FOR Y{FOR X{ } } thing ...yeah...
00AB25 A normal byte becomes 2 anti-compressed bytes.
00AB28 I'm going up, to try and find out what's supposed to set $00-$02 for this routine.
00AB2A AHA, check $00/BA28.  It writes a RAM address to $00-$02, $7EAD00
00AB2C So...  Now to find otu what sets *That*
00AB2D ...this place gives me headaches... Can't we work on some other code? :(
00AB30 Sure, go ahead.  anyways, this seems to upload the decompressed GFX
00AB32 while scrambling it afterwards (o_O).
00AB34 Okay... WHAT THE HELL?
00AB37 I'll have nightmares about this routine for a few years. :(
00AB3A Ouch.
00AB41 Return
00ABC3 Return
00ABD2 Return
00ABED 16 bit A, X and Y
00ABEF \
00ABF2  |Set color 1 in all object palettes to white
00ABF4  |
00ABF7 /
00ABFA \
00ABFD  |Set color 1 in all sprite palettes to white
00ABFF  |
00AC02 /
00AC05 \
00AC08  |
00AC0A  |Load colors 8-16 in the first two object palettes from 00/B170
00AC0D  |(Layer 3 palettes)
00AC0F  |
00AC12  |
00AC14  |
00AC17  |
00AC19 /
00AC1C \
00AC1F  |
00AC21  |Load colors 2-7 in palettes 4-D from 00/B250
00AC24  |(Object and sprite palettes)
00AC26  |
00AC29  |
00AC2B  |
00AC2E  |
00AC30 /
00AC33 \
00AC36  |
00AC39  |Load background color
00AC3A  |
00AC3B  |
00AC3E /
00AC41 \Store base address in $00, ...
00AC44 /
00AC46 \...get current object palette, ...
00AC49 /
00AC4C \
00AC4D  |
00AC50  |...use it to figure out where to load from, ...
00AC53  |
00AC54  |...add it to the base address...
00AC56 / ...and store it in $00
00AC58 \
00AC5B  |
00AC5D  |
00AC60  |Load colors 2-7 in object palettes 2 and 3 from the address in $00
00AC62  |
00AC65  |
00AC67 /
00AC6A \Store base address in $00, ...
00AC6D /
00AC6F \...get current sprite palette, ...
00AC72 /
00AC75 \
00AC76  |
00AC79  |...use it to figure out where to load from, ...
00AC7C  |
00AC7D  |...add it to the base address...
00AC7F / ...and store it in $00
00AC81 \
00AC84  |
00AC86  |
00AC89  |Load colors 2-7 in sprite palettes 6 and 7 from the address in $00
00AC8B  |
00AC8E  |
00AC90 /
00AC93 \Store bade address in $00, ...
00AC96 /
00AC98 \...get current background palette, ...
00AC9B /
00AC9E \
00AC9F  |
00ACA2  |...use it to figure out where to load from, ...
00ACA5  |
00ACA6  |...add it to the base address...
00ACA8 / ...and store it in $00
00ACAA \
00ACAD  |
00ACAF  |
00ACB2  |Load colors 2-7 in object palettes 0 and 1 from the address in $00
00ACB4  |
00ACB7  |
00ACB9 /
00ACBC \
00ACBF  |
00ACC1  |
00ACC4  |
00ACC6  |Load colors 9-F in object palettes 2-4 from 00/B674
00ACC9  |
00ACCB  |
00ACCE  |
00ACD0 /
00ACD3 \
00ACD6  |
00ACD8  |
00ACDB  |
00ACDD  |Load colors 9-F in sprite palettes 1-3 from 00/B674
00ACE0  |
00ACE2  |
00ACE5  |
00ACE7 /
00ACEA 8 bit A, X and Y
00ACEC Return
00ACFE Return
00AD1D Return
00ADA5 Return
00ADD8 Return
00AE14 Return
00AE40 Return
00AE64 Return
00AFA2 Return
00AFBF Return
00B005 Return
00B03D Return
00B090 Return
00B88A \
00B88D  |Store the address 08/BFC0 at $8A-$8C
00B88F  |
00B891 /
00B893 \
00B896  |Store the address 7E/2000 at $00-$02
00B898  |
00B89A /
00B89F \
00B8A1  |
00B8A3  |Store the address 7E/ACFE at $8D-$8F
00B8A5  |
00B8A8 /
00B8E0 \
00B8E3  |
00B8E6  |If the next byte is xFF, return.
00B8E8  |Compressed graphics files ends with xFF IIRC
00B8EA  |
00B8EC /
00B983 Read the byte
00B985 \ Go to next byte
00B987  |
00B988  |   \
00B98A  |    |Handle bank crossing
00B98D  |   /
00B98F /
00B991 Return
00BA4C Return
00BEF6  Set low byte of pointer
00BEFC  Set middle byte of pointer
00BF02  High byte of pointer = #$00
00BFBB Return
00BFC5 $9C - Tile generated
00BFC9 01 - empty space
00BFCB 02 - empty space
00BFCD 03 - vine
00BFCF 04 - tree background, for berries
00BFD1 05 - always turning block
00BFD3 06 - coin
00BFD5 07 - Mushroom scale base
00BFD7 08 - mole hole
00BFD9 09 - invisible solid
00BFDB 0a - multiple coin turnblock
00BFDD 0b - multiple coin q block
00BFDF 0c - turn block
00BFE1 0d - used block
00BFE3 0e - music block
00BFE5 0f - music
00BFE7 10 - all way music block
00BFE9 11 - sideways turn block
00BFEB 12 - tranlucent
00BFED 13 - on off
00BFEF 14 - side of pipe, left
00BFF1 15 - side of pipe, right
00BFF3 16 - used
00BFF5 17 - O block from 1up game
00BFF7 18 - invisible block containing wings
00BFF9 19 - cage
00BFFB 1a - cage
00BFFD 1b -
00C062 Return
00C08C \ X = index of tile to generate
00C08E  |
00C091 /
00C094 \ Reset #$01 bit
00C096  |
00C098 /
00C09A \ Store tile
00C09E /
00C0D9 \ X = index of tile to generate
00C0DB  |
00C0DC  |
00C0DF  |
00C0E2 /
00C0E5 \ Set #$01 bit
00C0E7  |
00C0E9 /
00C0EB \ Store tile
00C0EF /
00C1AB Return
00C29D Return
00C3D0 Return
00C452 Return
00C4F8  Bug: Crash?  Should clear $13FB if animation is in progress ($71 non-zero).  See fireberryfix.asm
00C500 \ Branch if sprites locked
00C502 /
00C527 / Change music
00C54C / Change music
00C557 \ Play sound effect
00C559 /
00C576 Change to BEQ to reach debug routine below
00C578 \ Unreachable
00C57A  | Debug: Cycle through powerups
00C57B  |
00C57D  |
00C57F  |
00C581  |
00C583 /
00C592 Return
00C599 0 - Reset                  
00C59B 1 - Power down             
00C59D 2 - Mushroom power up      
00C59F 3 - Cape power up          
00C5A1 4 - Flower power up        
00C5A3 5 - Door/Horizontal pipe exit
00C5A5 6 - Vertical pipe exit     
00C5A7 7 - Shot out of diagonal pipe
00C5A9 8 - Yoshi wings exit       
00C5AB 9 - Mario Death            
00C5AD A - Enter Castle           
00C5AF B - freeze forever         
00C5B1 C - random movement??      
00C5B3 D - freeze forever         
00C6F0 \ Branch if Mario has upward speed
00C6F2 /
00C720 \ Play sound effect
00C722 /
00C732 \ Play sound effect
00C734 /
00C75F \ Play sound effect
00C761 /
00C798 \ Play sound effect
00C79A /
00C7AC \ Play sound effect
00C7AE /
00C7D1 \ Play sound effect
00C7D3 /
00C7F8 Return
00C807  \ Branch if Mario has downward speed
00C809  /
00C80B  \ Branch if Y speed < #$90
00C80D  /
00C80F  \ Y Speed -= #$0D
00C810   |
00C812  /
00C90F \ Play sound effect
00C911 /
00C914 Return
00C96A Return
00C9BE / Change music
00C9C1 Return
00C9D1  \ Branch if Goal Tape extra bits == #$02
00C9D4   | (never happens)
00C9D5   |
00C9D7  /
00C9D9  \ Unreachable
00C9DB   | Set submap to be Yoshi's Island
00C9DE  /
00C9FE  Store secret/normal exit info
00CA30 Return
00CA31  \ Mario's image = Peace Sign, or
00CA33   |
00CA36   |
00CA38   | Mario's image = Peace Sign on Yoshi
00CA3A  /
00CA3D Return
00CA43 Return
00CA49 Return
00CA60 Return
00CA61 16 bit A
00CA63 \
00CA66  |Load xCB12 into $04 and $06
00CA68 /
00CA6A 8 bit A
00CA6C Return
00CA88 16 bit A
00CA8A Keep lower byte of A
00CA8D \
00CA8E  |Set Y to ((2A-1)*2)
00CA8F  |
00CA90 /
00CA91 8 bit A
00CB11 Return
00CC5B Return
00CC84 Change to BEQ to enable debug code below
00CC86 \ Unreachable
00CC87  | Debug: Free roaming mode
00CC89  |
00CC8B  |
00CC8E  |
00CC90  |
00CC92  |
00CC93  |
00CC94  |
00CC96  |
00CC99  |
00CC9B  |
00CC9D  |
00CC9F  |
00CCA1  |
00CCA3  |
00CCA5  |
00CCA6  | Accum (16 bit)
00CCA8  |
00CCAA  |
00CCAB  |
00CCAE  |
00CCB0  | Accum (8 bit)
00CCB2 / Return
00CCC6 \ Branch if sprites locked
00CCC8 /
00CCD0  \ If lock Mario timer is set...
00CCD3   |
00CCD5   | Decrease the timer
00CCD8   | X speed = 0
00CCDA   | Mario's image = Going down tube
00CCDC  /
00CCDF Return
00CD24  \ Branch if Mario has downward speed
00CD26  /
00CD2E  Y speed = 0
00CD94 Return
00CDA3  \ Mario's image = Going down tube
00CDA5  /
00CDC4  \ Mario's image = Picking up object
00CDC6  /
00CDC9 \ Check Yoshi wing ability address for #$01,
00CDCC / but this is an impossible value
00CDCE \ Unreachable/unused code
00CDD0  | Lets Mario (any power) shoot fireballs while on Yoshi
00CDD2  |
00CDD4  |
00CDD6  |
00CDD9 /
00CDDC Return
00CDF6 \ Branch if anything besides L/R being held
00CDF8  |
00CDFA  |
00CDFC /
00CDFE \ Branch if L/R not being held
00CE00  |
00CE02  |
00CE04  |
00CE06 /
00CE3F \ Play sound effect
00CE41 /
00CEB1 Related to cape animation?
00CEB6 Cape image
00CEB9 If Mario isn't in air, branch to $CEDE
00CEBB branch to $CEDE
00CEBF \ If Mario is falling (and thus not on ground)
00CEC1 / branch down
00CEC3 \ If making a "run jump",
00CEC5 / branch to $CEFD
00CEC7 \ If Mario is in water,
00CEC9  |branch to $CEFD
00CECB / otherwise, branch to $CEE4
00CECD \
00CECE  |if X >= #$04 and != #$FF then jump down <- counting the INX
00CED0 /
00CED2 X = #$05
00CED4 Branch to $CF04
00CED6 \ If X is less than #$0B,
00CED8 / branch to $CF0A
00CEDA X = #$07
00CEDC Mario is not in the air, branch to $CF0A
00CEDE \ If Mario X speed isn't 0,
00CEE0 / branch to $CEF0
00CEE2 Otherwise Y = #$08
00CEE4 A = X = #13DF
00CEE5 If $13DF (now A) = 0 branch to $CF04
00CEE7 \
00CEE8  |If X - 1 < #$03 Then Branch $CF04
00CEEA /
00CEEC X = #$02
00CEEE Branch to $CF04
00CEF0 \
00CEF2  |A = abs(A)
00CEF4  |
00CEF5 \
00CEF6  |Divide a by 8
00CEF7 /
00CEF8 Y = A
00CEF9 A = Mario animation speed? (I didn't know it was a table...)
00CEFC Load Y with this table
00CEFD \
00CEFE  |
00CF00  |If X is < #$02 and != #$FF <- counting the INX
00CF02  |then X = #$05
00CF04 \
00CF06  |If X is greater than or equal to #$07 then X = #$03
00CF08  |
00CF0A And X goes right back into $13DF (cape image) after being modified
00CF0D Now Y goes back into A
00CF0E \
00CF10  |If mario is in water then A = 2A
00CF12  |
00CF13 A -> $14A2 (do we know this byte yet?) no.
00CF16 A = Spin Jump Flag
00CF1C If $140D OR $14A6 = 0 then branch to $CF4E
00CF1E 0 -> Ducking while jumping flag
00CF20 \
00CF22  |X = Y = Alternate frame counter AND #$06
00CF24  |
00CF25 /
00CF26 \ If on ground branch down
00CF28 /
00CF2A \ If Mario moving upwards branch down
00CF2C /
00CF2E Y = Y + 1
00CF2F \ After loading from this table,
00CF32 / Store A in cape image
00CF35 A = Mario's powerup status
00CF37 \
00CF39  |If not small, increase X
00CF3A \ Load from another table
00CF3D / store to Mario's Direction
00CF3F \
00CF41  |
00CF43  |If Mario has cape, JSR
00CF45  |to possibly the graphics handler
00CF48 \ Load from a table again
00CF4B / And jump
00CF4E \ If $13ED is #$01 - #$7F then
00CF51  |branch to $CF85
00CF53  |
00CF62 \ Select Case $148F
00CF64  |Case 0:A = #$3C
00CF67  |Case Else: A = #$1D
00CF69  |End Select
00CF6B \ If Ducking while jumping
00CF6D / Branch to $CF85
00CF6F \ If (Unknown) = 0
00CF72 / Branch to $CF7E
00CF74 A = #$3F
00CF76 \ If Mario isn't in air,
00CF78  |branch to $CF85
00CF7A  |Otherwise, set A to #$16 and
00CF7C / branch to $CF85
00CF7E A = #$0E
00CF80 \ If Time to show Mario's current pose is 00,
00CF83  | Don't jump to $D01A
00CF85  |
00CF88 A = #$1D
00CF8A \ If $1499 != 0 then Jump to $D01A
00CF8D /
00CF8F A = #$0F
00CF91 \ If $1499 != 0 then Jump to $D01A
00CF94 /
00CF96 A = #$00
00CF98 X = $18C2 (Unknown)
00CF9B If X != 0 then branch down
00CF9D \ If Mario is flying branch down
00CF9F /
00CFA1 \ If $14A0 != 0 then
00CFA4 / Skip down
00CFA6 Spaghetticode(tm)
00CFAE \ If Mario isn't holding something,
00CFB1  |branch to $D01A
00CFB3  |Otherwise, set A to #$09 and
00CFB5 / branch to $D01A
00CFBC \
00CFBE  |
00CFC0  |Set A to absolute value of Mario's X speed
00CFC2  |
00CFC3 Copy A to X
00CFC4 If Mario isn't standing still, branch to $CFD4
00CFC6 "Push" A
00CFC7 \
00CFC9  |If player isn't pressing up,
00CFCB  |branch to $D002
00CFCD  |Otherwise, store x03 in $13DE and
00CFCF  |branch to $D002
00CFD2 /
00CFD4 \ If level isn't slippery,
00CFD6 / branch to $CFE3
00CFE3 A = $13DB
00CFE6 \ If Mario is hurt (flashing),
00CFE9 / branch to $D003
00CFEB A = A - 1
00CFEC \If bit 7 is clear,
00CFEE  | Load amount of walking frames
00CFF0  | for current powerup
00CFF3 \ >>-This code puts together an index to a table further down-<<
00CFF4  |-\ Above Line: "Push" frame amount
00CFF5  |  |A = X / 8
00CFF6  |  |
00CFF7  |-/
00CFF8  |ORA with $13E5
00CFFB  |And store A to Y
00CFFC  |
00CFFF /
00D002 \ Switch in frame amount and store it to $13DB
00D003 /
00D006 \ Add walking animation type
00D007 / (Walking, running...)
00D00A \
00D00D  |
00D00F  |If Mario is carrying something, add #$07
00D010  |
00D012  |
00D014 \
00D016  |If X is greater than #$2F, add #$04
00D018 / <-Carry is always set here, adding #$01 to (#$03 + A)
00D01A \ If Mario isn't rotated 45 degrees (triangle
00D01D / block), branch to $D030
00D01F \ Y AND #$01 -> Mario's Direction RAM Byte
00D020  |
00D022 /
00D024 \
00D026  |If Y < 6 then
00D028  |    A = #13DB + $11
00D02A  |Else
00D02D  |    A = #$10
00D02E  |End If
00D030 Store in Current animation frame
00D033 And Finish
00D04B 16 bit A
00D04D \
00D04F  |
00D050  |
00D053  |Set cape<->sprite collision coordinates
00D056  |
00D058  |
00D059  |
00D05C /
00D05F 8 bit A
00D061 Return
00D07B \ Play sound effect
00D07D /
00D080 Return
00D0AA haha, I read this as "FEAR" at first
00D0AD Return
00D0B6 Set powerup to 0
00D0B8 \
00D0BA / Set Mario image to death image
00D0BD \
00D0BF  |Decrease "Death fall timer" every four frames
00D0C1  |
00D0C3  |
00D0C6 \ If Death fall timer isn't #$00,
00D0C9 / branch to $D108
00D0D5 Set reserve item to 0
00D0D8 Decrease amount of lifes
00D0DB If not Game Over, branch to $D0E6
00D0DF / Change music
00D0E2 Set X (Death message) to x14 (Game Over)
00D0E6 Set Y (game mode) to x0B (Fade to overworld)
00D0E8 \
00D0EB  |If time isn't zero,
00D0EE  |branch to $D104
00D0F1 /
00D0F3 Set X (Death message) to x1D (Time Up)
00D0F5 Store X in Death message
00D0F8 \ Set Death message animation to xC0
00D0FA /(Must be divisable by 4)
00D0FD \ Set Death message timer to xFF
00D0FF /
00D102 Set Y (game mode) to x15 (Fade to Game Over)
00D104 Store Y in Game Mode
00D107 Return
00D108 \ If Death fall timer >= x26,
00D10A / return
00D10C Set Mario X speed to 0
00D114 \
00D116  |
00D117  |Flip death image every four frames
00D118  |
00D11A /
00D131  \ Set Mario's image
00D134  /
00D13F Return
00D15E Return
00D18C Return
00D1AD  \ Mario's image = Entering horizontal pipe on Yoshi
00D1AF  /
00D212 \
00D214  | If not relativly centered on the pipe...
00D216  |
00D218  |
00D21B  |
00D21D  |
00D21F  |
00D220  | ...adjust Mario's X postion
00D222  |
00D223  |
00D226 /
00D228 \ Mario's image = going down pipe
00D22A /
00D22D \ Set holding X/Y on controller
00D22F /
00D231 \ Set behind scenery flag
00D233 /
00D24E \ If Mario has no speed...
00D250  |
00D252  |
00D254  | ...play sound effect
00D256 /
00D259 \ Set X speed
00D25C /
00D25E \ Set Y speed
00D261 /
00D263 Mario flying = false
00D26A \ In new level, reset values
00D26D /
00D27B Return
00D27C \ Unreachable
00D27E  |
00D27F  |
00D281  |
00D282  |
00D284  |
00D286 / Return
00D2A5 \ Play sound effect
00D2A7 /
00D2B0  Set sprites not locked
00D2B2  \ X speed = #$40
00D2B4  /
00D2B6  \ Y speed = #$C0
00D2B8  /
00D649 \ Play sound effect
00D64B /
00D65E \ Play sound effect
00D660 /
00D7A4 Return
00D8A8 \ Play sound effect
00D8AA /
00D8CD \ Branch if not flying
00D8CF /
00D8D1 X = #$00
00D8D3 \ Branch if not on Yoshi
00D8D6 /
00D8D8 \ Branch if not winged Yoshi
00D8DB  |
00D8DC /
00D8DE \ Branch if not Caped Mario
00D8E0  |
00D8E2 /
00D8E4 X= #$01
00D8E7 \ Branch if not Caped Mario
00D8E9  |
00D8EB /
00D8ED \ Branch if $72 != 0C
00D8EF  |
00D8F1 /
00D930 \ If Mario's Y speed is negative (up),
00D932 / branch to $D948
00D94E Return
00D967 Return
00D97F Return
00DA8C Return
00DAA8 Return
00DAA9 \ Play sound effect
00DAAB /
00DAB6 Return
00DB95 Return
00DB96 Mario is in Water flag
00DBA5 \ Play sound effect
00DBA7 /
00DBB2 \ Play sound effect
00DBB4 /
00DBBA Mario X
00DBC3 Mario's Direction
00DBCD Store A in Mario image
00DBF2 \
00DBF4  |If up or down isn't pressed, branch to $DC16
00DBF6 /
00DBF8 \ If up is pressed, branch to $DC03
00DBFA /
00DC00 Mario isn't climbing
00DC02 Return
00DC2C Return
00DC2D \ Store Mario's Y speed in $8A
00DC2F /
00DC4E Return
00DC77 Return
00E2CF \ Branch if Mario doesn't have star
00E2D2 /
00E2E0 Decrease star timer
00E305 / Change music
00E384 Return
00E45C Return
00E4B8 Return
00E9A0 Return
00EA8D \ Play sound effect
00EA8F /
00EAA5 Return
00EAB8 Return
00EB21 Return
00EB41 Return
00EB76 Return
00EC10 \ Play sound effect
00EC12 /
00EC5B Current MAP16 tile number
00EC83 Current MAP16 tile number
00EC98 Current MAP16 tile number
00ED06 Current MAP16 tile number
00ED09 \ If block is turn block, branch to $ED3B
00ED0B /
00ED41 / Play sound effect
00ED47 / Play sound effect
00EE06 $ED3B
00EE1D \ If Mario isn't on a sprite platform,
00EE20 / branch to $EE2D
00EE22 \ If Mario is moving up,
00EE24 / branch to $EE2D
00EE2D \
00EE2F  |If Mario is on an edge or in air,
00EE31  |branch to $EE39
00EE33 /
00EE35 \ Set "In air" to x24 (falling)
00EE37 /
00EE39 Return
00EE3A Current MAP16 tile number
00EE3D Tileset
00EE40 \ If tileset is "Rope 1",
00EE42 / branch to $EE48
00EE44 \ If tileset isn't "Rope 3",
00EE46 / branch to $EE57
00EE48 \
00EE49  |If the current tile isn't Rope 3's "Conveyor rope",
00EE4A  |branch to $EE57
00EE4C  |
00EE4E /
00EE5C Current MAP16 tile number
00EE5F \ If block isn't "Turn block",
00EE61 / branch to $EE78
00EE78 \ If block isn't "Brown block",
00EE7A / branch to $EE7F
00EE85 \ If Mario isn't moving up,
00EE87 / branch to $EE8F
00EEAE \ If switch block is already active,
00EEB1 / branch to $EED1
00EEB3 \ Activate switch block
00EEB4 /
00EEC4 / Change music
00EEC7 \
00EEC9 / Set music to xFF
00EF87 \ If Yoshi has stomp ability,
00EF8A  |
00EF8C  | Run routine
00EF90  | Play sound effect
00EF92 /
00EF98 Return
00EFAD Return
00EFB6 \ Play sound effect
00EFB8 /
00EFBB Return
00EFE7 Return
00F004 Return
00F026 / Play sound effect
00F04C Return
00F05B Return
00F15E Return
00F175 Return
00F1C9 \ Branch if Mario has star
00F1CC /
00F1F8 Return
00F238 / Play sound effect
00F23F \ Set data bank = $02
00F241  |
00F252 \ Block to generate = Used block
00F254 /
00F281 \ Block to generate = #$02
00F283 /
00F28B Return
00F2BF Return
00F2C8 Return
00F2CD \ Block to generate = #$02
00F2CF /
00F2EA / Play sound effect
00F2ED Return
00F308 Return
00F32B YOSHI COIN HANDLER
00F35A / Play sound effect
00F36B \ Block to generate = #$01
00F36D /
00F376 Return
00F3B1 Return
00F3C3 Return
00F43B / Play sound effect
00F442 Return
00F44C Return
00F464 Return
00F4A5 Return
00F4E6 Return
00F548 Load MAP16 tile number
00F54B \ If block isn't "Invisible POW ? block",
00F54D / branch to PSwitchNotInvQBlk
00F559 Return
00F55A \ If block is "Coin",
00F55C / branch to PSwitchCoinBrown
00F576 Return
00F583 Return
00F594 Return
00F5B6 Return
00F5B7 \ Return if animation sequence activated
00F5B9 /
00F5BB \ If flashing...
00F5BE  | ...or have star...
00F5C1  | ...or level ending...
00F5C4 / ...return
00F5D5 \ If Mario is small, kill him
00F5D7 /
00F5D9 \ Branch if not Caped Mario
00F5DB /
00F5DD \ Branch if not soaring
00F5E0 /
00F5E2 \ Break Mario out of soaring
00F5E4  | (Play sound effect)
00F5E7  | (Set spin jump flag)
00F5E9  |
00F5EC  | (Set flashing timer)
00F5EE /
00F5F3 \ Play sound effect
00F5F5 /
00F5FC \ Set power down animation
00F5FE /
00F600 Mario status = Small
00F606 \ Mario Y speed = #$90
00F608 /
00F60A \
00F60C / Change music
00F614 \ Animation sequence = Kill Mario
00F616 /
00F618 Spin jump flag = 0
00F61D Set hurt frame timer
00F620 set lock sprite timer
00F622 Cape status = 0
00F628 Return
00F62D Zero RAM mirrors for controller Input
00F635 Return
00F69E Return
00F7F3 Return
00F7F9 Return
00F833 \ If winged Yoshi...
00F836  |
00F83A  | ...or climbing
00F84F \ Branch if 141E >= #$02
00F852  |
00F854 /
00F8AA Return
00F8DE Return
00F91B / Play sound effect
00F94D Return
00F9C8 Return
00F9F4 Return
00FA10 \ Unreachable
00FA12  | Clear out sprite status table
00FA15  |
00FA16  |
00FA18 /
00FA44 Return
00FA45 \ Set "Time to shake ground" to x20
00FA47  /
00FA4A \
00FA4C  |Set sprite x02 to x60 (Flat palace switch)
00FA4E /
00FA51 \ Set sprite's status to x08
00FA53 /
00FA56 \
00FA58  |Set sprite X (low) to $9A & 0xF0
00FA5A /
00FA5D \ Set sprite X (high) to $9B
00FA5F /
00FA62 \
00FA64  |
00FA66  |Set sprite Y (low) to ($98 & 0xF0) + 0x10
00FA67  |
00FA69 /
00FA6C \
00FA6E  |Set sprite Y (high) to $99 + carry
00FA70 / (Carry carried over from previous addition)
00FA7A \ Set sprite's "Spin Jump Death Frame Counter" to x5F
00FA7C /
00FA7F Return
00FA86  Don't respawn sprites
00FA8F Loop over sprites:
00FA91 \ If sprite status < 8,
00FA94  | skip the current sprite
00FA96 /
00FA98 \ If Mario carries a sprite past the goal,
00FA9A  |
00FA9C  |
00FA9D  | he gets a powerup
00FAA0  |
00FAA1 /
00FAA3 \ Branch if goal tape
00FAA6  |
00FAA8 /
00FAAA \ If sprite on screen...
00FAAD  |
00FAB0  |
00FAB2  | ...and "don't turn into coin" not set,
00FAB5  |
00FAB7  |
00FAB9  | Set coin animation timer = #$10
00FABB  |
00FABE  | Sprite status = Level end, turn to coins
00FAC0  |
00FAC3 /
00FAC5 \ If "don't erase" not set,
00FAC8  |
00FACA  |
00FACC  | Erase sprite
00FACE /
00FAD1 \ Goto next sprite
00FAD2 /
00FAD4 \
00FAD6  | Clear out all extended sprites
00FAD8  |
00FADB  |
00FADC /
00FADE Return
00FB00 X = Mario's power up status
00FB02 \ If Mario has star, X = #$04.  However this never happens as $1490 is cleared earlier
00FB05  | Otherwise Mario could get a star from carrying a sprite past the goal.
00FB07  / Unreachable instruction
00FB09 \ If Mario on Yoshi, X = #$05
00FB0C  |
00FB0E /
00FB10 \ If Spring Board, X += #$07
00FB13  |
00FB15 /
00FB17 \ If P Switch, X += #$07
00FB19 /
00FB1B \ If Key, X += #$0E
00FB1D /
00FB1F \ If Baby Yoshi, X += #$15
00FB21 /
00FB69 \ Sprite status = Goal tape power up
00FB6B /
00FB7F / Play sound effect
00FB8C Return
00FBA3 Return
00FBB3 Return
00FBD6 \ Use Palette A
00FBD8 /
00FBE4 Y = Index into sprite OAM
00FBEF Return
00FC0C  Bug: Sprites glitch if too many near goal tape.  See goalsprites.asm
00FC22 Return
00FC23  \ Unreachable instructions
00FC25 / Status = Carried
00FC38 No Yoshi wings
00FC72 Return
00FC79 Return
00FC7C / Play sound effect
00FC8F \ X = First free sprite slot, #$03 if none free
00FC93  |
00FC94  |
00FC96 /
00FC98 \ Status = Normal
00FC9A /
00FC9D \ Sprite = Yoshi
00FC9F /
00FCA1 \ Yoshi X position = Mario X position
00FCA3  |
00FCA5  |
00FCA7 /
00FCAA \ Yoshi's Y position = Mario Y position - #$10
00FCAC  | Mario Y position = Mario Y position - #$10
00FCAD  |
00FCAF  |
00FCB1  |
00FCB3  |
00FCB5  |
00FCB7  |
00FCB9 /
00FCBC Reset sprite tables
00FCC5 \ Set Yoshi palette
00FCC8 /
00FCEB Return
00FCF4 Return
00FD07 Return
00FD19 \ Find a free extended sprite slot
00FD1B  |
00FD1E  |
00FD20  |
00FD21  |
00FD23 / Return if no free slots
00FD26 \ Extended sprite = Water buble
00FD28 /
00FD59 Return
00FD6A Return
00FD9C Return
00FE0D Return
00FE16 \ Extended sprite = Water bubble
00FE18 /
00FE71 Return
00FE93 Return
00FEA8 \ Find a free fireball slot (08-09)
00FEAA  |
00FEAD  |
00FEAF  |
00FEB0  |
00FEB2  |
00FEB4 / Return if no free slots
00FEB7 / Play sound effect
00FEBF \ Extended sprite = Mario fireball
00FEC1 /
00FF06 Return
00FF31 Return
00FF60 Return
00FF92 Return
018008 \ Set A to lower two bits of
01800B / current sprite's Position Status
01800D Return
01800E \ Set A to bit 2 of
018011 / current sprite's Position Status
018013 Return
018014 \ Set A to bit 3 of
018017 / current sprite's Position Status
018019 Return
018021 Return
018029 Return
018031 Return
018039 Return
018041 Return
018049 Return
01804A \ Set A to -A
01804C /
01804D Return
01804E \ Branch if in air
018051 /
018072 Return
01808B Return
018092 Reset carrying enemy flag
0180CA Return
0180CB \ A = Current sprite is offscreen
0180CE /
0180D1 Return
0180D2 In all sprite routines, X = current sprite
0180D4 $1692 = Current Sprite memory settings
0180D7 \
0180D8  |Add $07:F0B4,$1692 to sprite index.  i.e. minimum one tile allotted to each sprite
0180DC  |the bytes read go straight to the OAM indexes
0180DD  |
0180E1 /
0180E2 Current sprite's OAM index
0180E5 If  (something related to current sprite) is 0
0180E8 do not decrement these counters
0180EA Lock sprites timer
0180EC if sprites locked, do not decrement counters
0180EE \ Decrement a bunch of sprite counter tables
0180F1  |
0180F3  |Do not decrement any individual counter if it's already at zero
0180F6  |
0180F9  |
0180FB  |
0180FE  |
018101  |
018103  |
018106  |
018109  |
01810B  |
01810E  |
018111  |
018113  |
018116  |
018119  |
01811B  |
01811E  |
018121  |
018123  |
018126 / Return
018127 Call a routine based on the sprite's status
01812A Routine for status 0 hardcoded, maybe for performance
01812E Routine for status 8 hardcoded, maybe for preformance
018137 0 - Non-existant (Bypassed above)
018139 1 - Initialization
01813B 2 - Falling off screen (hit by star, shell, etc)
01813D 3 - Smushed
01813F 4 - Spin Jumped
018141 5
018143 6 - End of level turn to coin
018145 7 - Unused
018147 8 - Normal (Bypassed above)
018149 9 - Stationary (Carryable, flipped, stunned)
01814B A - Kicked
01814D B - Carried
01814F C - Power up from carrying a sprite past the goal tape
018151  \ Permanently erase sprite:
018153   | By changing the sprite's index into the level tables
018156  / the actual sprite won't get marked for reloading
01816C Return
018171 Return
018172 \ Sprite status = Normal
018174 /
01817D 00 - Green Koopa, no shell
01817F 01 - Red Koopa, no shell
018181 02 - Blue Koopa, no shell
018183 03 - Yellow Koopa, no shell
018185 04 - Green Koopa
018187 05 - Red Koopa
018189 06 - Blue Koopa
01818B 07 - Yellow Koopa
01818D 08 - Green Koopa, flying left
01818F 09 - Green bouncing Koopa
018191 0A - Red vertical flying Koopa
018193 0B - Red horizontal flying Koopa
018195 0C - Yellow Koopa with wings
018197 0D - Bob-omb
018199 0E - Keyhole
01819B 0F - Goomba
01819D 10 - Bouncing Goomba with wings
01819F 11 - Buzzy Beetle
0181A1 12 - Unused
0181A3 13 - Spiny
0181A5 14 - Spiny falling
0181A7 15 - Fish, horizontal
0181A9 16 - Fish, vertical
0181AB 17 - Fish, created from generator
0181AD 18 - Surface jumping fish
0181AF 19 - Display text from level Message Box #1
0181B1 1A - Classic Piranha Plant
0181B3 1B - Bouncing football in place
0181B5 1C - Bullet Bill
0181B7 1D - Hopping flame
0181B9 1E - Lakitu
0181BB 1F - Magikoopa
0181BD 20 - Magikoopa's magic
0181BF 21 - Moving coin
0181C1 22 - Green vertical net Koopa
0181C3 23 - Red vertical net Koopa
0181C5 24 - Green horizontal net Koopa
0181C7 25 - Red horizontal net Koopa
0181C9 26 - Thwomp
0181CB 27 - Thwimp
0181CD 28 - Big Boo
0181CF 29 - Koopa Kid
0181D1 2A - Upside down Piranha Plant
0181D3 2B - Sumo Brother's fire lightning
0181D5 2C - Yoshi egg
0181D7 2D - Baby green Yoshi
0181D9 2E - Spike Top
0181DB 2F - Portable spring board
0181DD 30 - Dry Bones, throws bones
0181DF 31 - Bony Beetle
0181E1 32 - Dry Bones, stay on ledge
0181E3 33 - Fireball
0181E5 34 - Boss fireball
0181E7 35 - Green Yoshi
0181E9 36 - Unused
0181EB 37 - Boo
0181ED 38 - Eerie
0181EF 39 - Eerie, wave motion
0181F1 3A - Urchin, fixed
0181F3 3B - Urchin, wall detect
0181F5 3C - Urchin, wall follow
0181F7 3D - Rip Van Fish
0181F9 3E - POW
0181FB 3F - Para-Goomba
0181FD 40 - Para-Bomb
0181FF 41 - Dolphin, horizontal
018201 42 - Dolphin2, horizontal
018203 43 - Dolphin, vertical
018205 44 - Torpedo Ted
018207 45 - Directional coins
018209 46 - Diggin' Chuck
01820B 47 - Swimming/Jumping fish
01820D 48 - Diggin' Chuck's rock
01820F 49 - Growing/shrinking pipe end
018211 4A - Goal Point Question Sphere
018213 4B - Pipe dwelling Lakitu
018215 4C - Exploding Block
018217 4D - Ground dwelling Monty Mole
018219 4E - Ledge dwelling Monty Mole
01821B 4F - Jumping Piranha Plant
01821D 50 - Jumping Piranha Plant, spit fire
01821F 51 - Ninji
018221 52 - Moving ledge hole in ghost house
018223 53 - Throw block sprite
018225 54 - Climbing net door
018227 55 - Checkerboard platform, horizontal
018229 56 - Flying rock platform, horizontal
01822B 57 - Checkerboard platform, vertical
01822D 58 - Flying rock platform, vertical
01822F 59 - Turn block bridge, horizontal and vertical
018231 5A - Turn block bridge, horizontal
018233 5B - Brown platform floating in water
018235 5C - Checkerboard platform that falls
018237 5D - Orange platform floating in water
018239 5E - Orange platform, goes on forever
01823B 5F - Brown platform on a chain
01823D 60 - Flat green switch palace switch
01823F 61 - Floating skulls
018241 62 - Brown platform, line-guided
018243 63 - Checker/brown platform, line-guided
018245 64 - Rope mechanism, line-guided
018247 65 - Chainsaw, line-guided
018249 66 - Upside down chainsaw, line-guided
01824B 67 - Grinder, line-guided
01824D 68 - Fuzz ball, line-guided
01824F 69 - Unused
018251 6A - Coin game cloud
018253 6B - Spring board, left wall
018255 6C - Spring board, right wall
018257 6D - Invisible solid block
018259 6E - Dino Rhino
01825B 6F - Dino Torch
01825D 70 - Pokey
01825F 71 - Super Koopa, red cape
018261 72 - Super Koopa, yellow cape
018263 73 - Super Koopa, feather
018265 74 - Mushroom
018267 75 - Flower
018269 76 - Star
01826B 77 - Feather
01826D 78 - 1-Up
01826F 79 - Growing Vine
018271 7A - Firework
018273 7B - Goal Point
018275 7C - Princess Peach
018277 7D - Balloon
018279 7E - Flying Red coin
01827B 7F - Flying yellow 1-Up
01827D 80 - Key
01827F 81 - Changing item from translucent block
018281 82 - Bonus game sprite
018283 83 - Left flying question block
018285 84 - Flying question block
018287 85 - Unused (Pretty sure)
018289 86 - Wiggler
01828B 87 - Lakitu's cloud
01828D 88 - Unused (Winged cage sprite)
01828F 89 - Layer 3 smash
018291 8A - Bird from Yoshi's house
018293 8B - Puff of smoke from Yoshi's house
018295 8C - Fireplace smoke/exit from side screen
018297 8D - Ghost house exit sign and door
018299 8E - Invisible "Warp Hole" blocks
01829B 8F - Scale platforms
01829D 90 - Large green gas bubble
01829F 91 - Chargin' Chuck
0182A1 92 - Splittin' Chuck
0182A3 93 - Bouncin' Chuck
0182A5 94 - Whistlin' Chuck
0182A7 95 - Clapin' Chuck
0182A9 96 - Unused (Chargin' Chuck clone)
0182AB 97 - Puntin' Chuck
0182AD 98 - Pitchin' Chuck
0182AF 99 - Volcano Lotus
0182B1 9A - Sumo Brother
0182B3 9B - Hammer Brother
0182B5 9C - Flying blocks for Hammer Brother
0182B7 9D - Bubble with sprite
0182B9 9E - Ball and Chain
0182BB 9F - Banzai Bill
0182BD A0 - Activates Bowser scene
0182BF A1 - Bowser's bowling ball
0182C1 A2 - MechaKoopa
0182C3 A3 - Grey platform on chain
0182C5 A4 - Floating Spike ball
0182C7 A5 - Fuzzball/Sparky, ground-guided
0182C9 A6 - HotHead, ground-guided
0182CB A7 - Iggy's ball
0182CD A8 - Blargg
0182CF A9 - Reznor
0182D1 AA - Fishbone
0182D3 AB - Rex
0182D5 AC - Wooden Spike, moving down and up
0182D7 AD - Wooden Spike, moving up/down first
0182D9 AE - Fishin' Boo
0182DB AF - Boo Block
0182DD B0 - Reflecting stream of Boo Buddies
0182DF B1 - Creating/Eating block
0182E1 B2 - Falling Spike
0182E3 B3 - Bowser statue fireball
0182E5 B4 - Grinder, non-line-guided
0182E7 B5 - Sinking fireball used in boss battles
0182E9 B6 - Reflecting fireball
0182EB B7 - Carrot Top lift, upper right
0182ED B8 - Carrot Top lift, upper left
0182EF B9 - Info Box
0182F1 BA - Timed lift
0182F3 BB - Grey moving castle block
0182F5 BC - Bowser statue
0182F7 BD - Sliding Koopa without a shell
0182F9 BE - Swooper bat
0182FB BF - Mega Mole
0182FD C0 - Grey platform on lava
0182FF C1 - Flying grey turnblocks
018301 C2 - Blurp fish
018303 C3 - Porcu-Puffer fish
018305 C4 - Grey platform that falls
018307 C5 - Big Boo Boss
018309 C6 - Dark room with spot light
01830B C7 - Invisible mushroom
01830D C8 - Light switch block for dark room
018325 Return
018334 Return
01834B Return
01835A Return
01836A Return
018372 Return
01837C Return
018386 Return
018392 / Play sound effect
018395 Return
01839F Return
0183B2 Return
0183D9 Return
0183DA \ Set current sprite's "disable contact with other sprites" timer to x28
0183DC /
0183DF Return
01841A Return
018434 Return
018435 \ Sprite status = Carryable
018437 /
01843A Return
01844D Return
01844E  \ $151C,x = Blue/Silver,
018450   | depending on initial X position
018451   |
018452   |
018453   |
018454   |
018456  /
018459  \ Store appropriate palette to RAM
01845A   |
01845D  /
018460 \ Sprite status = Carryable
018462 /
018465 Return
0184A4 \ Sprite = Lakitu Cloud
0184A6 /
0184A9 \ Sprite status = Normal
0184AB /
0184D5 Return
0184E8 Return
018525 Return
018537 \ Can be jumped on
018539 /
018546 Return
01854A Return
01854B \ If on Yoshi, $C2,x = #$1F
01854D  | (5 segments, 1 bit each)
018550  |
018552  | If not on Yoshi, $C2,x = #$07
018554 /   (3 segments, 1 bit each)
018586 / Play sound effect
01858D Return
0185B0 \ Center sprite between two tiles
0185B2  |
0185B3  |
0185B5 /
0185C3 CallSpriteMain
0185CC 00 - Green Koopa, no shell
0185CE 01 - Red Koopa, no shell
0185D0 02 - Blue Koopa, no shell
0185D2 03 - Yellow Koopa, no shell
0185D4 04 - Green Koopa
0185D6 05 - Red Koopa
0185D8 06 - Blue Koopa
0185DA 07 - Yellow Koopa
0185DC 08 - Green Koopa, flying left
0185DE 09 - Green bouncing Koopa
0185E0 0A - Red vertical flying Koopa
0185E2 0B - Red horizontal flying Koopa
0185E4 0C - Yellow Koopa with wings
0185E6 0D - Bob-omb
0185E8 0E - Keyhole
0185EA 0F - Goomba
0185EC 10 - Bouncing Goomba with wings
0185EE 11 - Buzzy Beetle
0185F0 12 - Unused
0185F2 13 - Spiny
0185F4 14 - Spiny falling
0185F6 15 - Fish, horizontal
0185F8 16 - Fish, vertical
0185FA 17 - Fish, created from generator
0185FC 18 - Surface jumping fish
0185FE 19 - Display text from level Message Box #1
018600 1A - Classic Piranha Plant
018602 1B - Bouncing football in place
018604 1C - Bullet Bill
018606 1D - Hopping flame
018608 1E - Lakitu
01860A 1F - Magikoopa
01860C 20 - Magikoopa's magic
01860E 21 - Moving coin
018610 22 - Green vertical net Koopa
018612 23 - Red vertical net Koopa
018614 24 - Green horizontal net Koopa
018616 25 - Red horizontal net Koopa
018618 26 - Thwomp
01861A 27 - Thwimp
01861C 28 - Big Boo
01861E 29 - Koopa Kid
018620 2A - Upside down Piranha Plant
018622 2B - Sumo Brother's fire lightning
018624 2C - Yoshi egg
018626 2D - Baby green Yoshi
018628 2E - Spike Top
01862A 2F - Portable spring board
01862C 30 - Dry Bones, throws bones
01862E 31 - Bony Beetle
018630 32 - Dry Bones, stay on ledge
018632 33 - Fireball
018634 34 - Boss fireball
018636 35 - Green Yoshi
018638 36 - Unused
01863A 37 - Boo
01863C 38 - Eerie
01863E 39 - Eerie, wave motion
018640 3A - Urchin, fixed
018642 3B - Urchin, wall detect
018644 3C - Urchin, wall follow
018646 3D - Rip Van Fish
018648 3E - POW
01864A 3F - Para-Goomba
01864C 40 - Para-Bomb
01864E 41 - Dolphin, horizontal
018650 42 - Dolphin2, horizontal
018652 43 - Dolphin, vertical
018654 44 - Torpedo Ted
018656 45 - Directional coins
018658 46 - Diggin' Chuck
01865A 47 - Swimming/Jumping fish
01865C 48 - Diggin' Chuck's rock
01865E 49 - Growing/shrinking pipe end
018660 4A - Goal Point Question Sphere
018662 4B - Pipe dwelling Lakitu
018664 4C - Exploding Block
018666 4D - Ground dwelling Monty Mole
018668 4E - Ledge dwelling Monty Mole
01866A 4F - Jumping Piranha Plant
01866C 50 - Jumping Piranha Plant, spit fire
01866E 51 - Ninji
018670 52 - Moving ledge hole in ghost house
018672 53 - Throw block sprite
018674 54 - Climbing net door
018676 55 - Checkerboard platform, horizontal
018678 56 - Flying rock platform, horizontal
01867A 57 - Checkerboard platform, vertical
01867C 58 - Flying rock platform, vertical
01867E 59 - Turn block bridge, horizontal and vertical
018680 5A - Turn block bridge, horizontal
018682 5B - Brown platform floating in water
018684 5C - Checkerboard platform that falls
018686 5D - Orange platform floating in water
018688 5E - Orange platform, goes on forever
01868A 5F - Brown platform on a chain
01868C 60 - Flat green switch palace switch
01868E 61 - Floating skulls
018690 62 - Brown platform, line-guided
018692 63 - Checker/brown platform, line-guided
018694 64 - Rope mechanism, line-guided
018696 65 - Chainsaw, line-guided
018698 66 - Upside down chainsaw, line-guided
01869A 67 - Grinder, line-guided
01869C 68 - Fuzz ball, line-guided
01869E 69 - Unused
0186A0 6A - Coin game cloud
0186A2 6B - Spring board, left wall
0186A4 6C - Spring board, right wall
0186A6 6D - Invisible solid block
0186A8 6E - Dino Rhino
0186AA 6F - Dino Torch
0186AC 70 - Pokey
0186AE 71 - Super Koopa, red cape
0186B0 72 - Super Koopa, yellow cape
0186B2 73 - Super Koopa, feather
0186B4 74 - Mushroom
0186B6 75 - Flower
0186B8 76 - Star
0186BA 77 - Feather
0186BC 78 - 1-Up
0186BE 79 - Growing Vine
0186C0 7A - Firework
0186C2 7B - Goal Point
0186C4 7C - Princess Peach
0186C6 7D - Balloon
0186C8 7E - Flying Red coin
0186CA 7F - Flying yellow 1-Up
0186CC 80 - Key
0186CE 81 - Changing item from translucent block
0186D0 82 - Bonus game sprite
0186D2 83 - Left flying question block
0186D4 84 - Flying question block
0186D6 85 - Unused (Pretty sure)
0186D8 86 - Wiggler
0186DA 87 - Lakitu's cloud
0186DC 88 - Unused (Winged cage sprite)
0186DE 89 - Layer 3 smash
0186E0 8A - Bird from Yoshi's house
0186E2 8B - Puff of smoke from Yoshi's house
0186E4 8C - Fireplace smoke/exit from side screen
0186E6 8D - Ghost house exit sign and door
0186E8 8E - Invisible "Warp Hole" blocks
0186EA 8F - Scale platforms
0186EC 90 - Large green gas bubble
0186EE 91 - Chargin' Chuck
0186F0 92 - Splittin' Chuck
0186F2 93 - Bouncin' Chuck
0186F4 94 - Whistlin' Chuck
0186F6 95 - Clapin' Chuck
0186F8 96 - Unused (Chargin' Chuck clone)
0186FA 97 - Puntin' Chuck
0186FC 98 - Pitchin' Chuck
0186FE 99 - Volcano Lotus
018700 9A - Sumo Brother
018702 9B - Hammer Brother
018704 9C - Flying blocks for Hammer Brother
018706 9D - Bubble with sprite
018708 9E - Ball and Chain
01870A 9F - Banzai Bill
01870C A0 - Activates Bowser scene
01870E A1 - Bowser's bowling ball
018710 A2 - MechaKoopa
018712 A3 - Grey platform on chain
018714 A4 - Floating Spike ball
018716 A5 - Fuzzball/Sparky, ground-guided
018718 A6 - HotHead, ground-guided
01871A A7 - Iggy's ball
01871C A8 - Blargg
01871E A9 - Reznor
018720 AA - Fishbone
018722 AB - Rex
018724 AC - Wooden Spike, moving down and up
018726 AD - Wooden Spike, moving up/down first
018728 AE - Fishin' Boo
01872A AF - Boo Block
01872C B0 - Reflecting stream of Boo Buddies
01872E B1 - Creating/Eating block
018730 B2 - Falling Spike
018732 B3 - Bowser statue fireball
018734 B4 - Grinder, non-line-guided
018736 B5 - Sinking fireball used in boss battles
018738 B6 - Reflecting fireball
01873A B7 - Carrot Top lift, upper right
01873C B8 - Carrot Top lift, upper left
01873E B9 - Info Box
018740 BA - Timed lift
018742 BB - Grey moving castle block
018744 BC - Bowser statue
018746 BD - Sliding Koopa without a shell
018748 BE - Swooper bat
01874A BF - Mega Mole
01874C C0 - Grey platform on lava
01874E C1 - Flying grey turnblocks
018750 C2 - Blurp fish
018752 C3 - Porcu-Puffer fish
018754 C4 - Grey platform that falls
018756 C5 - Big Boo Boss
018758 C6 - Dark room with spot light
01875A C7 - Invisible mushroom
01875C C8 - Light switch block for dark room
018762 Return
018766 \ Branch if sprites locked
018768 /
018785 / Change music
018788 Return
01878D Return
018792 Return
018797 Return
01879C Return
0187A1 Return
0187A6 Return
0187A7 Do nothing at all (Might as well be NOPs)
0187AB Return
0187B0 Return
0187B5 Return
0187BA Return
0187BF Return
0187C4 Return
0187C5 Unused call to main Sumo Brother routine
0187C9 Return
0187CE Return
0187D3 Return
0187D8 Return
0187DD Return
0187E2 Return
0187E7 Return
0187EC Return
0187F1 Return
0187F6 Return
0187FB Return
018800 Return
018805 Return
01880A Return
01880F Return
018814 Return
018819 Return
01881E Return
018823 Return
018828 Return
01882D Return
018832 Return
018837 Return
01883C Return
018847 Return
018852 Return
01885D Return
018868 Return
01886E Return
01886F \ Do nothing at all
018870  | (Might as well be NOPs)
018872  |
018873  |
018874  |
018878 /
018879 Return
018884 Return
01888F Return
018892 Return
018897 Return
018898 \ Process every 4 frames
018899  |
01889B  |
01889D /
01889F \ Loop over sprites:
0188A1  |
0188A4  | If sprite status = kicked, try to jump it
0188A6  |
0188A8  |
0188A9 /
0188AB Return
0188D5 If not close to shell, go back to main loop
0188D7 \ If sprite not on ground, go back to main loop
0188DA /
0188DC \ If sprite not facing shell, don't jump
0188DF  |
0188E2 /
0188E4 \ Finally set jump speed
0188E6 /
0188EB Return
018904 \ If sprites aren't locked,
018906 / branch to $8952
018908 COME BACK HERE ON NOT STATIONARY BRANCH
01890f \ If sprites are locked,
018911 / branch to $891F
018916 \
018919  |Increase sprite's image by x05
01891a  |
01891c /
018925 Sprite X Speed = 0
018927 \ If sprite is on edge (on ground),
01892A  |Sprite Y Speed = 0
01892c /
018931 \
018933  |If sprite isn't Blue shelless Koopa,
018935 / branch to $893C
018951 Return
018952 CODE RUNA T START?
018955 SKIP IF $163E IS ZERO FOR SPRITE.  IS KICKING SHELL TIMER / GENREAL TIME
01895e \
018960  |If sprite is Blue shelless Koopa,
018962  |Set Y speed to xE0
018964  |
018966 /
018968 ZERO KICKING SHELL TIMER
01896F IT KICKS THIS? !@#
018975 IF NOT STATIONARY, BRANCH
018979 KOOPA BLUE KICK SHELL!
018998 \ Sprite status = Kicked
01899A /
0189BE Sprite X Speed = 0
0189EE  \ Branch if Blue shelless
0189F0   |
0189F2  /
0189F6 Y = Index into sprite OAM
0189FC Return
0189FD KOOPA CODE
018A68 Return
018A73 \ Sprite status = Carryable
018A75 /
018AA2 SHELL TO INTERACT WITH???
018AB1  \ Return if Coin sprite
018AB4   |
018AB6  /
018AD6 SPRITE NUMBER TO DEAL WITH ?
018AD9 Return
018ADA \ Change Bob-omb into explosion
018ADB  |
018ADD  |
018ADE  |
018ADF  |
018AE3  |
018AE4 /
018AE5 \ Branch if exploding
018AE8 /
018AEA \ Branch if not set to explode
018AED /
018AEF \ Sprite status = Stunned
018AF1 /
018AF4 \ Time until explosion = #$40
018AF6 /
018AF9 Draw sprite
018AFC \ If sprites locked...
018AFE  |
018B00  | ...interact with Mario
018B03  | ...interact with sprites
018B06  | ...draw sprite
018B09 / Return
018B0A \ If sprite on ground...
018B0D  |
018B0F  |
018B11  | Set sprite X speed
018B14  |
018B15  |
018B18  |
018B1A  | Increase index if sprite set to go fast
018B1B  |
018B1C  |
018B1F  | what does $15B8,x do?
018B22  |
018B23  |
018B26  |
018B28  |
018B29  |
018B2C /
018B2E \ If touching an object in the direction
018B31  | that Mario is moving...
018B32  |
018B33  |
018B36  |
018B38  |
018B3A / ...Sprite X Speed = 0
018B3C \ If touching ceiling...
018B3F  |
018B41 / ...Sprite Y Speed = 0
018B46 Apply speed to position
018B49 Set the animation frame
018B4C \ Branch if not on ground
018B4F /
018B57 \
018B59  | If follow Mario is set...
018B5C  |
018B5D  |
018B5F  |
018B61  | ...and time until turn == 0...
018B64  |
018B66  |
018B68  |
018B6B  |
018B6C  | ...face Mario
018B6F  | If was facing the other direction...
018B70  |
018B73  |
018B75  | ...set turning timer
018B77 /
018B7A \ If jump over shells is set call routine
018B7B  |
018B7D  |
018B7F  |
018B82 /
018B86 \ If flutter wings is set...
018B89  |
018B8B  | ...set frame...
018B8E  | ...and don't zero out $1570,x
018B90 /
018B93 \ If stay on ledges is set...
018B96  |
018B98  |
018B9A  | todo: what are all these?
018B9D  |
018BA0  |
018BA3  |
018BA6  |
018BA8  | ...change sprite direction
018BAB  |
018BAD /
018BBA Interact with Mario
018BBD Interact with other sprites
018BC0 Change direction if touching an object
018BC3 \ Store sprite direction
018BC6 /
018BC7 \ If turning timer is set...
018BCA  |
018BCC  | ...set turning image
018BCE  |
018BD1  |
018BD3  | If turning timer >= 5...
018BD5  |
018BD7  | ...flip sprite direction (temporarily)
018BD8  |
018BDB /
018BDE \ Branch if sprite is 2 tiles high
018BE0  |
018BE3  |
018BE5 /
018BE7 \ Draw 1 tile high sprite and return
018BEA /
018BEC \ Nothing?
018BEF /
018BF0 \ Y position -= #$0F (temporarily)
018BF2  |
018BF3  |
018BF5  |
018BF7  |
018BFA  |
018BFB  |
018BFD /
018C00 Draw sprite
018C03 \ Restore Y position
018C04  |
018C07  |
018C08 /
018C0A \ Add wings if sprite number > #$08
018C0C  |
018C0E  |
018C10 /
018C13 \ Restore sprite direction
018C14 /
018C17 Return
018C18 \ Branch if sprites locked
018C1A /
018C30  \ Sprite = Spiny
018C32  /
018C34  Reset sprite tables
018C4C Return
018C4D \ Branch if sprites locked
018C4F /
018C68  \ If touching object,
018C6B   |
018C6D   |
018C6F  / Sprite X Speed = 0
018C71  \ If flying left Green Koopa...
018C73   |
018C75   |
018C77   | Update X position
018C7A   |
018C7C   | Y speed = #$FC or #$04,
018C7F   | depending on 1570,x
018C81   |
018C83   |
018C85   |
018C87  / Update Y position
018C99 Sprite Y Speed = 0
018CC6 \ Branch if sprites locked
018CC8 /
018CD7 \ Set turning timer
018CD9 /
018D2D Return
018D38 Return
018D67 Sprite Y Speed = 0
018DAB Return
018DC6 Return
018E01 Y = Index into sprite OAM
018E5E Return
018E62 \ Change animation image every 8 cycles
018E65  |
018E66  |
018E67  |
018E68  |
018E6A /
018E6D Return
018E76 \ Don't draw the sprite if in pipe and Mario naerby
018E79 /
018E7B \ Set sprite to go behind objects
018E7D  | for the graphics routine
018E7E  |
018E81  |
018E83  |
018E85 /
018E87 Draw the sprite
018E8A \ Modify the palette and page of the stem
018E8D  |
018E90  |
018E92  |
018E94 /
018E97 \ Restore value of $64
018E98 /
018E9D \ Branch if sprites locked
018E9F /
018EA4 \ Don't don't process interactions if in pipe and Mario nearby
018EA7  |
018EA9 /
018EAC \ Y = Piranha state
018EAE  |
018EB0 /
018EB1 \ Change state if it's time
018EB4 /
018EB6 Load Y speed
018EB9 \ Invert speed if upside-down piranha
018EBB  |
018EBD  |
018EBF  |
018EC1 /
018EC2 Store Y Speed
018EC4 Update position based on speed
018EC7 Return
018EC8 \ $00 = Sprite state (00 - 03)
018ECA  |
018ECC /
018ECE \ If the piranha is in the pipe (State 0)...
018ED0  | ...check if Mario is nearby...
018ED3  |
018ED5  |
018ED6  |
018ED8  |
018EDA  |
018EDC  | ...and set $1594,x if so
018EDF  |
018EE1 /
018EE4 \ Set time in state
018EE6  |
018EE9 /
018EEC Go to next state
018EEE Return
018EEF \ Find a free extended sprite slot
018F06 Return
018F0C Return
018F0D \ Branch if sprites locked
018F0F /
018F26 Sprite X Speed = 0
018F4F Return
018F8C \ Extended sprite = Hopping flame's flame
018F8E /
018F96 Return
018FAC Y = Index into sprite OAM
018FEC \ Branch if sprites locked
018FEE /
018FF2  \ Store gfx properties into palette byte
018FF5  /
018FFE  \ Set X speed
019001  /
019003  \ Set Y speed
019006  /
019008  \ Update position
01900B  /
019011  Interact with Mario and sprites
019084 Return
019088 Return
019089 \ If touching an object in the direction
01908C  | that the sprite is moving...
01908D  |
019090  |
019092  |
019094  | ...flip direction
019097 /
019098 \ Return if turning timer is set
01909B /
01909D \ Set turning timer
01909F /
0190A2 \ Invert speed
0190A4  |
0190A6  |
0190A7 /
0190A9 \ Flip sprite direction
0190AC  |
0190AE /
0190B1 Return
0190B9 Return
01913F Return
019143 Set sprite's position status to 0 (in air)
019158 Vertical level flag
01915F \ Sprite's X position += $26
019161  | for call to below routine
019162  |
019164  |
019166  |
019169  |
01916B /
01916E \ Sprite's Y position += $28
019170  | for call to below routine
019171  |
019173  |
019175  |
019178  |
01917A /
019180 \ Restore sprite's original position
019182  |
019183  |
019185  |
019187  |
01918A  |
01918C  |
01918F  |
019191  |
019192  |
019194  |
019196  |
019199  |
01919B /
0191A9 \ A = -$17BF
0191AC  |
0191AE  |
0191BE \ Branch if "Don't get stuck in walls" is not set
0191C1 /
0191C3 \ Branch if not touching object
0191C6  |
0191C8 /
0191F6 \ TODO: Unknown Bit A...
0191F9  | ... may be related to cape
01920B Return
019210 Return
019245 \ Branch if Yoshi
019247  |
019249 /
01924B \ Branch if "Process interaction every frame"
01924E  | is set
019250 /
01926A \ TODO: Return if Unknown Bit B is set
01926D /
019272 \ Branch if "Don't get stuck in walls" is not set
019275 /
019277 \ Branch if sprite has X speed...
019279  | ...or sprite is turning
01927C /
019283 Return
0192C0 Return
01930F Return
019310  Bug: Sprites can walk on sloping lava.  See lavafix.asm
019323  \ Branch if sprite == Yoshi
019325   |
019327  /
019329 \ Branch if "Process interaction every frame"
01932C  | is set
01932E /
019330  \ Sprite status = #$05 ???
019332 /
01933A Return
01938E  \ Return if sprite status == Killed
019391   |
019393  /
019395  \ Return if sprite status == #$05
019397  /
019399  \ Return if sprite status == Carried
01939B  /
0193AF Return
0193BF  \ Return if sprite status == Killed
0193C2   |
0193C4  /
0193C6  \ Return if sprite status == #$05
0193C8  /
0193CA  \ Return if sprite status == Carried
0193CC  /
019424 Return
019440 Return
019441 Can be 00-03
019443 \ Y = $1656,x (Upper 4 bits) + $0F (Lower 2 bits)
019446  |
019448  |
019449  |
01944A  |
01944C /
0194B3 Return
0194BE Return
019527 X = Sprite index
01953B Return
01953C \ Branch if not Yoshi shell
01953E /
019546 \ Temporarily set $64 = #$10...
019548  |
019549  |
01954B  |
01954D  | ...and call gfx routine
019550  |
019551 /
019553 Return
019554 \ If Spring Board...
019556  | ...Unused Sprite 85...
019558  | ...or Balloon,
01955A  | Set Status = Normal...
01955C  |  ...and jump to $01A187
01955E  |
019560  | Balloon Y Speed = 0
019562  |
019564  |
019567 /
01956A \ If sprites locked,
01956C  | jump to $0195F5
01956E /
019581 \ If Vertical or Horizontal Fish,
019583  |
019585  | jump to $019562
019587  |
019589 /
01958C \ Branch if not Yoshi Egg
01958E /
019590 \ Set upward speed
019592 /
01959D \ Set downward speed
01959F /
0195A6 \ $9A = Sprite X position + #$08
0195A8  |
0195A9  |
0195AB  |
0195AD  |
0195B0  |
0195B2 /
0195B4 \ $9A = Sprite X position
0195B6  | (Rounded down to nearest #$10)
0195B8  |
0195BA  |
0195BD /
0195E0 \ Call $0195E9 if sprite number < #$0D
0195E2  | (Koopa Troopas)
0195E4  |
0195E6 /
0195FB Return
019624 \ Branch away if sprite isn't a Bob-omb
019626  |
019628 /
01962A \ Branch away if it's not time to explode
01962D  |
01962F /
019631 \ Bomb sound effect
019633 /
01963B \ Set explosion timer
01963D /
019640 \ Set normal status
019642 /
019645 \ Set to interact with other sprites
019648  |
01964A /
01964D Return
01965B Return
01968E \ Disable fireball/cape killing
019691  |
019693 /
019696 \ Sprite status = Kicked
019698 /
01969B Return
01969C \ Return if stun timer == 0
01969F /
0196A1 \ If stun timer == 3, un-stun the sprite
0196A3 /
0196A5 \ Every other frame, increment the stall timer
0196A7 /  to emulates a slower timer
0196A9 \ Branch if Buzzy Beetle
0196AB  |
0196AD /
0196AF \ Branch if Spike Top
0196B1 /
0196B3 \ Return if Baby Yoshi
0196B5 /
0196B7 \ Branch if MechaKoopa
0196B9 /
0196BB \ Branch if Goomba
0196BD /
0196BF \ Branch if Yoshi Egg
0196C1 /
0196C3 \ Branch if not Throw Block
0196C5 /
0196C7 Set throw block to vanish
0196CA Return
0196CB \ Sprite Status = Normal
0196CD /
0196D0 \ Clear vertical flip bit
0196D3 /
0196D6 Return
0196D7 \ Increment timer every other frame
0196D9  |
0196DB  |
0196DD  |
0196E0 /
0196E1 \ Return if no free sprite slot found
0196E5 /
0196E7 \ Sprite status = Normal
0196E9 /
0196EC \ Store sprite number for shelless koopa
0196EE  |
0196EF  |
0196F2 /
0196F5 \ Reset sprite tables
0196F6  |
0196FA /
0196FD \ Shelless Koopa position = Koopa position
0196FF  |
019702  |
019705  |
019708  |
01970A  |
01970D  |
019710 /
019713 \ Direction = 0
019715 /
01972D \ Set upward speed
01972F /
019732 \ Make Shelless Koopa face away from Mario
019733  |
019736  |
019737  |
019739  |
01973A /
01973D \ Set Shelless X speed
01973E  |
01973F  |
019742  |
019745 /
019746 Return
019765 \ If Yellow Koopa...
019767  |
019769  |
01976B  | ...find free sprite slot...
01976D  |
019770  | ...and spawn moving coin
019772  |
019773 /
019775 Return
019776 \ Sprite status = normal
019778 /
01977B \ Sprite = Moving Coin
01977D /
019780 \ Copy X position to coin
019782  |
019785  |
019788 /
01978B \ Copy Y position to coin
01978D  |
019790  |
019793 /
019796 \
019797  |
019798  | Clear all sprite tables, and load new values
01979C /
01979D \ Set Y speed
01979F /
0197A2 \ Set direction
0197A4 /
0197AC Return
0197F0  \ If Goomba, Y += #$13
0197F2   |
0197F4   |
0197F6   |
0197F7   |
0197F8   |
0197FA  /
019805 Return
019808 Y = Index into sprite OAM
019831 Y = Index into sprite OAM
01984D \ Branch away if a Buzzy Beetle
01984F  |
019851 /
0198A6 Return
0198FB Sprite Y Speed = 0
019963 \ Set upward speed
019965 /
019971 \ Set downward speed
019973 /
019992 \ Branch if throw block sprite
019994  |
019996 /
0199A0 / Play sound effect
0199D2 \ If Throw Block, break it
0199D4  |
0199D6  |
0199D8 /
0199DB Return
0199DC Free up sprite slot
0199DF Is this for the shatter routine??
0199E1 \ Return if off screen
0199E4 /
0199E6 \ Store Y position in $9A-$9B
0199E8  |
0199EA  |
0199ED /
0199EF \ Store X position in $98-$99
0199F1  |
0199F3  |
0199F6 /
0199F8 \ Shatter the brick
0199F9  |
0199FB  |
0199FC  |
0199FD  |
0199FE  |
019A02 /
019A03 Return
019A09  \ Sprite Y speed = #$00 or #$18
019A0B   | Depending on 15B8,x ???
019A0E   |
019A10   |
019A12  /
019A14 Return
019A15 \ Subroutine: Set direction from speed value
019A17  |
019A19  |
019A1B  |
019A1D  |
019A1E  |
019A21 /
019A44 Y = Index into sprite OAM
019A4D Return
019A52  \ Erase sprite if time up
019A55  /
019A57  Call generic gfx routine
019A5A Y = Index into sprite OAM
019A5D  \ Load tile based on timer
019A60   |
019A61   |
019A62   |
019A63   |
019A65   |
019A66   |
019A67   |
019A6A   /
019A6B  Overwrite tile
019A6E  \ Overwrite properties
019A71   |
019A73  /
019A76 Return
019A77  Permanently kill the sprite
019A7A Return
019A9B Sprite X Speed = 0
019AA2 \ If Wiggler, call main sprite routine
019AA4  |
019AA6  |
019AA8 /
019AAB \ If Lakitu, $18E0 = #$FF
019AAD  |
019AAF  |
019AB1 /
019AB4 \ If Throw Block sprite...
019AB6  |
019AB8  | ...break block...
019ABB / ...and return
019ABC \ If Exploding Block Enemy
019ABE  |
019AC0 /
019AC4 \ If "disappears in puff of smoke" is set...
019AC7  |
019AC9  |
019ACB  | ...Sprite status = Spin Jump Killed...
019ACD  |
019AD0  | ...Set Time to show smoke cloud...
019AD2  |
019AD5 / ... and return
019AD6 \ Branch if sprites locked
019AD8 /
019AE3 Return
019AE4 \ Branch if sprites locked
019AE6 /
019AE8 \ Free sprite slot when timer runs out
019AEB  |
019AED /
019AF0 Return
019AFC Sprite X Speed = 0
019AFE \ If Dino Torch...
019B00  |
019B02  |
019B04  | ...call standard gfx routine...
019B07  |
019B0A  | ...and replace the tile with #$AC
019B0C  |
019B0F / Return
019B10 Call smushed gfx routine
019B13 \ If the main routine handles the death state...
019B16  |
019B18  |
019B1A / ...jump to the main routine
019B20 \ Branch if "Death frame 2 tiles high"
019B23  | is NOT set
019B25 /
019B27 \ Branch if "Use shell as death frame"
019B2A  | is set
019B2C /
019B2E \ Branch if Lakitu
019B30  |
019B32 /
019B34  \ If Pipe Lakitu,
019B36   |
019B38   | set behind scenery flag
019B3A  /
019B44  \ Set to flip tiles vertically
019B47   |
019B49  /
019B4C  \ If sprite is behind scenery,
019B4E   |
019B4F   |
019B52   |
019B54   | temorarily set layer priority for gfx routine
019B56   |
019B58   | Draw sprite
019B5B   |
019B5C  /
019B5E Return
019B6E  \ If sprite is behind scenery,
019B70   |
019B71   |
019B74   |
019B76   | temorarily set layer priority for gfx routine
019B78   |
019B7C   | Draw sprite
019B7F   |
019B80  /
019B82 Return
019D17 Y = Index into sprite OAM
019D5E Return
019D66 Return
019D6F Return
019D9B X = Sprite index
019DD8 Return
019DFF X = Sprite index
019E28 \ If not on ground, $02 = animation frame (00 or 01)
019E2A  | else, $02 = 0
019E2D  |
019E2F  |
019E32  |
019E34  |
019E35 /
019E37 \ Return if offscreen vertically
019E3A /
019E3C \ $00 = X position low
019E3E /
019E40 \ $04 = X position high
019E43 /
019E45 \ $01 = Y position low
019E47 /
019E49 Y = index to OAM
019E4D \ X = index into tables
019E50  |
019E51  |
019E53 /
019E54 \ Store X position (relative to screen)
019E56  |
019E57  |
019E5A  |
019E5C  |
019E5E  |
019E61  |
019E62  |
019E64  |
019E65  |
019E67 /
019E6A \ Return if off screen horizontally
019E6B  |
019E6D /
019E6F \ Store Y position (relative to screen)
019E71  |
019E72  |
019E74  |
019E75  |
019E78 /
019E7B \ Store tile
019E7E /
019E81 \ Store tile properties
019E83  |
019E86 /
019E8D \ Store tile size
019E90 /
019E94 Return
019F08 Return
019F20 Y = Index into sprite OAM
019F2A X = Sprite index
019F5A Return
019F79  \ Branch if Yoshi going down pipe
019F7C  /
019F7E  \ Branch if Mario facing camera
019F81  /
019F98 Return
019F9B \ Branch if not Balloon
019F9D  |
019F9F /
019FBE \ Branch if no Mario animation sequence in progress
019FC0  |
019FC2 /
019FD7 Y = Index into sprite OAM
019FDF Return
019FE3 \ Branch if no Mario animation sequence in progress
019FE5  |
019FE7 /
019FE9 \ Branch if in pipe
019FEC /
019FEE \ Sprite status = Stunned
019FF0 /
019FF3 Return
019FF4 \ Return if sprite status == Normal
019FF7  |
019FF9 /
019FFB \ Jump if sprites locked
019FFD  |
019FFF /
01A014 Return
01A01A \ Branch if not Goomba
01A01C  |
01A01E /
01A028 \ Sprite status = Carryable
01A02A /
01A033 \ Branch if sprite >= #$15
01A035  |
01A037 /
01A064 Sprite Y Speed = 0
01A082 \ Sprite status = Kicked
01A084 /
01A0B0 Return
01A0B3 \ Y = Mario's direction
01A0B5  |
01A0B7 /
01A0E2 \ $00 = Mario's X position
01A0E5  |
01A0E7  |
01A0EA /
01A0EC \ $02 = Mario's Y position
01A0EF  |
01A0F1  |
01A0F4 /
01A109 \ Branch if ducking
01A10B /
01A10D \ Branch if Mario isn't small
01A10F /
01A12B Set carrying enemy flag
01A12E Return
01A169  \ If sprite status == Carried,
01A16C   |
01A16E   |
01A170   | Sprite direction = Opposite direction of Mario
01A172   |
01A174  /
01A177 Return
01A186 Return
01A187 \ Branch if sprite changes into a shell
01A18A  |
01A18C /
01A1C4 \ Handle unused sprite 85
01A1C7  |
01A1CA  | Set OAM with tile #$47
01A1CC /
01A1CF Return
01A1D3 Return
01A1EB Return
01A20C Y = Index into sprite OAM
01A217 Return
01A222 Y = Index into sprite OAM
01A228 Return
01A22C \ Branch if sprites locked
01A22E /
01A25D  \ Branch if sprite status != Stunned
01A260   |
01A262  /
01A28B  \ Clear sprite status
01A28D  /
01A292 / Play sound effect
01A29A \ Branch if not Changing power up
01A29D  |
01A29F /
01A2B8 No Yoshi wings
01A2BB \ Sprite = Yoshi
01A2BD /
01A2C0 \ Sprite status = Normal
01A2C2 /
01A2C7 / Play sound effect
01A2DB \ Reset sprite tables
01A2DC  |
01A2E0 /
01A2F3 Return
01A359 Return
01A397  \ Branch if sprite status == Stunned
01A39A   |
01A39C  /
01A39E \ Branch if "Death frame 2 tiles high"
01A3A1  | is NOT set
01A3A3 /
01A3CD Y = Index into sprite OAM
01A3DE Return
01A40A Return
01A411 \ Return every other frame
01A413  |
01A414 /
01A417 \ Jump to $01A4B0 if
01A41A  | sprite status < 8
01A41C  |
01A41E /
01A47B  Y = Sprite index
01A4B6 X = Sprite index
01A4B9 Return
01A4BA  \ Branch if sprite 2 status == Normal
01A4BD   |
01A4BF  /
01A4C1  \ Branch if sprite 2 status == Carryable
01A4C3  /
01A4C5  \ Branch if sprite 2 status == Kicked
01A4C7  /
01A4C9  \ Branch if sprite 2 status == Carried
01A4CB  /
01A4CD Return
01A4CE  \ Branch if sprite status == Normal
01A4D1   |
01A4D3  /
01A4D5  \ Branch if sprite status == Carryable
01A4D7  /
01A4D9  \ Branch if sprite status == Kicked
01A4DB  /
01A4DD  \ Branch if sprite status == Carried
01A4DF  /
01A4E1 Return
01A4E2 \ Branch if on ground
01A4E5  |
01A4E7 /
01A4E9 \ Branch if Goomba
01A4EC  |
01A4EE /
01A4F2  \ Branch if sprite status == Normal
01A4F5   |
01A4F7  /
01A4F9  \ Branch if sprite status == Carryable
01A4FB  /
01A4FD  \ Branch if sprite status == Kicked
01A4FF  /
01A501  \ Branch if sprite status == Carried
01A503  /
01A505 Return
01A506  \ Branch if sprite status == Normal
01A509   |
01A50B  /
01A50D  \ Branch if sprite status == Carryable
01A50F  /
01A511  \ Branch if sprite status == Kicked
01A513  /
01A515  \ Branch if sprite status == Carried
01A517  /
01A519 Return
01A51A  \ Branch if sprite status == Normal
01A51D   |
01A51F  /
01A521  \ Branch if sprite status == Carryable
01A523  /
01A525  \ Branch if sprite status == Kicked
01A527  /
01A529  \ Branch if sprite status == Carried
01A52B  /
01A52D Return
01A561 \ Branch if not Goomba
01A563  |
01A565 /
01A585  Y = Sprite index
01A59C \ Set turning timer
01A59E /
01A5BE \ Set turning timer
01A5C0 /
01A5C3 Return
01A5D1 Sprite Y Speed = 0
01A5D9 Return
01A5DA X = Sprite index
01A5E3 \ Sprite status = Killed
01A5E5 /
01A60E / Play sound effect
01A61D Return
01A63C Return
01A65C / Play sound effect
01A66B \ Sprite status = Killed
01A66D /
01A684 Return
01A685 \ Branch if Flying Question Block
01A687  |
01A689  |
01A68B  |
01A68D /
01A68F \ Sprite status = Killed
01A691 /
01A69D \ Branch if Flying Question Block or Key
01A6A0  |
01A6A2  |
01A6A4  |
01A6A6  |
01A6A8  |
01A6AA /
01A6AC \ Sprite status = Killed
01A6AE /
01A6D6 Return
01A6E0 \ Branch if not on ground
01A6E3  |
01A6E5 /
01A6E7 \ Return if doesn't kick/hop into shells
01A6EA  |
01A6EC /
01A710 \ Branch if not Blue Shelless
01A712  |
01A714 /
01A727 Return
01A728 \ Play sound effect
01A72A /
01A72D Return
01A72E \ Return if timer is set
01A731 /
01A733 \ Return if sprite >= #$0F
01A736  |
01A738 /
01A73A \ Return if not on ground
01A73D  |
01A73F /
01A741 \ Branch if $15F6,y positive...
01A744 /
01A746 \ ...otherwise make it positive
01A748 /
01A74B \ Set upward speed
01A74D /
01A750 \ $1564,y = #$20
01A752 /
01A755 \ C2,x and 1558,x = #$20
01A757  | (These are for the shell sprite)
01A759 /
01A75C Return
01A75D \ Set upward speed
01A75F /
01A777 Return
01A7C5  Y = Sprite index
01A7C8 Return
01A7E3 Return
01A7E4 \ Branch if "Process interaction every frame" is set
01A7E7  |
01A7E9 /
01A7EB \ Otherwise, return every other frame
01A7EC  |
01A7EE  |
01A7F0  |
01A7F3  |
01A7F5  |
01A7F6 /
01A801 No contact, return
01A80D No contact, return
01A80F \ If animation sequence activated...
01A811  |
01A813 / ...no contact, return
01A815 \ Branch if bit 6 of $0D9B set?
01A817  |
01A81A /
01A81C \ If Mario and Sprite not on same side of scenery...
01A81F  |
01A822 / ...no contact, return
01A830 No contact, return
01A832 \ Branch if sprite uses default Mario interaction
01A835 /
01A837 Contact, return
01A838 Return
01A83B \ Branch if Mario doesn't have star
01A83E /
01A840 \ Branch if "Process interaction every frame" is set
01A843  |
01A845 /
01A868 / Play sound effect
01A86B \ Sprite status = Killed
01A86D /
01A87D Return
01A896 Return
01A8B4 \ TODO: Branch if Unknown Bit 11 is set
01A8B7  |
01A8B9 /
01A8C9 \ Branch if can be jumped on
01A8CC  |
01A8CE /
01A8DA / Play sound effect
01A8E5 Return
01A8EB \ Branch if "Takes 5 fireballs to kill"...
01A8EE  | ...is set
01A8F0 /
01A8F8 Return
01A8F9 \ Return if Mario is invincible
01A8FC /
01A91B Return
01A941 / Play sound effect
01A95C Return
01A986 DINO TORCH SPRITE NUM
01A9B2 Sprite Y Speed = 0
01A9BD Return
01A9CC \ Branch if doesn't die when jumped on
01A9CF  |
01A9D1 /
01A9D3 \ Sprite status = Smushed
01A9D5 /
01A9DD \ Sprite Speed = 0
01A9DF /
01A9E1 Return
01A9E2 \ Branch if Tweaker bit...
01A9E5  | ..."Falls straight down when killed"...
01A9E7 / ...is NOT set.
01A9E9 \ Sprite status = Falling off screen
01A9EB /
01A9EE \ Sprite Speed = 0
01A9F0 /
01A9F2 \ Return if NOT Lakitu
01A9F4  |
01A9F6 /
01AA00 Return
01AA14 \
01AA16  |
01AA18  | Set stunnned timer with:
01AA1A  |
01AA1C  | #$FF for Goomba, Buzzy Beetle, Mechakoopa, or Bob-omb...
01AA1E  | #$02 for others
01AA20  |
01AA22  |
01AA24  |
01AA26  |
01AA28  |
01AA2A /
01AA2D \ Status = stunned
01AA2F /
01AA32 Return
01AA33 \ Return if climbing
01AA35 /
01AA41 Return
01AA4E \ Branch if can't be jumped on
01AA51  |
01AA53 /
01AA5E \ Branch if carrying an enemy...
01AA61  | ...or on Yoshi
01AA64 /
01AA66 \ Sprite status = Being carried
01AA68 /
01AA6B Set carrying enemy flag
01AA73 Return
01AA74 \ Branch if Key
01AA76  |
01AA78 /
01AA7A \ Branch if P Switch
01AA7C /
01AA7E \ Branch if Bobomb
01AA80 /
01AA82 \ Branch if Baby Yoshi
01AA84 /
01AA86 \ Branch if MechaKoopa
01AA88 /
01AA8A \ Branch if not Goomba
01AA8C /
01AA9F \ Sprite status = Kicked
01AAA1 /
01AAB1 Return
01AACC Return
01AAFF / Play sound effect
01AB09 / Change music
01AB1F  \ Set ground shake timer
01AB21  /
01AB2C Return
01AB45 Return
01AB5A / Play sound effect
01AB69 Return
01AB98 Return
01ABCB Return
01ABD4 X = Sprite index
01ABD7 Return
01ABD8 Load current sprite's Y speed
01ABDA If speed is 0, branch to $AC09
01ABDC \
01ABDD  |Multiply speed by 16
01ABDE  |
01ABDF /
01ABE0 \
01ABE1  |Increase (unknown sprite table) by that value
01ABE4 /
01ABEB Load current sprite's Y speed
01ABED \
01ABEE  |Multiply speed by 16
01ABEF  |
01ABF0 /
01ABFA \ Add value to current sprite's Y position
01ABFC /
01AC0C Return
01AC21 \ Entry point of routine determines value of $03
01AC23  |
01AC25  |
01AC27  |
01AC29  |
01AC2B  |
01AC2D  |
01AC2F  |
01AC31 /
01AC33 \ if sprite is not off screen, return
01AC36 /
01AC38 \  vertical level
01AC3A  |
01AC3C /
01AC3E \
01AC40  |
01AC41  | if the sprite has gone off the bottom of the level...
01AC43  | (if adding 0x50 to the sprite y position would make the high byte >= 2)
01AC46  |
01AC48  |
01AC4A /    ...erase the sprite
01AC4C \ if "process offscreen" flag is set, return
01AC4F  |
01AC51 /
01AC80  \ If MagiKoopa...
01AC82   |
01AC84   | Sprite to respawn = MagiKoopa
01AC86   |
01AC89   | Set timer until respawn
01AC8B  /
01AC8E \ If sprite status < 8, permanently erase sprite
01AC91  |
01AC93 /
01AC95  \ Branch if should permanently erase sprite
01AC98   |
01AC9A  /
01AC9C  \ Allow sprite to be reloaded by level loading routine
01AC9E  /
01ACA1 Erase sprite
01ACA5 \ If "process offscreen" flag is set, return
01ACA8  |
01ACAA /
01ACAC \ Return every other frame
01ACAE  |
01ACAF /
01ACB1 \
01ACB3  | If the sprite has gone off the side of the level...
01ACB5  |
01ACB8  |
01ACBA  |
01ACBC /  ...erase the sprite
01ACC8  \ Return if Green Net Koopa
01ACCA   |
01ACCC   |
01ACCE   |
01ACD0  /
01AD06 Return
01AD2F Return
01AD41 Return
01AD53 Return
01AD67 Return
01AD83 Y = Index into sprite OAM
01AD97 \ Branch if sprites locked
01AD99 /
01AE28  \ Set to permanently erase sprite
01AE2A  /
01AE65 Y = Index into sprite OAM
01AE7E Return
01AE95 Return
01AEAD \ Branch if sprites locked
01AEAF /
01AEF9 Return
01AF12  \ Set ground shake timer
01AF14  /
01AF19 / Play sound effect
01AF23 Return
01AF37 Return
01AF3F Return
01AFA6 \ Branch if sprites locked
01AFA8 /
01AFCC  \ If touching ceiling,
01AFCF   |
01AFD1   | Y speed = #$10
01AFD3  /
01AFDD \ Sprite Speed = 0
01AFDF /
01AFFE / Play sound effect
01B01C Return
01B0F7 \ Branch if Mario has star
01B0FA /
01B129 Return
01B131 / Play sound effect
01B140 \ Sprite status = Killed
01B142 /
01B14D Return
01B191 Return
01B195 \ Branch if sprites locked
01B197 /
01B1B0 Return
01B1B4 \ Branch if sprites locked
01B1B6 /
01B235 Return
01B261 Return
01B262 \ Sprite status = Initialization
01B264 /
01B26F \ Branch if sprites locked
01B271 /
01B2C2 Return
01B2FF X = Sprite index
01B326 X = Sprite index
01B3DD X = Sprite index
01B41E X = Sprite index
01B421 Y = Index into sprite OAM
01B456 Return
01B4B1 Return
01B4B3 Return
01B4B4 \ Branch if "Make Platform Passable" is set
01B4B7  |
01B4B8 /
01B4F4 / Play sound effect
01B4F8 Return
01B535 Return
01B53D \ Branch if sprites locked
01B53F /
01B558 Return
01B6B1 Return
01B6D0 Return
01B6D9 Return
01B6E6 Return
01B702 Return
01B70F Return
01B72A Y = Index into sprite OAM
01B7B2 Return
01B7B3 Wrapper
01B7BA Return
01B7BF Y = Index into sprite OAM
01B840 X = Sprite index
01B843 Return
01B850 Return
01B8B1 Return
01B8D4 Return
01B8FE Return
01B93B Return
01B968 Return
01B9FA Return
01B9FB \ Branch if sprites locked
01B9FD /
01BA37 \ Branch if sprites locked
01BA39 /
01BA7E Return
01BA86 Return
01BA94 Return
01BACC Return
01BAD7 \ Play sound effect
01BAD9 /
01BBF5 X = Sprite index
01BC1C Return
01BC1D \ $00 = Mario X Low
01BC1F /
01BC21 \ $01 = Mario Y Low
01BC23 /
01BC25 \ $02 = $03 = #$10
01BC27  |
01BC29 /
01BC2B \ $08 = Mario X High
01BC2D /
01BC2F \ $09 = Mario Y High
01BC31 /
01BC33 Return
01BC5F \ Play sound effect
01BC61 /
01BC92 \ Sprite status = Normal
01BC94 /
01BC9B \ Sprite X position = block X position
01BC9D  |
01BCA0  |
01BCA2  |
01BCA4  |
01BCA6 /
01BCA8 \ Sprite Y position = block Y position
01BCAB  |
01BCAD  |
01BCAF /
01BCB1 \ Block to generate = #$02
01BCB3 /
01BCBC Return
01BCDF Return
01BD71 X = Sprite index
01BD91 \ 3 8x8 tiles
01BD93  |
01BDA2 Return
01BDB7 Return
01BDCE Return
01BDD5 Return
01BDFA Return
01BDFB \ Branch if sprites locked
01BDFD /
01BE3C Sprite Y Speed = 0
01BE5E Return
01BE68 Return
01BE92 JUMP TO GENERATE MAGIC
01BEC3 X = Sprite index
01BEE1 Y = Index into sprite OAM
01BF15 Return
01BF1C Return
01BF27 Return
01BF28 \ Play sound effect
01BF2A /
01BF2D \ Sprite status = Normal
01BF2F /
01BF32 GENERATES MAGIC HERE!   !@#
01BF5C X = Sprite index
01BF5F PULLS SPEED FROM RAM HERE?
01BF69 Return
01BF6A FILLS OUT RAM TO USE FOR SPEED?
01BFE2 Return
01C000 Return
01C027 Return
01C05E X = Sprite index
01C061 Return
01C062 \ Unreachable
01C065   | Call Goal Tape INIT, then
01C067   | Sprite Y position -= #$4C
01C068  |
01C06A  |
01C06C  |
01C06F  |
01C071  |
01C074 /
01C089  \ Save extra bits into $187B,x
01C08C  /
01C08F  \ Clear extra bits out of position
01C091  /
01C097 Return
01C09B \ Branch if sprites locked
01C09D /
01C0A4 Return
01C0E7  \ $141C = #01 if Goal Tape triggers secret exit
01C0EA   |
01C0EB   |
01C0EC  /
01C0F1 / Change music
01C0FE Zero out star timer
01C109 \ Play sound effect
01C10B /
01C12C Return
01C17E Return
01C182 Return
01C194 Y = Index into sprite OAM
01C1A9 \ Branch if sprites locked
01C1AB /
01C1D3 \ $9A = Sprite X position
01C1D5  | for block creation
01C1D7  |
01C1DA /
01C1DC \ $98 = Sprite Y position
01C1DE  | for block creation
01C1E0  |
01C1E3 /
01C1E5 \ Block to generate = Vine
01C1E7 /
01C1E9 Generate the tile
01C1ED Return
01C1F9 \ Branch if sprites locked
01C1FB /
01C21C Return
01C286 Return
01C2B7 \ Sprite status = Carryable
01C2B9 /
01C2C0 Sprite Y Speed = 0
01C2C5 \ Use default interation with Mario
01C2C8  |
01C2CA /
01C2CD Return
01C2D2 Return
01C2E3 \ Sprite status = Carryable
01C2E5 /
01C2F2 \ Sprite status = Being carried
01C2F4 /
01C309 \ Play sound effect
01C30B /
01C30E Return
01C312 Return
01C324 \ Determine which power-up to act like
01C327  |
01C328  |
01C329  |
01C32A  |
01C32B  |
01C32C  |
01C32D  |
01C32F  |
01C330  /
01C333 \ Change into the appropriate power up
01C335 /
01C339 Run the power up code
01C33C \ Change it back to the turning item
01C33E  |
01C340 /
01C344 Return
01C349 \ Flip flower every 8 frames
01C34B  |
01C34D  |
01C34E  |
01C34F  | ($157C,x = 0 or 1)
01C350 /
01C35B Y = Index into sprite OAM
01C35E \ Set berry tile to OAM
01C360 /
01C363 \ Set gfx properties of berry
01C364  | X = type of berry being eaten
01C367  |
01C36A  |
01C36C /
01C36F X = sprite index
01C370 Return
01C37C \ Branch if sprites locked
01C37E /
01C38E Return
01C3A0 \ Branch if sprites locked
01C3A2 /
01C3AE \ Branch if sprites locked
01C3B0 /
01C3BB \ Useless code, branch nowhere if not a star
01C3BD /
01C3C7 flower
01C3D0 Sprite X Speed = 0
01C3D2 star
01C3D6 sprite coin
01C402 Sprite X Speed = 0
01C44C sprite coin
01C476 star
01C4AB Return
01C4FA Return
01C50F Return
01C538 \ Index created from...
01C539  | ... powerup touched (upper 2 bits)
01C53B  |
01C53C  |
01C53D  | ... Mario's status (lower 3 bits)
01C53F /
01C540 \ Put appropriate item in item box
01C543  |
01C545 /
01C548 \
01C54A / Play sound effect
01C54D \ Call routine to change Mario's status
01C550 /
01C554 0 - Big
01C556 1 - No change
01C558 2 - Star
01C55A 3 - Cape
01C55C 4 - Fire
01C55E 5 - 1Up
01C561 \ Set growing action
01C563 /
01C565 \
01C567  | Set animation timer
01C56A / Set lock sprites timer
01C56C JMP to next instruction?
01C57A \
01C57C /
01C57F Return
01C580 \ Set star timer
01C582 /
01C587 / Change music
01C591 Return
01C59C \ Play sound effect
01C59E /
01C5AD Return
01C5EB Return
01C608 Return
01C638 sprite coin
01C640 Return
01C644 Return
01C6A0 Return
01C6A1 \ Setup flashing palette for star
01C6A3  |
01C6A5  |
01C6A7  |
01C6A8  |
01C6AA  |
01C6AB  |
01C6AC  |
01C6AF  |
01C6B0 / $0A contains palette info, will be applied later
01C6B2 \ Set tile x position
01C6B4 /
01C6B7 \ Set tile y position
01C6B9  |
01C6BA /
01C6BD \ Flip flower/cape if 157C,x is set
01C6C0  |
01C6C1  |
01C6C3  |
01C6C5 /
01C6C7 \ Add in level priority information
01C6C9  | Add in palette/gfx page
01C6CC  | Adjust palette for star
01C6CE / Set property byte
01C6D1 \ Set powerup tile
01C6D3  |
01C6D4  |
01C6D6  | X = Sprite number - #$74
01C6D7  |
01C6DA /
01C6DD X = sprite index
01C6E5 Return
01C6ED \ Branch if sprites locked
01C6EF /
01C772 Return
01C776 \ Branch if sprites locked
01C778 /
01C7CE Y = Index into sprite OAM
01C84D Y = Index into sprite OAM
01C902 X = Sprite index
01C927 Y = Index into sprite OAM
01C9A1 X = Sprite index
01C9A4 Y = Index into sprite OAM
01C9AC \ Branch if sprites locked
01C9AE /
01C9B6 Return
01C9D5 Return
01C9EB Return
01CA9B Return
01CACA Return
01CB1F Return
01CB52 Return
01CC27 Return
01CC93 Return
01CC94  \ Do nothing at all
01CC95   |
01CC96   |
01CC97   |
01CC98   |
01CC99   |
01CC9A   |
01CC9B   |
01CC9C  /
01CCC4 Return
01CCC6 Return
01CCE9 Return
01CCEF Return
01CD1D Return
01CD2E Return
01CD4D Return
01CD5D Return
01CD86 Return
01CD91 Return
01CDAA Return
01CDDF \ Branch if sprites locked
01CDE1 /
01CE06 \ Set turning timer
01CE08 /
01CE33 Return
01CE3D Return
01CEA4 Return
01CEAD Return
01CEDB Return
01CEFC Return
01CF0A \ Play sound effect
01CF0C /
01CF1B Return
01CF25 \ Sprite Speed = 0
01CF27 /
01CF7C Return
01CF9D Return
01CFB6 Return
01CFC5 Return
01CFD0 \ Play sound effect
01CFD2 /
01CFDF Return
01D042 Return
01D050 / Change music
01D056 Return
01D059 \ Play sound effect
01D05B /
01D068 Return
01D069 \ Sprite status = Normal
01D06B /
01D0BD Return
01D0D9 Sprite Y Speed = 0
01D0DB Return
01D0DD Return
01D214 Return
01D238 Return
01D258 \ Set turning timer
01D25A /
01D25D Return
01D28B  \ Set ground shake timer
01D28D  /
01D294  \ Lock Mario in place
01D296  /
01D299 \ Play sound effect
01D29B /
01D2A7 Return
01D2FD \ Play sound effect
01D2FF /
01D318 Return
01D31D Return
01D31E \ Play sound effect
01D320 /
01D32B Return
01D333 Return
01D334 \ Play sound effect
01D336 /
01D341 Return
01D350 Return
01D378 Return
01D39D \ Sprite Speed = 0
01D39F /
01D3AB \ Play sound effect
01D3AD /
01D3B0 Return
01D3E9 \ Extended sprite = Smoke puff
01D3EB /
01D3F3 \ Play sound effect
01D3F5 /
01D40A Return
01D438 Return
01D43E \ Unreachable
01D441 / Erase sprite
01D505 \ Branch if sprites locked
01D507 /
01D661 Sprite Y Speed = 0
01D680 Return
01D6EC Return
01D716 Return
01D745 \ Play sound effect
01D747 /
01D768 \ Branch if sprites locked
01D76A /
01D791 Return
01D7AF Return
01D7B0 Sprites calling this routine must be modified
01D7B1 to set $151C,x and $1528,x to a location in
01D7B3 LineTable instead of $07/F9DB+something
01D7E0 Return
01D83A WIERD ROUTINE INVOLVING POSITIONS.  ALL VARIABLES SET ABOVE...
01D83F "# OF CUSTOM BLOCK???"
01D869 ?? #00 - platforms stop at end rather than fall off
01D886 SPEED SETTINGS!
01D894 Return
01D937 Return
01D98D X = Sprite index
01D9A6 Return
01D9A7 LINE GUIDE PLATFORM FUZZY
01D9A9 DETERMINE SPRITE ITS DEALING WITH
01D9AF PLATFORM!
01DA09 Return
01DA0F \ Branch if carrying an enemy...
01DA12  | ...or if on Yoshi
01DA15 /
01DA8F Return
01DAA1 Return
01DAA2 LINE GUIDED PLATFORM CODE
01DAA9 CONDITIONAL DEPENDING ON PLATFORM TYPE?
01DACF DRAW GFX  .  RELIES ON NEW POSITIONS MADE UP THERE.
01DAD2 RESTORE POSITIONS
01DAE3 LINE GUIDE HANDLER???
01DB21 CUSTOM INTERACTION HANDLER
01DB43 Return
01DB44 \ Branch if sprites locked
01DB46 /
01DB59 Return
01DB66 \ Branch if sprites locked
01DB68 /
01DB70 \ Play sound effect
01DB72 /
01DB8B Sprite Y Speed = 0
01DB95 Return
01DBD7 Y = Index into sprite OAM
01DC80 Y = Index into sprite OAM
01DCBE X = Sprite index
01DDB4 Return
01DDB7 \ Sprite status = Normal
01DDB9 /
01DE0D X = Sprite index
01DE10 Return
01DE37 \ Return if sprites locked
01DE39 /
01DE40 Return
01DE77 \ Play sound effect
01DE79 /
01DEAF Return
01DED6 Return
01DF23 Y = Index into sprite OAM
01DF49  \ Unreachable instructions
01DF4A /
01DFC0 Return
01E039 X = Sprite index
01E04C / Play sound effect
01E04F Return
01E07A Return
01E0A1 \ Play sound effect
01E0A3 /
01E0A6 Return
01E105 Return
01E135 \ Branch if not on ground
01E138  |
01E13A /
01E13C Sprite Y Speed = 0
01E170 Y = Index into sprite OAM
01E18F Return
01E1B7 Return
01E1C7 Return
01E217 / Change music
01E269 Return
01E280 Return
01E28B Return
01E2AF Return
01E308 Return
01E329 \ $9A = Sprite X position
01E32B  | for block creation
01E32D  |
01E330 /
01E332 \ $98 = Sprite Y position
01E334  | for block creation
01E336  |
01E339 /
01E33B \ Block to generate = Mole hole
01E33D /
01E35E Return
01E37E Return
01E38E Return
01E3C6 Return
01E3E8 Return
01E3EE Return
01E401 \ Branch if sprites locked
01E403 /
01E41B Return
01E41E Return
01E45F Y = Index into sprite OAM
01E4BB \ Sprite Speed = 0
01E4BD /
01E4BF Return
01E4E6 \ Branch if not touching object
01E4E9  |
01E4EB /
01E4F4 Sprite Y Speed = 0
01E5C3 Return
01E5F2 \ Play sound effect
01E5F4 /
01E603 Return
01E608 \ Return if Mario is invincible
01E60B /
01E610 Return
01E64E Sprite Y Speed = 0
01E6A9 \ Play sound effect
01E6AB /
01E6D2 \ Branch if carrying an enemy...
01E6D5  | ...or if on Yoshi
01E6D8 /
01E6DA \ Sprite status = carried
01E6DC /
01E6FC Return
01E708 \ Set X displacement for both tiles
01E70A  | (Sprite position + #$00/#$08)
01E70D  |
01E70E  |
01E710 /
01E713 \ Set Y displacement for both tiles
01E715  | (Sprite position + #$08)
01E716  |
01E718  |
01E71B /
01E722 \ If P Switch, tile = #$FE
01E724  |
01E726 /
01E728 \ If Sliding Koopa...
01E72A  |
01E72C  |
01E72E  | ...or a shelless, tile = #$EE
01E730 /
01E732 \ If sprite num >= #$0F, tile = #$C7 (todo: is this used?)
01E734  |
01E736 /
01E738  If #$04 <= sprite num < #$0F, tile = #$4D (Koopas)
01E73A \ Same value for both tiles
01E73D /
01E741 \ Store the first tile's properties
01E743  |
01E746 /
01E749 \ Horizontally flip the second tile and store it
01E74B /
01E74E \ Y = index to size table
01E74F  |
01E750  |
01E751 /
01E752 \ Two 8x8 tiles
01E754  |
01E757 /
01E75A Return
01E76E Return
01E7A4 \ Branch if sprites locked
01E7A6 /
01E7D0  \ Set time until respawn
01E7D2   |
01E7D5   | Sprite to respawn = Lakitu
01E7D7  /
01E7DA Return
01E897 Return
01E91E X = Sprite index
01E942 X = Sprite index
01E984 Return
01E98D \ Branch if sprites locked
01E98F /
01EA16 Return
01EA19 Wrapper
01EA20 Return
01EA21 \ Return if no free slots
01EA25 /
01EA27 \ Sprite status = Normal
01EA29 /
01EA6F Return
01EA8E Return
01EAA9  \ Branch if Mario X speed == 0
01EAAB  /
01EAAD  \ If Mario X speed is positive,
01EAAF   | invert it
01EAB1  /
01EAB2  \ Y = Upper 4 bits of X speed
01EAB3   |
01EAB4   |
01EAB5   |
01EAB6  /
01EAB7 \ Branch if sprites locked
01EAB9 /
01EABB  \ If time to change frame...
01EABE   |
01EAC0   | Set time to display new frame (based on Mario's X speed)
01EAC3   |
01EAC6   | Set index to new frame, $18AD = ($18AD-1) % 3
01EAC9   |
01EACB   |
01EACD  /
01EAD0  \ Y = frame to show
01EAD3   |
01EAD6  /
01EB8A \ $13C7 = Yoshi palette
01EB8D /
01EBB3 Return
01EBCD \ $1410 = winged Yoshi flag
01EBD0 /
01EBD3 Clear real winged Yoshi flag
01EBD6 Clear stomp Yoshi flag
01EBDC  \ Branch if normal Yoshi status
01EBDF   |
01EBE1  /
01EBE3  Mario won't have Yoshi when returning to OW
01EC03 Return
01EC45  \ Set image to appropriate frame
01EC48  /
01EC4B Return
01EC5A Return
01EC84 \ Return if no free slots
01EC88  |
01EC8A /
01EC8B \ Sprite status = Carryable
01EC8D /
01ECE0 Return
01ECFB Sprite X Speed = 0
01ED3C \ Branch if carrying an enemy...
01ED3F  | ...or if on Yoshi
01ED42 /
01ED44 \ Branch if upward speed
01ED46 /
01ED4D \ Mario's speed = 0
01ED4F /
01ED5A \ Play sound effect
01ED5C /
01ED5F \ Play sound effect
01ED61 /
01ED90 \ Set turning timer
01ED92 /
01EDA5 \ Play sound effect
01EDA7 /
01EDC6 Sprite Y Speed = 0
01EDCB Return
01EDE1 Return
01EE9B Y = Index into sprite OAM
01EEDF \ Return if Yoshi doesn't have wings
01EEE2  |
01EEE4 /
01EF0E \ Play sound effect
01EF10 /
01EF17 Return
01EF6F Y = Index into sprite OAM
01EFDA Return
01F090 Y = Index into sprite OAM
01F0A0 Return
01F0A1 Return
01F0AC \ Branch if $1410 == #$01
01F0AF  | This never happens
01F0B1 / (fireball on Yoshi ability)
01F0D3 \ Play sound effect
01F0D5 /
01F0FD \ Play sound effect
01F0FF /
01F12D Return
01F136 Return
01F150 \ Set Yoshi wing ability
01F152 /
01F175 \ Set yoshi stomp/wing ability,
01F178  | based on palette of sprite and Yoshi
01F179  |
01F17B  |
01F17C  |
01F17F  |
01F180  |
01F181  |
01F183  |
01F184  |
01F185  |
01F188  |
01F189  |
01F18B  |
01F18C  |
01F18F  |
01F191  |
01F192 /
01F195 \ Set yoshi wing ability
01F196  | ($141E = #$02)
01F198 /
01F19B \ If Yoshi gets stomp ability,
01F19C  | $18E7 = #$01
01F19E /
01F1DE Return
01F232 \ Sprite status = Carryable
01F234 /
01F28F \ Play sound effect
01F291 /
01F294 Return
01F298 \ Extended sprite = Yoshi fireball
01F29A /
01F2D8 Return
01F2DF \ Play sound effect
01F2E1 /
01F2E4 \ Return if sprite doesn't spawn a new one
01F2E7  |
01F2E9 /
01F2EB \ Load sprite to spawn and store it
01F2EC  |
01F2EF  |
01F2F3  |
01F2F4 /
01F2F7 \ Load Tweaker bytes
01F2F8  |
01F2F9  |
01F2FD /
01F2FE Return
01F30E \ Play sound effect
01F310 /
01F313 Return
01F327 Return
01F356 \ Sprite status = Unused (todo: look here)
01F358 /
01F360 \ Branch if not a Koopa
01F363  | (sprite number >= #$0D)
01F365 /
01F392 \ Sprite = Mushroom
01F394 /
01F397 \ Set "Gives powerup when eaten" bit
01F39A  |
01F39C /
01F39F \ Branch if not Changing Item
01F3A2  |
01F3A4 /
01F3EC \ Play sound effect
01F3EE /
01F3FD Return
01F3FE \ Branch if sprite off screen...
01F401  |
01F404  | ...or going down pipe
01F407 /
01F4B1 Return
01F4F2 \ Branch if "Death frame 2 tiles high"
01F4F5  | is NOT set
01F4F7 /
01F523 Return
01F566 Loop over spites:
01F575 \ Skip sprite if sprite status < 8
01F578  |
01F57A /
01F57C \ Skip sprite if behind scenery
01F57F /
01F58D Return
01F59B \ If sprite inedible
01F59E  |
01F59F  |
01F5A1  | Play sound effect
01F5A3  |
01F5A6 / Return
01F5A7 \ Branch if sprite being eaten not Pokey
01F5AA  |
01F5AC /
01F5AE $185E = Index of sprite being eaten
01F5BB X = Index of sprite being eaten
01F5C1 \ Return if no free slots
01F5C5 /
01F5C7 \ Sprite status = Normal
01F5C9 /
01F5CC \ Sprite = Pokey
01F5CE /
01F5E6 X = Index of new sprite
01F5E7 Reset sprite tables
01F5EB X = Index of sprite being eaten
01F5F2 y = index of new sptr here??
01F5FB \ $160E,x = Index of sprite being eaten
01F5FC /
01F609 Return
01F667 Return
01F69D Return
01F6C8 \ Play sound effect
01F6CA /
01F6D2 \ Set Yoshi wing ability
01F6D4 /
01F6DC Return
01F70E \ Branch if Mario has star
01F711 /
01F718 \ Play sound effect
01F71A /
01F71D \ Play sound effect
01F71F /
01F743 \ Mario invincible timer = #$30
01F745 /
01F74B Return
01F74C \ Sprite status = Normal
01F74E /
01F756 \ Play sound effect
01F758 /
01F75B Return
01F790 Y = Index into sprite OAM
01F798 Return
01F7AD Y = Index into sprite OAM
01F7C1 Return
01F82C Return
01F84A \ Sprite status = Carryable
01F84C /
01F866 Return
01F86B Return
01F87B Return
01F88B Return
01F897 \ Branch if sprites locked
01F899 /
01F928 \ Set turning timer
01F92A /
01FA1F Y = Index into sprite OAM
01FA36 Return
01FA4B Return
01FA63 Y = Index into sprite OAM
01FA7D \ Branch if sprites locked
01FA7F /
01FAB3 Return
01FAC3 00 - Morton
01FAC5 01 - Roy
01FAC7 02 - Ludwig
01FAC9 03 - Iggy
01FACB 04 - Larry
01FACD 05 - Lemmy
01FACF 06 - Wendy
01FB15 \ Set time to go in shell
01FB17 /
01FB2F / Change music
01FB35 Return
01FB60 \ Play sound effect
01FB62 /
01FB6A Kill all sprites
01FB99 Sprite Y Speed = 0
01FB9B Sprite X Speed = 0
01FC3F \ Branch if sprites locked
01FC41 /
01FC43 Throw ball
01FC4D Return
01FC61 Return
01FCCE \ Play sound effect
01FCD0 /
01FD04 Return
01FD09 Return
01FD36 \ Extended sprite = Smoke puff
01FD38 /
01FD40 \ Play sound effect
01FD42 /
01FD4F Return
01FD94 Return
01FDA7 \ Find an open sprite index
01FDA9  |
01FDAC  |
01FDAE  |
01FDAF /
01FDB1 Return
01FDB2 \ Play sound effect
01FDB4 /
01FDB7 \ Sprite status = normal
01FDB9 /
01FDBC \ Sprite to throw = Ball
01FDBE /
01FDC1 \ Before: X must have index of sprite being generated
01FDC2  | Routine clears *all* old sprite values...
01FDC3  | ...and loads in new values for the 6 main sprite tables
01FDC7 /
01FDC8 Push Iggy's sprite index
01FDC9 \ Ball's direction = Iggy'direction
01FDCC /
01FDCF X = Ball's direction
01FDD0 \ Set Ball X position
01FDD3  |
01FDD4  |
01FDD6  |
01FDD9  |
01FDDC  |
01FDDE /
01FDE1 \ Set Ball Y position
01FDE4  |
01FDE5  |
01FDE7  |
01FDEA  |
01FDEC  |
01FDEE /
01FDF1 X = Iggy's sprite index
01FDF2 Return
01FEC5 Y = Index into sprite OAM
01FF2B  Iggy ball palette
01FF52 Return
01FF97 Return
01FF98  \ $14B4,$14B5 = Sprite X position + #$08
01FF9A   |
01FF9B   |
01FF9D   |
01FFA0   |
01FFA3   |
01FFA5  /
01FFA8  \ $14B6,$14B7 = Sprite Y position + #$0F
01FFAA   |
01FFAB   |
01FFAD   |
01FFB0   |
01FFB3   |
01FFB5  /
01FFBE Return
028012 \ Play sound effect
028014 /
028042 \ Sprite status = Normal
028044 /
028071 Return
028086 BOMB
028089 Return
02808A Make sprite unstompable
02808D \ Set new clipping area for explosion
02808F /
028095 \ Increase frame count if sprites not locked
028097  |
028099 /
02809C \ When timer is up free up sprite slot
02809F  |
0280A1 /
0280A4 Return
028139  \ Loop over sprites:
02813B   | Don't attempt to kill self
02813E   |
028140   |
028141   | Skip sprite if it's already dying/dead
028144   |
028146   |
028148   | Check for contact
02814B   |
02814C   | Next
02814D  /
02814F Return
028151  \ Return if no sprite contact
028152   |
028156   |
028157   |
02815B   |
02815F  /
028161  \ Return if sprite is invincible
028164   | to explosions
028166  /
028168 \ Sprite status = Killed
02816A /
02816D  \ Sprite Y speed = #$C0
02816F  /
028172  \ Sprite X speed = #$00
028174  /
028177 Return
0283C7 Return
0283F7 Return
02840F  \ Set ground shake timer
028411  /
028414 \ Play sound effect
028416 /
028438 Return
02848C Return
02849E Return
0284A5 Return
0284BB Return
0284E7 Return
02850F Return
028534 \ Find a free extended sprite slot
028536  |
028539  |
02853B  |
02853C  |
02853E / Return if no free slots
02853F \ Extended sprite = Lava splash
028541 /
02858E Return
02858F  \ If Big Mario:
028591   | Y = #$1F
028593   | X = #$00
028595   | Small Mario:
028597   | Y = #$0F
028599  / X = #$10
0285C4 Return
0285DE Return
0285EE Return
02862E Return
02862F \ Return if no free slots
028633 /
028636 \ Sprite status = Being carried
028638 /
02864D \ Sprite = Throw Block
02864F /
028662 Return
02867F \
028681 / Play sound effect
0286BE Return
0286EC Return
028739 Return
028758 \ Increase points
02875B  |
02875C  |
02875F  |
028760  |
028763  |
028764  |
028766  |
028769  |
02876B  |
02876E  |
028770 /
028773 Deflect Mario downward
028775 /
028777 for shatter routine?
028779 Actually break the block
02877D Handle sprite/block interaction
028780 \ Replace block with "nothing" tile
028782  |
028784 /
028788 Return
028792 \ Reset turning block
028794  |
028797  |
028799  |
02879A /
0287A9 \ Branch if not a turn block
0287AC  |
0287AE /
0287B0 \ Save [$98-$9A]
0287B2  |
0287B3  |
0287B5  |
0287B6  |
0287B8  |
0287B9  |
0287BB /
0287BC \ Block Y position = Bounce Y sprite position
0287BF  |
0287C1  |
0287C4 /
0287C6 \ Block X position = Bounce X sprite position
0287C9  |
0287CA  | (Round to nearest #$10)
0287CC  |
0287CE  |
0287D0  |
0287D3  |
0287D5 /
0287D7 \ Block to generate = Bounce sprite block
0287DA /
0287DC \ Save [$04-$07]
0287DE  |
0287DF  |
0287E1  |
0287E2  |
0287E4  |
0287E5  |
0287E7 /
0287EC \ Restore [$04-$07]
0287ED  |
0287EF  |
0287F0  |
0287F2  |
0287F3  |
0287F5  |
0287F6 /
0287F8 \ Restore [$98-$9A]
0287F9  |
0287FB  |
0287FC  |
0287FE  |
0287FF  |
028801  |
028802 /
028818 \ Play on/off sound if appropriate
02881A  |
02881C  |
02881E  |
028820 /
02882A \ Set block bounce sprite type
02882C  |
02882D /
028830 \ set (times can be hit?)
028832 /
028835 \ Set bounce block y position
028837  |
02883A  |
02883C /
02883F \ Set bounce block x position
028841  |
028844  |
028846 /
028852 \ Set bounce y speed
028855 /
028858 \ Set bounce x speed
02885B /
028864 \ Set tile to turn block into
028866 /
028869 \ Time to show bouncing block
0288A0 Return
028904 Return
028905 \ Find a last free sprite slot from 00-0B
028907  |
02890A  |
02890C  |
02890D  |
02890F /
028927 \ Set sprite status
02892A /
02893A \ Set sprite number
02893D /
02894C / Play sound effect
028969 / Change music
0289CC Return
028A07 Return
028A29 Return
028A65 Return
028AA8 Return
028ACD \ Play sound effect
028ACF /
028AD5 \ Branch if Mario doesn't have star
028AD8 /
028B20  \ Return if timer not set
028B23  /
028B25  \ Decrement every other frame...
028B27   |
028B29   | ...as long as sprites not locked...
028B2E   |
028B30  /
028B33  Return if the timer hasn't just run out
028B35 \ Return if no free slots
028B39 /
028B3C \ Sprite status = Initialization
028B3E /
028B41  \ Sprite = Sprite to respwan
028B44  /
028B61  Reset sprite tables
028B66 Return
028B77 Return
028BB0 \ This routine does nothing at all
028BB1  | I believe it used to call the below
028BB2  | routine to add smoke when boarding
028BB3  | Yoshi
028BB6  |
028BB7 / Return
028BB8 Return
028BB9 \ Display smoke when getting on Yoshi
028BBB  |
028BBE  |
028BC0  |
028BC2  |
028BC5  |
028BC7  |
028BC8  |
028BCA / Return
028C08 Return
028C3A Return
028C60 Return
028C69 Return
028CB7 Return
028CC4 \ Branch if sprites locked
028CC6 /
028D41 Return
028D65 Return
028DCF \ Branch if sprites locked
028DD1 /
028DD6 Return
028DDB \ Branch if sprites locked
028DDD /
028E75 Return
028E79 Return
028ECB Return
028F2A Return
028F86 Return
028F8A Return
028F8B \ Branch if sprites locked
028F8D /
02902C Return
02904C Return
029056  \ Decrement bounce sprite timer if > 0
029062 00 - Nothing (Bypassed above)
029064 01 - Turn Block without turn
029066 02 - Music Block
029068 03 - Question Block
02906A 04 - Sideways Bounce Block
02906C 05 - Translucent Block
02906E 06 - On/Off Block
029070 07 - Turn Block
029076  \ Return if sprites locked
029078  /
02907A  \ Initialize only once
02907D   | (Generate invisible tile sprite)
02907F   |
029082  /
0290C3 Return
0290CD Return
02917D \ Play sound effect
02917F /
02918C \ Play sound effect
02918E /
029191  \ Toggle On/Off
029194   |
029196  /
02919C Return
02919F  \ If doesn't turn into multiple coin block,
0291A2   |
0291A4   |
0291A6   |
0291A8  / Block to generate = Bounce sprite block to turn into
0291B4  Block to generate = Used block
0291B8 \ Block to generate = Invisible solid
0291BA  /
0291BC  \ Block Y position = Bounce sprite Y position
0291BF   |
0291C0   | (Rounded to nearest #$10)
0291C2   |
0291C4   |
0291C6   |
0291C9   |
0291CB  /
0291CD  \ Block X position = Bounce sprite X position
0291D0   |
0291D1   | (Rounded to nearest #$10)
0291D3   |
0291D5   |
0291D7   |
0291DA   |
0291DC  /
0291EC Return
029264 Return
0292C9 Return
029355 Return
029391 Return
029397 Return
029403 Return
029426 Return
02945B \ Sprite status = Killed
02945D /
029472 \ Branch if can't be jumped on
029475  |
029477 /
029479 \ Branch if dies when jumped on
02947C  |
02947E /
029480 \ Sprite status = Carryable
029482 /
0294C0 Return
0294C1 \ Set ground shake timer
0294C3 /
0294CC Loop over sprites:
0294CE \ Skip current sprite if status < 8
0294D1  |
0294D3 /
0294D5 \ Skip current sprite if not on ground
0294D8  |
0294DA /
0294DC \ Skip current sprite if...
0294DF  | ...can't be killed by cape...
0294E1  | ...or sprite being eaten...
0294E4  | ...or interaction disabled
0294E7 /
0294F4 Return
02950A Return
02953B Return
0295AD Return
029630 Return
029656 Return
029695 Return
0296B7 Return
0296D7 Return
0296E2 Return
029749 Return
029792 Return
029796 Return
029837 Return
0298BD Return
0298C1 Return
029921 Return
02999E Return
0299D1 Return
0299E2 Return
0299E8 Return
029A6D Return
029AA7 Return
029AA8  Find next usable location in score sprite table
029AAE add a "10" score sprite
029AB4 set Yposition low byte
029ABA set Ypos high byte
029AC0 set Xpos low byte
029AC6 set Xpos high byte
029ACB set initial speed to 30
029AD7 Puts #$00 into $17D0 and returns
029ADA for (c=3;c>=0;c--)
029ADC {
029ADF  check if there is empty space in smoke/dust sprite table
029AE2 }
029AE4  if no empty space, return
029AE5 if there's an empty space, make it 5 (glitter sprite)
029AEA  nots sure what 17E4 is used for yet - copied from $1933
029AED carryout = $17E4 % 2
029AEF get x coordinate low byte
029AF2 if carryout == 1
029AF4   x-coord -= $26
029AF6 store x-coord
029AF9 get y coordinate low byte
029AFD if carryout == 1
029AFF   y-coord -=$28
029B01 store y-coord
029B06 duration = 10
029B09 Return
029B15 Return
029B2B 00 - Empty slot
029B2D 01 - Puff of smoke
029B2F 02 - Reznor fireball
029B31 03 - Tiny flame left by hopping flame
029B33 04 - Hammer
029B35 05 - Mario fireball
029B37 06 - Bone
029B39 07 - Lava splash
029B3B 08 - Torpedo Ted shooter's arm
029B3D 09 - Unused (Red thing that flickers from 16x16 to 8x8)
029B3F 0A - Coin from cloud game
029B41 0B - Piranha fireball
029B43 0C - Volcano lotus fire
029B45 0D - Baseball
029B47 0E - Flower of Wiggler
029B49 0F - Trail of smoke
029B4B 10 - Spin Jump stars
029B4D 11 - Yoshi fireballs
029B4F 12 - Water bubble
029BD9 Return
029BDA Clear extended sprite
029BDD Return
029BE4  \ Set ground shake timer
029BE6  /
029BE9 \ Play sound effect
029BEB /
029BF5 \ Find a free extended sprite slot
029BF7  |
029BFA  |
029BFC  |
029BFD  |
029BFF / Return if no free slots
029C00 \ Extended sprite = Yoshi stomp smoke
029C02 /
029C32 Return
029C7E Return
029C7F Clear extended sprite
029C82 Return
029CAF Return
029D44 Return
029D59 Return
029D5A Clear extended sprite
029D5D Return
029D99 Clear extended sprite
029D9C Return
029E14 X = Sprite index
029E35 Return
029E3C Return
029E81 Return
029EE2 X = Sprite index
029EE5 Return
029EE6 Clear extended sprite
029EE9 Return
029F60 Return
029F98 Return
02A041 Return
02A045 \ Play sound effect
02A047 /
02A0A5 X = Sprite index
02A0A8 Return
02A0AC \ Return every other frame
02A0AD  |
02A0AF  |
02A0B1 /
02A0B5 $185E = Y = Extended sprite index
02A0B8 Loop over sprites:
02A0BD \ Skip current sprite if status < 8
02A0C0  |
02A0C2 /
02A0C4 \ Skip current sprite if...
02A0C7  | ...invincible to fire/cape/etc
02A0C9  | ...sprite being eaten...
02A0CC  | ...interactions disabled...
02A0D2 /
02A0E1 \ if Yoshi fireball...
02A0E4  |
02A0E6  |
02A0E8  |
02A0E9  |
02A0EA  | ...?
02A0ED /
02A0EE \ Skip sprite if fire killing is disabled
02A0F1  |
02A0F3 /
02A0F5 \ Branch if takes 1 fireball to kill
02A0F8  |
02A0FA /
02A0FC Increase times Chuck hit by fireball
02A0FF \ If fire count >= 5, kill Chuck:
02A102  |
02A104  |
02A106  | Play sound effect
02A108  |
02A10B  | Sprite status = Killed
02A10D  |
02A110  | Set death Y speed
02A112  |
02A117  | Set death X speed
02A11A  |
02A11C  | Increase points
02A11E  |
02A122 /
02A124 \ Turn sprite into coin:
02A126  | Play sound effect
02A129  | Sprite = Moving Coin
02A12B  |
02A12D  | Sprite status = Normal
02A12F  |
02A132  | Reset sprite tables
02A136  | Set upward speed
02A138  |
02A140 /
02A14C $15E9 = Sprite index
02A14D $15E9 = Sprite index
02A150 Return
02A1A3 Return
02A20D X = Sprite index
02A210 Return
02A211 \ Clear extended sprite
02A213 /
02A216 Return
02A250 X = Sprite index
02A253 Return
02A2BE Return
02A2BF Clear extended sprite
02A2C2 Return
02A2DE Return
02A316 Return
02A343 Return
02A3AA X = Sprite index
02A3AD Return
02A3E9 X = Sprite index
02A3F5 Return
02A419 Clear extended sprite
02A468 Return
02A469 \ Branch if Mario has star
02A46C /
02A47C \ Play sound effect
02A47E /
02A481 \ Play sound effect
02A483 /
02A4AD Return
02A4B2 Return
02A4E8 Return
02A546 Return
02A56D Return
02A591 Return
02A5B8 X = Sprite index
02A5BB Return
02A610 Return
02A678 Return
02A6DF X = Sprite index
02A728 Return
02A72A Return
02A734 Return
02A772 Return
02A7FC  \ Return every other frame
02A7FE   |
02A800  /
02A804  \ Branch if horizontal level
02A806   |
02A807  /
02A809  \ Vertical level:
02A80B   | $00,$01 = Screen boundary Y + offset
02A80C   |
02A80F   |
02A811   |
02A813   |
02A815  /
02A817  \ Horizontal level:
02A819   | $00,$01 = Screen boundary X + offset
02A81A   |
02A81D   |
02A81F   |
02A821   |
02A823   |
02A826   |
02A828  /
02A82A  X = #$00 (Number of sprite in level)
02A82C  Y = #$01 (Index into level data)
02A82E  Byte format: YYYYEEsy
02A830  \ Return when we encounter $FF, as it signals the end
02A832  /
02A834  \ If 's' is set, $02 = #$10
02A835   | Else, $02 = #$00
02A836   |
02A837   |
02A839  /
02A83B  Next byte
02A83C  Byte format: XXXXSSSS
02A83E  \ Skip all sprites until we find one at the adjusted screen boundary:
02A840   |
02A842   | If sprite screen (sSSSS) < adjusted screen boundary...
02A844  / ...skip the sprite
02A846  \ Move on to the next sprite
02A847   |
02A848   |
02A849  /
02A84B Return
02A84C  Return if sprite screen > adjusted screen boundary
02A84E  Byte format: XXXXSSSS
02A850  \ Skip sprite if not right at the screen boundary
02A852   |
02A854  /
02A856  \ This table has a flag for every sprite in the level (not just those onscreen)
02A859  / Skip sprite if it's already been loaded/permanently killed
02A85B  $02 = Number of sprite in level
02A85D  Mark sprite as loaded
02A860  Next byte
02A861  Byte format: Sprite number
02A863  $05 = Sprite number
02A865  Previous byte
02A866  \ Branch if sprite number < #$E7
02A868  /
02A874  \ $143E = Type of scroll sprite
02A876   | (Sprite number - #$E7)
02A877   |
02A879  /
02A87C  Previous byte
02A87D  Byte format: YYYYEEsy
02A88C  \ Branch if sprite number != 5 Eeries
02A88E  /
02A89C  \ Branch if sprite number != 3 Platforms on Chain
02A89E  /
02A8AC  \ Branch if sprite number < #$CB
02A8AE  /
02A8B0   \ Branch if sprite number >= #$DA
02A8B2  /
02A8B4  \ $18B9 = Type of generator
02A8B5   | (Sprite number - #$CA)
02A8B7   |
02A8B8  /
02A8BB  Allow sprite to be reloaded by level loading routine
02A8C0  \ Branch if sprite number < #$E1
02A8C2  /
02A8D4  \ Branch if sprite number < #$C9
02A8D6  /
02A8DD  \ $04 = #$01
02A8DF  / Eventually goes into sprite status
02A8E1  Previous byte
02A938  Allow sprite to be reloaded by level loading routine
02A93B Return
02A93E  \ Branch if horizontal level
02A940   |
02A941  /
02A943  \ Vertical level:
02A945   | Same as below with X and Y coords swapped
02A946   |
02A948   |
02A94A   |
02A94B   |
02A94D   |
02A950   |
02A952   |
02A954   |
02A956   |
02A959  /
02A95B  Byte format: YYYYEEsy
02A95D  \ Bits 11110000 are low byte of Y position
02A95E   |
02A960  /
02A962  \ Bits 00001101 are high byte of Y position
02A963   | (Extra bits are stored in Y position)
02A965  /
02A968  \ X position = adjusted screen boundary
02A96A   |
02A96C   |
02A96E  /
02A973  \ Sprite status = ??
02A975 /
02A97A KKOOPA STORAGE???
02A97C NO, IT WAS STATIONARY
02A97F SUBTRACT DA, FIRST SHELL SPRITE [RED]
02A988 IF POSITIBE, JUST STORE?
02A98E WHAT?
02A994 STORING RED KOOPA SHELL TO SPRITENUM
02A999  \ $161A,x = index of the sprite in the level
02A99B  / (Number of sprites in level, not just onscreen)
02A9B0 \ Sprite = Moving Coin
02A9B2 /
02A9B4 \ Sprite status = Normal
02A9B6 /
02A9C9  Reset sprite tables
02A9CD  \ Set off screen horizontally
02A9CF  /
02A9D2  \ ?? $1FE2,X = #$04
02A9D4  /
02A9DE  \ Number of slots to leave free = 2
02A9E0   |
02A9E2  /
02A9E4  Number of slots tp leave free = 0
02A9EE Return
02A9EF \ Subroutine: Return the first free sprite slot in Y (#$FF if not found)
02A9F2  | Y = Sprite memory index
02A9F5  |
02A9F7  |
02A9FA  |
02A9FB  |
02A9FD  |
02A9FE  | If free slot...
02AA01  |  ...return
02AA03  |
02AA04  |
02AA06  |
02AA08  | If no free slots, Y=#$FF
02AA0A /
02AA33 \ Unreachable
02AA35   | Loop X = 00 to 0E
02AA67 / Return
02AA8C Return
02AABC Return
02AB10 Return
02AB77 Return
02AB99  \ Allow sprite to be reloaded by level loading routine
02AB9B  /
02ABF4  Allow sprite to be reloaded by level loading routine
02AC00  \ Set to permanently erase sprite
02AC02  /
02AC1D \ Sprite status = Being carried
02AC1F /
02AC4D clear ram before entering new stage/area
02AC5B Return
02ACA0 Return
02ACE0 Return
02ACE5  takes sprite type -5 as input in A
02ACE7 Add 5 to sprite type (200,400,1up)
02ACE9 Set score sprite type/initial position
02ACEE Return
02ACEF  - note coordinates are level coords, not screen
02ACF0    sprite type 1=10,2=20,3=40,4=80,5=100,6=200,7=400,8=800,9=1000,A=2000,B=4000,C=8000,D=1up
02ACF1 Get next free position in table($16E1) to add score sprite
02ACF6 Set score sprite type (200,400,1up, etc)
02ACF9 Load y position of sprite jumped on
02ACFC   - make the score sprite appear a little higher
02ACFE Set this as score sprite y-position
02AD01 save that value
02AD02 Get y-pos high byte for sprite jumped on
02AD07 Set score sprite y-pos high byte
02AD0A restore score sprite y-pos to A
02AD0B \
02AD0C |
02AD0E |if (score sprite ypos <1C && >=0C)
02AD10 |{
02AD12 |
02AD15 |
02AD17 |  move score sprite down by #$10
02AD1A |
02AD1D |
02AD1F /}
02AD22 \
02AD24 /Set score sprite x-position
02AD27 \
02AD2A /Set score sprite x-pos high byte
02AD2D \
02AD2F /scoreSpriteSpeed = #$30
02AD33 Return
02AD34 (here css is used to index through the table of score sprites in table at $16E1
02AD36 for (css=5;css>=0;css--){
02AD39  if (css's type == 0)      --check for empty space
02AD3C }
02AD3E $18f7--;                   --gives LRU
02AD41 if ($18f7 <0)
02AD43   $18f7=5;
02AD48 return $18f7 in Y;
02AD4B Return
02ADC8 Return
02ADD8 Return
02AE35 X = Sprite index
02AED6  \ Maxed out at #$0E makes 3up the limit
02AED8  /
02AEDC  Bug: only 2up/3up supported.  See 5up-fix.asm
02AEFB Return
02AF28 Return
02AF29 \ Unreachable
02AF2C /
02AF45 \ Return if no free slots
02AF49 /
02AF4C \ Sprite status = Initialization
02AF4E /
02AF51 \ Sprite = Grey Platform on Chain
02AF53 /
02AF86 Return
02AFAF \ Return if no free slots
02AFB3 /
02AFB6 \ Sprite status = Normal
02AFB8 /
02AFBB  \ Sprite = Wave Eerie
02AFBD  /
02AFFD Return
02B00C 00 - Eerie, generator
02B00E 01 - Para-Goomba, generator
02B010 02 - Para-Bomb, generator
02B012 03 - Para-Bomb and Para-Goomba, generator
02B014 04 - Dolphin, left, generator
02B016 05 - Dolphin, right, generator
02B018 06 - Jumping fish, generator
02B01A 07 - Turn off generator 2 (sprite E5)
02B01C 08 - Super Koopa, generator
02B01E 09 - Bubble with Goomba and Bob-omb, generator
02B020 0A - Bullet Bill, generator
02B022 0B - Bullet Bill surrounded, generator
02B024 0C - Bullet Bill diagonal, generator
02B026 0D - Bowser statue fire breath, generator
02B028 0E - Turn off standard generators
02B02A Return
02B02E  Don't respawn any sprites
02B031 Return
02B035 Return
02B043 \ Play sound effect
02B045 /
02B048 \ Sprite status = Normal
02B04A /
02B04D \ Sprite = Bowser's Statue Fireball
02B04F /
02B07B Return
02B07E  |
02B080 /
02B088 \ Play sound effect
02B08A /
02B08E \ Sprite status = Normal
02B090 /
02B093 \ Sprite = Bullet Bill
02B095 /
02B0C8 Return
02B0DF \ Play sound effect
02B0E1 /
02B0F9 Return
02B11B \ Sprite = Bullet Bill
02B11D /
02B120 \ Sprite status = Normal
02B122 /
02B152 Return
02B168 \ Sprite status = Normal
02B16A /
02B16D \ Sprite = Flying Fish
02B16F /
02B1B7 Return
02B1C9 \ Sprite status = Normal
02B1CB /
02B206 Return
02B214 \ Sprite status = Normal
02B216 /
02B259 Return
02B287 Return
02B288 \ Sprite status = Normal
02B28A /
02B2CF Return
02B2E3 \ Sprite status = Normal
02B2E5 /
02B31E Return
02B336 \ Sprite status = Normal
02B338 /
02B386 Return
02B3AA Return
02B3B0 00 - Bullet Bill shooter
02B3B2 01 - Torpedo Ted launcher
02B3B4 02 - Unused
02B3EB \ Sprite status = Normal
02B3ED /
02B3F0 \ Sprite = Torpedo Ted
02B3F2 /
02B3F5 \ Sprite position = Shooter position
02B3F8  |
02B3FB  |
02B3FE  |
02B401  |
02B404  |
02B407  |
02B40A /
02B40E X = sprite index
02B40F Setup sprite tables
02B413 \ Direction = Towards Mario
02B416  |
02B417 /
02B41A $00 = sprite direction
02B41C \ Set time to stay behind objects
02B41E /
02B421 X = shooter index
02B422 \ Find a free extended sprite slot
02B424  |
02B427  |
02B429  |
02B42A  |
02B42C / Return if no free slots
02B42D \ Extended sprite = Torpedo Ted arm
02B42F /
02B463 Return
02B466 \ Return if it's not time to generate
02B469 /
02B46B \ Set time till next generation = 60
02B46D /
02B470 \ Don't generate if off screen vertically
02B473  |
02B475  |
02B478  |
02B47A /
02B47C \ Don't generate if off screen horizontally
02B47F  |
02B481  |
02B484  |
02B486 /
02B488 \ ?? something else related to x position of generator??
02B48B  |
02B48C  |
02B48E  |
02B48F  |
02B491  |
02B493 /
02B495 \ Don't fire if mario is next to generator
02B497  |
02B49A  |
02B49B  |
02B49D  |
02B49F /
02B4A1 \ Get an index to an unused sprite slot, return if all slots full
02B4A5 / After: Y has index of sprite being generated
02B4A7 \ Only shoot every #$80 frames
02B4A9 / Play sound effect
02B4AC \ Sprite status = Initialization
02B4AE /
02B4B1 \ New sprite = Bullet Bill
02B4B3 /
02B4B6 \ Set x position for new sprite
02B4B9  |
02B4BC  |
02B4BF /
02B4C2 \ Set y position for new sprite
02B4C5  | (y position of generator - 1)
02B4C6  |
02B4C8  |
02B4CB  |
02B4CE  |
02B4D0 /
02B4D3 \ Before: X must have index of sprite being generated
02B4D4  | Routine clears *all* old sprite values...
02B4D5  | ...and loads in new values for the 6 main sprite tables
02B4D9 /
02B4DA Display smoke graphic
02B4DD Return
02B4DE \ Find a free slot to display effect
02B4E0  |
02B4E3  |
02B4E5  |
02B4E6  |
02B4E8 / Return if no free slots
02B4EB \ Set effect graphic to smoke graphic
02B4ED /
02B4F0 \ Smoke y position = generator y position
02B4F3 /
02B4F6 \ Set time to show smoke
02B4F8 /
02B4FB \ Load generator x position and store it for later
02B4FE /
02B4FF \ Determine which side of the generator mario is on
02B501  |
02B504  |
02B506  |
02B509  |
02B50B  |
02B50D /
02B50E \ Set smoke x position from generator position
02B50F  |
02B510  |
02B513 /
02B516 X = Sprite index
02B519 Return
02B525 Return
02B553 Return
02B55C X = Sprite index
02B55F Return
02B58D Return
02B5BB Return
02B5C7 Return
02B5EB Return
02B63C \ After: Y = number of segments
02B63E  | $C2,x has a bit set for each segment remaining
02B63F  | for X=0 to X=4...
02B641  |
02B643  |
02B644  |
02B646  | ...Increment Y if bit X is set
02B647  |
02B648  |
02B64A /
02B64B \ Update the index into the clipping table
02B64E /
02B652 Return
02B677 \ Branch if Status == Normal
02B67A  |
02B67C /
02B685 Y = Index into sprite OAM
02B6A6 Return
02B6A7 \ Erase sprite if no segments remain
02B6A9  |
02B6AB  |
02B6AE / Return
02B6EC \ Branch if not on ground
02B6EF  |
02B6F1 /
02B6F3 Sprite Y Speed = 0
02B745 Y = Index into sprite OAM
02B7AB Return
02B7D5 Return
02B7EC Return
02B803 \ Take away a segment by unsetting a bit
02B805  |
02B808 /
02B81B Return
02B81C Wrapper
02B823 Return
02B82E \ Return if no free slots
02B832 /
02B834 \ Sprite status = Killed
02B836 /
02B881 Return
02B889 Return
02B88A \ Save $64
02B88C /
02B88D \ If being launched...
02B890  | ...set $64 = #$10...
02B892  | ...so it will be drawn behind objects
02B894 /
02B896 Draw sprite
02B899 \ Restore $64
02B89A /
02B89C \ Return if sprites locked
02B89E /
02B8A7 \ Branch if not being launched
02B8AA /
02B8AC \ Sprite Y speed = #$08
02B8AE /
02B8B0 Apply speed to position
02B8B3 \ Sprite Y speed = #$10
02B8B5 /
02B8B7 Return
02B8BC \ Only increase X speed every 4 frames
02B8BE  |
02B8C0 /
02B8C2 \ If not at maximum, increase X speed
02B8C5  |
02B8C7  |
02B8CA  |
02B8CC  |
02B8CD  |
02B8D0 /
02B8D2 \ Apply speed to position
02B8D5 /
02B8D8 \ If sprite has Y speed...
02B8DA  |
02B8DC  | ...Decrease Y speed every other frame
02B8DE  |
02B8E0  |
02B8E2 /
02B8E4 \ Run $02B952 every 8 frames
02B8E5  |
02B8E6  |
02B8E8  |
02B8EA  |
02B8EC /
02B8EF Return
02B9A3 Return
02B9A4 $9C = tile to generate
02B9A6 \ $9A = Sprite X position
02B9A8  | for block creation
02B9AA  |
02B9AD /
02B9AF \ $98 = Sprite Y position
02B9B1  | for block creation
02B9B3  |
02B9B6 /
02B9B8 Generate the tile
02B9BC Return
02B9D8 Return
02B9DE \ Sprite status = Normal
02B9E0 /
02B9F9 Return
02B9FE  \ Unreachable
02BA00   | Very similar to code below
02BA47 Return
02BA92 X = Sprite index
02BAA7 If it is <= the Red Berry map16 tile
02BAA9 Return
02BAAB If it is => Map16 always turning block
02BAAD Return
02BAB2 Berry Type
02BAB7 \ Find a free sprite slot and branch
02BABA  |
02BABC  |
02BABD /
02BABF Return if no slots found
02BAC0 \ Sprite status = Normal
02BAC2 /
02BAC5 \ Sprite number = Mushroom
02BAC7 /
02BACA \ Sprite and block X position = $00,$08
02BACC  |
02BACF  |
02BAD1  |
02BAD3  |
02BAD6 /
02BAD8 \ Sprite and block Y position = $01,$09
02BADA  |
02BADD  |
02BADF  |
02BAE1  |
02BAE4 /
02BAE8 Reset sprite tables
02BAEC ?
02BAEF \ Change the index into sprite clipping table
02BAF2  | to "resize" the sprite
02BAF4  |
02BAF6 /
02BAF9 \ No longer gives powerup when eaten
02BAFC  |
02BAFE /
02BB02 \ Block to generate = Tree behind berry
02BB04 /
02BB06 Generate the tile
02BB0A Return
02BB87 Return
02BBD5 Sprite Y Speed = 0
02BBFF Return
02BC0D Return
02BCEE \ Branch if not Spike Top
02BCF0  |
02BCF2 /
02BD3E Return
02BD4A \ Branch if Spike Top
02BD4C  |
02BD4E /
02BD50 \ Branch if Wall-follow Urchin
02BD52 /
02BD54 \ Branch if Ground-guided Fuzzball/Sparky
02BD56 /
02BD58 \ Branch if Ground-guided Hothead
02BD5A /
02BD74 Return
02BD75 \ Branch if Wall-detect Urchin
02BD77  |
02BD79 /
02BDA6 Return
02BDD6 \ Branch if Wall-follow Urchin
02BDD8  |
02BDDA /
02BDE9 \ Branch if Wall-follow Urchin
02BDEB  |
02BDED /
02BE3B \ Branch if not Ground-guided Fuzzball/Sparky
02BE3D  |
02BE3F /
02BE4B Return
02BE58 Y = Index into sprite OAM
02BE78 Return
02BE8C Return
02BFC0 X = Sprite index
02BFCC Return
02BFE2 \ Branch if Mario doesn't have star
02BFE5 /
02C009 \ Branch if not touching object
02C00C  |
02C00E /
02C010 Sprite X Speed = 0
02C019 Sprite Y Speed = 0
02C044 \ Branch if not on ground
02C047  |
02C049 /
02C04B Sprite Y Speed = 0
02C089 Return
02C0C9 Return
02C0CF  \ Unreachable
02C0D1   | A = #$08 or #$09 depending on sprite direction
02C0D4   |
02C0D6  /
02C0DC  \ Return if sprite is offscreen
02C0DF   |
02C0E2  /
02C125 Return
02C131 Return
02C155 Return
02C17D Return
02C193 Return
02C19A \ Return if no free slots
02C19E /
02C1A0 \ Sprite status = Normal
02C1A2 /
02C1F2 Return
02C212 Return
02C227 Return
02C23D \ Branch if on ground
02C240  |
02C242 /
02C25A Return
02C274 \ Branch if not touching object
02C277  |
02C279 /
02C294 \ Branch if on ground
02C297  |
02C299 /
02C2A6 \ Branch if not on ground
02C2A9  |
02C2AB /
02C2BD \ Block to generate = #$02
02C2BF /
02C2DA \ Block to generate = #$02
02C2DC /
02C2E4 \ Branch if not on ground
02C2E7  |
02C2E9 /
02C2F7 \ Branch if not on ground
02C2FA  |
02C2FC /
02C381 \ Play sound effect
02C383 /
02C3B2 Return
02C418 Return
02C439 Return
02C448 Sprite Y Speed = 0
02C45B Return
02C45F Return
02C46E \ Find a free extended sprite slot
02C470  |
02C473  |
02C475  |
02C476  |
02C478 / Return if no free slots
02C479 \ Extended sprite = Baseball
02C47B /
02C4B4 Return
02C4E2 Return
02C4F8 \ Play sound effect
02C4FA /
02C507 \ Branch if not on ground
02C50A  |
02C50C /
02C536 \ Play sound effect
02C538 /
02C53B Return
02C541 \ Branch if not on ground
02C544  |
02C546 /
02C555 Return
02C563 Return
02C56E \ Branch if not on ground
02C571  |
02C573 /
02C579 Sprite X Speed = 0
02C57B Sprite Y Speed = 0
02C57D Return
02C5AE \ Play sound effect
02C5B0 /
02C5C2 \ Sprite status = Normal
02C5C4 /
02C601 Return
02C617 Return
02C627 Return
02C62D Return
02C665 Return
02C69A Return
02C69E Return
02C6A7 \ Branch if not on ground
02C6AA  |
02C6AC /
02C6B5 \ Unreachable
02C6B7 / Play sound effect
02C6F5 \ Branch if not on ground
02C6F8  |
02C6FA /
02C707 \ Play sound effect
02C709 /
02C725 Return
02C73C Return
02C776 Return
02C798 Return
02C7A8 \ Branch if Mario doesn't have star
02C7AB /
02C7B1 Sprite X Speed = 0
02C7B3 \ Sprite status = Killed
02C7B5 /
02C7B8 \ Play sound effect
02C7BA /
02C7C3 Return
02C7D2 \ Play sound effect
02C7D4 /
02C7E8 Increase Chuck stomp count
02C7EB \ Kill Chuck if stomp count >= 3
02C7EE  |
02C7F0  |
02C7F2  | Sprite Y Speed = 0
02C7F4 /
02C7F6 \ Play sound effect
02C7F8 /
02C80F Return
02C819 Return
02C905 X = Sprite index
02C908 Return
02CA8F X = Sprite index
02CA92 Return
02CAF6 X = Sprite index
02CAF9 Return
02CB40 Return
02CB8F Return
02CBFB Return
02CBFC Return
02CBFD Return
02CBFE \ If sprites not locked,
02CC00  | increment sprite frame counter
02CC02 /
02CC1E \ Return if Mario animation sequence active
02CC20  |
02CC22 /
02CC41 \ $00 = Sprite X position
02CC43  |
02CC45  |
02CC48 /
02CC4A \ $02 = Sprite Y position
02CC4C  |
02CC4E  |
02CC51 /
02CC66 \ Mario's X speed = 0
02CC68 /
02CCB0 Return
02CCCB Y = Index into sprite OAM
02CCEF X = Sprite index
02CD2C Return
02CD2D Wrapper
02CD34 Return
02CD60 \ Block to generate = #$1B
02CD62 /
02CDC4 Return
02CDEC \ Play sound effect
02CDEE /
02CDFE Return
02CE1F Return
02CE2E Return
02CE39 Return
02CE66 Return
02CE6F Return
02CE7D Return
02CE85 Return
02CE8B Return
02CE8C \ Unreachable
02CE8F  / Wrapper for Pea Bouncer gfx routine
02CEF9 Y = Index into sprite OAM
02CF37 X = Sprite index
02CF51 Return
02CFEA Return
02CFFD Return
02D017 \ Entry point of routine determines value of $03
02D019  |
02D01B  |
02D01D  |
02D01F  |
02D021  |
02D023  |
02D025 /
02D027 \ if sprite is not off screen, return
02D02A /
02D02C \  vertical level
02D02E  |
02D030 /
02D038 \
02D03A  |
02D03B  | if the sprite has gone off the bottom of the level...
02D03D  | (if adding 0x50 to the sprite y position would make the high byte >= 2)
02D040  |
02D042  |
02D044 /    ...erase the sprite
02D046 \ if "process offscreen" flag is set, return
02D049  |
02D04B /
02D07A \ If sprite status < 8, permanently erase sprite
02D07D  |
02D07F /
02D081  \ Branch if should permanently erase sprite
02D084   |
02D086  /
02D088  \ Allow sprite to be reloaded by level loading routine
02D08A  /
02D08D Erase sprite
02D090 Return
02D091 \ If "process offscreen" flag is set, return
02D094  |
02D096 /
02D098 \ Return every other frame
02D09A  |
02D09B /
02D0CF Return
02D0E5 Return
02D0EA \ Unreachable
02D0EC  | Something to do with Yoshi?
02D148 Return
02D149 \ $18B2 = Sprite Y position + #$08
02D14B  |
02D14C  |
02D14E /
02D151 \ $00 = (Sprite Y position + #$08) rounded down to closest #$10 low byte
02D153 /
02D155 \
02D158  | Return if off screen
02D15A  |
02D15C  |
02D15E  | $02 = (Sprite Y position + #$08) High byte
02D160 /
02D163 \ $18B0 = Sprite X position + $0014/$FFFC
02D166  |
02D168  |
02D169  |
02D16C  | $01 = (Sprite X position + $0014/$FFFC) Low byte
02D16E  |
02D171  |
02D174  |
02D177  | Return if past end of level
02D179  |
02D17B  |
02D17E / $03 = (Sprite X position + $0014/$FFFC) High byte
02D180 \ $00 = bits 4-7 of Y position, bits 4-7 of X position
02D182  |
02D183  |
02D184  |
02D185  |
02D186  |
02D188 /
02D1B1 X = Sprite index
02D1F0 Return
02D1F3 \ Set X position of block
02D1F6  |
02D1F8  |
02D1FB /
02D1FD \ Set Y position of block
02D200  |
02D202  |
02D205 /
02D207 \ Block to generate = Tree behind berry
02D209 /
02D20F Return
02D287 Return
02D288 \ Adjust index so we use X values rather than Y
02D289  |
02D28A  |
02D28C /
02D290 X = sprite index
02D293 Return
02D294 \ $14EC or $14F8 += 16 * speed
02D296  |
02D297  |
02D298  |
02D299  |
02D29A  |
02D29B  |
02D29E /
02D2A5 \ Amount to move sprite = speed / 16
02D2A7  |
02D2A8  |
02D2A9  |
02D2AA /
02D2AB \ If speed was negative...
02D2AD  |
02D2AF  | ...set high bits
02D2B1 /
02D2B3 \ Add to position
02D2B4  |
02D2B6  |
02D2B8  |
02D2B9  |
02D2BC  |
02D2BF /
02D2C3 $1491 = amount sprite was moved
02D2C6 Return
02D2C7  Unreachable
02D2C9  \ Save Mario's position
02D2CB   |
02D2CC   |
02D2CE   |
02D2CF   |
02D2D1   |
02D2D2   |
02D2D4  /
02D2D5  \ Mario's position = Sprite position
02D2D8   |
02D2DA   |
02D2DD   |
02D2DF   |
02D2E2   |
02D2E4   |
02D2E7  /
02D2EE  \ Restore Mario's position
02D2EF   |
02D2F1   |
02D2F2   |
02D2F4   |
02D2F5   |
02D2F7   |
02D2F8  /
02D2FA  Return
02D373 Return
02D3D5 Y = Index into sprite OAM
02D3E6 Return
02D3E9 Return
02D421 Return
02D442 Sprite Y Speed = 0
02D444 Return
02D451 Return
02D454 Return
02D46F  \ Set ground shake timer
02D471  /
02D474 \ Play sound effect
02D476 /
02D480 Return
02D488 Return
02D49B Return
02D4DB Return
02D4E4 Return
02D4F1 Return
02D50B Return
02D51D Return
02D5A3 Return
02D629 Return
02D686 X = Sprite index
02D800 TODO: does this actually act as data? consult trace
02D806 Return
02D83F Return
02D86F Return
02D8A0 Return
02D8B4 Return
02D8CB Y = Index into sprite OAM
02D8FD \ Sprite status = Normal
02D8FF /
02D918 \ Play sound effect
02D91A /
02D977 Return
02D9A0 Return
02DA59 Return
02DA80 \ Increment $1570,x 3 out of every 4 frames
02DA82  |
02DA84  |
02DA86 /
02DA97 \ Don't throw if...
02DA9A  | ...not yet time
02DA9D  | ...sprite offscreen
02DAA0  |
02DAA3  | ...we just threw one
02DAA6 /
02DAA8 \ Set minimum time in between throws
02DAAA /
02DAAD \ $00 = Hammer X speed,
02DAAF  | based on sprite's direction
02DAB2  |
02DAB4  |
02DAB6 /
02DAB8 \ Find a free extended sprite slots
02DABA  |
02DABD  |
02DABF  |
02DAC0  |
02DAC2 / Return if no free slots
02DAC3 \ Extended sprite = Hammer
02DAC5 /
02DAC8 \ Hammer X pos = sprite X pos
02DACA  |
02DACD  |
02DAD0 /
02DAD3 \ Hammer Y pos = sprite Y pos
02DAD5  |
02DAD8  |
02DADB /
02DADE \ Hammer Y speed = #$D0
02DAE0 /
02DAE3 \ Hammer X speed = $00
02DAE5 /
02DAE8 Return
02DB53 Return
02DB5C Draw sprite
02DB5F \ $1594 = #$FF
02DB61 /
02DB64 \ Check sprite slots 0-9 for Hammer Brother
02DB66  |
02DB69  |
02DB6B  |
02DB6D  |
02DB70  |
02DB72  |
02DB74  |
02DB75  |
02DB77 / Branch if no Hammer Brother
02DB79 \ $1594 = index of Hammer Bro
02DB7A /
02DB7D \ Hammer Bro X postion = Platform X position
02DB7F  |
02DB82  |
02DB85 /
02DB88 \ Hammer Bro Y position = Platform Y position - #$10
02DB8A  |
02DB8B  |
02DB8D  |
02DB90  |
02DB93  |
02DB95 /
02DB98 \ Draw Hammer Bro
02DB99  |
02DB9A  |
02DB9D /
02DBFD \ Sprite status = Killed
02DBFF /
02DC0E Return
02DC50 Y = Index into sprite OAM
02DCB6 Return
02DCD0 \ Branch if not on ground
02DCD3  |
02DCD5 /
02DCD7 Sprite Y Speed = 0
02DCD9 Sprite X Speed = 0
02DCE9 Return
02DCFE Return
02DD0B Return
02DD44 Return
02DD4A Return
02DD5F  \ Set ground shake timer
02DD61  /
02DD64 \ Play sound effect
02DD66 /
02DD80 Return
02DD8E Return
02DD8F  \ Return if no free slots
02DD93 /
02DD95  \ Sprite = Lightning
02DD97  /
02DD9A \ Sprite status = Normal
02DD9C /
02DD9F  \ Lightning X position = Sprite X position + #$04
02DDA1   |
02DDA3   |
02DDA6   |
02DDA9   |
02DDAB  /
02DDAE  \ Lightning Y position = Sprite Y position
02DDB0   |
02DDB3   |
02DDB6  /
02DDBA  \ Reset sprite tables
02DDBB  /
02DDBF  \ $1FE2,x = #$10
02DDC1  / Time to not interact with ground??
02DDC5 Return
02DE4D Y = Index into sprite OAM
02DEAF Return
02DEC5 \ Branch if not on ground
02DEC8  |
02DECA /
02DECC \ Play sound effect
02DECE /
02DEF0 Y = Index into sprite OAM
02DEFB Return
02DF21 Return
02DF8A Return
02DF92 Return
02DFB3 \ Branch if not on ground
02DFB6  |
02DFB8 /
02DFBA Sprite Y Speed = 0
02DFC8 Return
02DFD5 Return
02DFDE Return
02DFEE Return
02E007 Return
02E00E Y = Index into sprite OAM
02E085 \ Find a free extended sprite slot
02E087  |
02E08A  |
02E08C  |
02E08D  |
02E08F / Return if no free slots
02E090 \ Extended sprite = Volcano Lotus fire
02E092 /
02E0C4 Return
02E0CC Return
02E13C Sprite Y Speed = 0
02E158 Return
02E176 Return
02E195 \ Branch if not on ground
02E198  |
02E19A /
02E1A3 Return
02E1C2 \ Find a free extended sprite slot
02E1C4  |
02E1C7  |
02E1C9  |
02E1CA  |
02E1CC / Return if no free slots
02E1CD \ Extended sprite = Piranha fireball
02E1CF /
02E21C Return
02E249 Y = Index into sprite OAM
02E284 / Change music
02E287 Return
02E2C3 \ $9A = Sprite X position
02E2C5  | for block creation
02E2C7  |
02E2CA /
02E2CC \ $98 = Sprite Y position
02E2CE  | for block creation
02E2D0  |
02E2D3 /
02E2D5 \ Block to generate = Coin
02E2D7 /
02E2DD Return
02E2F2 Return
02E302 Return
02E30A Return
02E351 Return
02E3C0 Y = Index into sprite OAM
02E41E Return
02E429 Unreachable instruction
02E462 Return
02E494 Return
02E4A4 Return
02E51F Return
02E536 $9C = tile to generate
02E538 \ $9A = Sprite X position
02E53A  | for block creation
02E53C  |
02E53F /
02E541 \ $98 = Sprite Y position
02E543  | for block creation
02E545  |
02E548 /
02E54A Generate the tile
02E558 Return
02E57D Return
02E5BB Return
02E5F6 Return
02E61C X = Sprite index
02E636 Return
02E672 Wrapper
02E679 Return
02E6C7 Y = Index into sprite OAM
02E726 Return
02E74B Return
02E77B Return
02E787 Return
02E791 Sprite X Speed = 0
02E7A3 Return
02E7B4 Return
02E7BC Return
02E7EF \ Branch if not touching object
02E7F2  |
02E7F4 /
02E808 \ Branch if not on ground
02E80B  |
02E80D /
02E82C Return
02E834 Return
02E871 Return
02E8B9 Return
02E8C9 $9C = tile to generate
02E8CB \ $9A = Sprite X position
02E8CD  | for block creation
02E8CF  |
02E8D2 /
02E8D4 \ $98 = Sprite Y position
02E8D6  | for block creation
02E8D8  |
02E8DB /
02E8DD Generate the tile
02E8E4 $9C = tile to generate
02E8E6 \ $9A = Sprite X position + #$10
02E8E8  | for block creation
02E8E9  |
02E8EB  |
02E8ED  |
02E8F0  |
02E8F2 /
02E8F4 \ $98 = Sprite Y position
02E8F6  | for block creation
02E8F8  |
02E8FB /
02E8FD Generate the tile
02E901 Return
02E93C Return
02E985 Return
02E9A1 Return
02E9B3 Return
02E9CE Return
02E9D4 Return
02E9E1 Return
02EA25 Y = Index into sprite OAM
02EA4D Return
02EA89 Return
02EACD Return
02EAD1 Return
02EAD9 Return
02EAF0 Return
02EAF2 \ Return if no free slots
02EAF6 /
02EAF8 \ Sprite status = Normal
02EAFA /
02EB26 Return
02EB2E Return
02EB48 Return
02EB7C Return
02EBC9 Return
02EBD0 Return
02EBE6 Return
02EC05 Return
02ED24 X = Sprite index
02ED89 Return
02ED93 \ Branch if no free slots
02ED97 /
02ED99 \ Sprite status = Normal
02ED9B /
02EDB3 X = Sprite index
02EDCF Return
02EDD7 Return
02EDDA IF SKULLS DIEING
02EDE2 IF LIVING, DO BELOW
02EDE9 SEARCH OUT OTHERS
02EDED ERASE THEM TOO
02EDF5 Return
02EDFA Y = Index into sprite OAM
02EE4C \ Branch if not on ground
02EE4F  |
02EE51 /
02EE6D X = Sprite index
02EEA8 Return
02EEB0 Return
02EF2A Y = Index into sprite OAM
02EF66 Return
02EF7A Return
02EF7B \ Sprite status = Normal
02EF7D /
02EFA9 Return
02EFB1 \ Find a free extended sprite slot
02EFB3  |
02EFB6  |
02EFB8  |
02EFB9  |
02EFBB / Return if no free slots
02EFBC \ Extended sprite = Cloud game coin
02EFBE /
02EFE9 Return
02F010 Return
02F028 Return
02F030 Return
02F09B \ Branch if touching object
02F09E  |
02F0A0 /
02F0A2 \ Branch if not on ground
02F0A5  |
02F0A7 /
02F102 Return
02F19D X = Sprite index
02F1A5 Y = Index into sprite OAM
02F1C8 Y = Index into sprite OAM
02F228 Y = Index into sprite OAM
02F24F \ Branch if Mario has star
02F252 /
02F26B \ Play sound effect
02F26D /
02F283  Bug: Value should capped at #$08 to prevent wiggler 1up/score glitch.  See wigglerfix.asm
02F295 Return
02F29A Return
02F29D \ Sprite status = Killed
02F29F /
02F2C0 \ Play sound effect
02F2C3 /
02F2C6 Return
02F2D2 Return
02F2D7 \ Find a free extended sprite slot
02F2D9  |
02F2DC  |
02F2DE  |
02F2DF  |
02F2E1 / Return if no free slots
02F2E2 \ Extended sprite = Wiggler flower
02F2E4 /
02F30E Return
02F316 Return
02F370 Return
02F380 Return
02F38E Return
02F38F Sprite Y Speed = 0
02F391 Sprite X Speed = 0
02F3A2 Return
02F3B6 Return
02F3DA Return
02F42B Return
02F433 Return
02F462 Return
02F48D Y = Index into sprite OAM
02F4CC Return
02F4D4 Return
02F4E6 Return
02F53D Return
02F547 Return
02F552 Return
02F558 \ Sprite status = Normal
02F55A /
02F57B Return
02F57C Wrapper
02F583 Return
02F584 Wrapper
02F58B Return
02F58C Wrapper
02F593 Return
02F59D Return
02F618 Return
02F66D Return
02F67A \ Play sound effect
02F67C /
02F683 \ Play sound effect
02F685 /
02F69F Return
02F6F0 Return
02F765 \ Play sound effect
02F767 /
02F76E \ Play sound effect
02F770 /
02F807 Return
02F808 Wrapper
02F80F Return
02F820 Return
02F864 Return
02F8FB Return
02F93B Return
02F93F Return
02F9A5 Return
02F9A9 Return
02F9F0 \ Branch if Mario has star
02F9F3 /
02F9FE Return
02FA83 Return
02FAA3 Return
02FAE9  Allow sprite to be reloaded by level loading routine
02FB79 X = Sprite index
02FBBA Return
02FC3E X = Sprite index
02FCD8 Return
02FCE1 Return
02FDB7 Return
02FE70 Return
02FE75 Unreachable instruction
02FEC4 Return
02FECD \ Unreachable
02FF15  \ Allow sprite to be reloaded by level loading routine
02FF17  /
02FF1D / Return
02FF1E \ Unreachable, called from above routine
02FF4E /
02FF97 Return
02FFA2 Return
02FFD0 Return
02FFE1 Return
038031 \ Branch if not touching object
038034  |
038036 /
038046 Sprite Y Speed = 0
038048 \ Branch if not on ground
03804B  |
03804D /
038086 Return
03809E / Change music
0380A1 Return
0380D4 Return
0380E9 \ Play sound effect
0380EB /
0380F9 Return
03818A Return
0381AD Return
0381BB Return
0381D2 Return
0381D3 \ Sprite status = Killed
0381D5 /
0381D8 Sprite X Speed = 0
0381DE \ Play sound effect
0381E0 /
0381E3 Return
0381F4 Return
038233 \ Play sound effect
038235 /
038238 Return
03827C X = Sprite index
03827F Return
038398 Wrapper
03839F Return
0383C1 Return
03842D X = Sprite index
03843C Y = Index into sprite OAM
038453 Return
038489 Return
0384C3 Return
0384CE Y = Index into sprite OAM
0384F4 Return
03852A Return
038551 \ Branch if at max speed
038553  |
038556 /
038558 \ Otherwise, accelerate
038559  |
03855C /
038586 Return
0385F3 Return
038675 Return
0386AB Y = Index into sprite OAM
0386FE Return
03870F  \
038712   | Allow sprite to be reloaded by level loading routine
038714  /
03871A Return
038733 Return
03876D Return
038770 Graphics routine
038773 \
038776  | If status != 8, return
038778 /
03877A Handle off screen situation
03877D \ Set x speed based on direction
038780  |
038783 /
038785 \ If sprites locked, return
038787 /
03878F Update position based on speed values
038793 Interact with other sprites
038797 \ Branch if not on ground
03879A  |
03879C /
03879E Sprite Y Speed = 0
0387B0 Sprite Y Speed = 0
0387B2 \
0387B5 | If Mega Mole is in contact with an object...
0387B8 |
0387BA |
0387BC |    ... and timer hasn't been set (time until flip == 0)...
0387BE |
0387C0 |    ... set time until flip
0387C2 /
0387C5 \ Flip the temp direction status
0387C8 |
0387CA /
0387CD \ If time until flip == 0...
0387CF |
0387D1 |    ...update the direction status used by the gfx routine
0387D4 /
0387D7 Check for mario/Mega Mole contact
0387DB (Carry set = contact)
0387EA \ Set "on sprite" flag
0387EC /
0387EF \ Set riding Mega Mole
0387F1 /
0387F4 Y speed = 0
0387F6 \
0387F8 | Mario's y position += C6 or D6 depending if on yoshi
0387FB |
0387FD |
0387FF |
038800 |
038802 |
038804 |
038807 |
038809 /
03880B \
03880D | $1491 == 01 or FF, depending on direction
038810 | Set mario's new x position
038812 |
038813 |
038814 |
038816 |
038818 |
038819 |
03881B  /
03881D Return
03881E \ If riding Mega Mole...
038821 |   ...or Mega Mole being eaten...
038824 /   ...return
038826 Hurt mario
03882A Final return
038842 \ $02 = direction
038845 /
038847 \
038849 |
03884A |
03884B |
03884C |
03884D |
038850 |
038852 |
038853 |
038854 | $03 = index to frame start (0 or 4)
038856 /
038857 Run loop 4 times, cuz 4 tiles per frame
038859 Push, current tile
03885A \
03885C | If facing right, index to frame end += 4
03885E |
03885F |
038860 |
038861 /
038862 \ Tile x position = sprite x location ($00) + tile displacement
038864 |
038865 |
038868 /
03886B \ Pull, X = index to frame end
03886C |
03886E | Tile y position = sprite y location ($01) + tile displacement
03886F |
038872 /
038875 \ Set current tile
038876 | X = index of frame start + current tile
038877 |
038878 |
03887A |
03887B |
03887E /
038881 Tile properties xyppccct, format
038883 \ If direction == 0...
038885 |
038887 /    ...flip tile
038889 Add in tile priority of level
03888B Store tile properties
03888E \ Pull, current tile
03888F | Increase index to sprite tile map ($300)...
038890 |    ...we wrote 4 bytes
038891 |    ...so increment 4 times
038892 |
038893 | Go to next tile of frame and loop
038894 /
038896 Pull, X = sprite index
038897 \ Will write 02 to $0460 (all 16x16 tiles)
038899 | A = number of tiles drawn - 1
03889B / Don't draw if offscreen
03889F Return
0388A7 Y = Index into sprite OAM
0388DF Return
0388FF \ Play sound effect
038901 /
038904 Return
038935 Return
038968 Y = Index into sprite OAM
0389A8 \ Branch if not on ground
0389AB  |
0389AD /
0389E2 Return
0389EB Return
0389FE Return
038A20 Return
038A3B Return
038A5F \ Branch if not on ground
038A62  |
038A64 /
038A66 Sprite Y Speed = 0
038A68 Return
038A83 \ Branch if not touching object
038A86  |
038A88 /
038A99 \ Branch if not on ground
038A9C  |
038A9E /
038AA4 Sprite X Speed = 0
038ABE Return
038AC6 Return
038AD4 \ Return if no free slots
038AD8 /
038ADA \ Play sound effect
038ADC /
038ADF \ Sprite status = Normal
038AE1 /
038AE4  \ Sprite = Bowser Statue Fireball
038AE6  /
038B08  \ Reset sprite tables
038B09   |
038B0D  /
038B24 Return
038BA9 Return
038C2E Return
038CE3 Return
038D0B Return
038D65 Return
038D7D \ Play sound effect
038D7F /
038DAC Y = Index into sprite OAM
038DBA Return
038DEF Return
038DFE Return
038E70 Return
038EA7 Return
038EE9 Return
038F06 Return
038F6C Return
038F88 Y = Index into sprite OAM
038FCE \ Branch if not touching object
038FD1  |
038FD3 /
038FF1 Return
03900D Y = Index into sprite OAM
03901F Return
03905C Return
0390A2 \ If not at max X speed, accelerate
0390A4  |
0390A7  |
0390A9  |
0390AA  |
0390AD /
0390EA Return
03912D Return
039213 Return
039218 Y = Index into sprite OAM
03924C Sprite Y Speed = 0
039261 Return
03926B Return
03926C Sprite Y Speed = 0
03926E Return
039288 Y = Index into sprite OAM
0392B8 \ Play sound effect
0392BA /
03932B Return
039386 Return
03938A Return
03938B $9C = tile to generate
03938D \ $9A = Sprite X position
03938F  | for block creation
039391  |
039394 /
039396 \ $98 = Sprite Y position
039398  | for block creation
03939A  |
03939D /
03939F Generate the tile
0393A3 Return
039440 Return
039457 Return
039462 Return
039468 Goto next state
03946A Return
03946B \ If stall timer us up,
03946E  | reset it to #$2F...
039470  |
039472  | ...and goto next state
039474 /
039483 Return
03949E Return
0394B0 Return
0394D2 \ Set $02 based on sprite number
0394D4  |
0394D6  |
0394D8  |
0394DA  |
0394DC /
0394DF Draw 4 tiles:
0394E7 \ Set X
0394E9 /
0394EC \ Set Y
0394EE  |
0394EF  |
0394F2 /
0394F5 \ Set tile
0394F8 /
0394FB \ Set gfs properties
0394FE /
039501 \ We wrote 4 times, so increase index by 4
039502  |
039503  |
039504 /
03950A \ Wrote 5 16x16 tiles...
03950C  |
03950E /
039512 Return
039517 Draw Rex gfx
03951A \ If Rex status != 8...
03951D  |   ... not (killed with spin jump [4] or star [2])
03951F /    ... return
039521 \ If sprites locked...
039523 /    ... return
039525 \ If Rex not defeated (timer to show remains > 0)...
039528 /    ... goto RexAlive
03952A \
03952D  |   If Rex remains don't disappear next frame...
03952E /    ... return
039530 This is the last frame to show remains, so set Rex status = 0
039533 Return
039534 Only process Rex while on screen
039537 Increment number of frames Rex has been on sc
03953A \ Calculate which frame to show:
03953D  |
03953E  |
03953F  | Number of hits determines if smushed
039541  |
039543  | Update every 8 cycles if smushed
039545  |
039546  | Show smushed frame
039548  |
03954A  |
03954B  | Update every 16 cycles if normal
03954D / Write frame to show
039550 \  If sprite is not on ground...
039553  |    ...(4 = on ground) ...
039555 /     ...goto IN_AIR
039557 \  Y speed = 10
039559 /
03955B Load, y = Rex direction, as index for speed
03955E \ If hits on Rex == 0...
039560 /    ...goto DONT_ADJUST_SPEED
039562 \ Increment y twice...
039563 /    ...in order to get speed for smushed Rex
039564 \ Load x speed from ROM...
039567 /    ...and store it
039569 \ If time to show half-smushed Rex > 0...
03956C /    ...goto HALF_SMUSHED
03956E Update position based on speed values
039572 \ If Rex is touching the side of an object...
039575  |
039577  |
039579  |
03957C  |    ... change Rex direction
03957E /
039581 Interact with other sprites
039585 Check for mario/Rex contact
039589 (carry set = mario/Rex contact)
03958B \ If mario star timer > 0 ...
03958E /    ... goto HAS_STAR
039590 \ If Rex invincibility timer > 0 ...
039593 /    ... goto NO_CONTACT
039595 \ Rex invincibility timer = $08
039597 /
03959A \  If mario's y speed < 10 ...
03959C  |   ... Rex will hurt mario
03959E /
0395A0 Give mario points
0395A3 Set mario speed
0395A7 Display contact graphic
0395AB \  If mario is spin jumping...
0395AE  |    ... or on yoshi ...
0395B1 /     ... goto SPIN_KILL
0395B3 Increment Rex hit counter
0395B5 \  If Rex hit counter == 2
0395B7  |
0395B9  |
0395BB  |    ... time to show defeated Rex = $20
0395BD /
0395C0 Return
0395C1 \ Time to show semi-squashed Rex = $0C
0395C3 /
0395C6 Change clipping area for squashed Rex
0395C9 Return
0395CA \ If mario is invincible...
0395CD  |  ... or mario on yoshi...
0395D0 /   ... return
0395D2 \  Set new Rex direction
0395D5  |
0395D6 /
0395D9 Hurt mario
0395DD Return
0395DE \ Rex status = 4 (being killed by spin jump)
0395E0 /
0395E3 \ Set spin jump animation timer
0395E5 /
0395E8 Show star animation
0395EC \
0395EE / Play sound effect
0395F1 Return
0395F2 \ Rex status = 2 (being killed by star)
0395F4 /
0395F7 \ Set y speed
0395F9 /
0395FB Get new Rex direction
0395FE \ Set x speed based on Rex direction
039601 /
039603 Increment number consecutive enemies killed
039606 \
039609  | If consecutive enemies stomped >= 8, reset to 8
03960B  |
03960D  |
03960F /
039612 Give mario points
039616 \
039619  | If consecutive enemies stomped < 8 ...
03961B  |
03961D  |    ... play sound effect
039620 /
039623 Return
039630 Increase consecutive enemies stomped
039635 \ If consecutive enemies stomped >= 8 ...
039637 /    ... don't play sound
039639 \
03963C / Play sound effect
03963F \
039640  | If consecutive enemies stomped >= 8, reset to 8
039642  |
039644 /
039646 Give mario points
03964B Return
03967E \ If time to show Rex remains > 0...
039681  |
039683  |    ...set Rex frame = 5 (fully squashed)
039685 /
039688 \ If time to show half smushed Rex > 0...
03968B  |
03968D  |    ...set Rex frame = 2 (half smushed)
03968F /
039692 Y = index to sprite tile map, $00 = sprite x, $01 = sprite y
039695 \
039698  | $03 = index to frame start (frame to show * 2 tile per frame)
039699 /
03969B \ $02 = sprite direction
03969E /
0396A0 Push sprite index
0396A1 Loop counter = (number of tiles per frame) - 1
0396A3 Push current tile number
0396A4 \ X = index to horizontal displacement
0396A5 / get index of tile (index to first tile of frame + current tile number)
0396A7 Push index of current tile
0396A8 \ If facing right...
0396AA  |
0396AC  |
0396AD /    ...use row 2 of horizontal tile displacement table
0396AF \
0396B0  | Tile x position = sprite x location ($00) + tile displacement
0396B2  |
0396B3  |
0396B6 /
0396B9 \ Pull, X = index to vertical displacement and tilemap
0396BA  | Tile y position = sprite y location ($01) + tile displacement
0396BC  |
0396BD  |
0396C0 /
0396C3 \ Store tile
0396C6 /
0396C9 \
0396CB  | Get tile properties using sprite direction
0396CE  | Level properties
0396D0 / Store tile properties
0396D3 \ Get index to sprite property map ($460)...
0396D4  |    ...we use the sprite OAM index...
0396D5  |    ...and divide by 4 because a 16x16 tile is 4 8x8 tiles
0396D6  | If index of frame start is > 0A
0396D8  |
0396DA  |
0396DB  |     ...show only an 8x8 tile
0396DD  |
0396DF  | Else show a full 16 x 16 tile
0396E1 /
0396E4 \ Pull, X = current tile of the frame we're drawing
0396E5  | Increase index to sprite tile map ($300)...
0396E6  |    ...we wrote 4 times...
0396E7  |    ...so increment 4 times
0396E8  |
0396E9  | Go to next tile of frame and loop
0396EA /
0396EC Pull, X = sprite index
0396ED \ FF because we already wrote size to $0460
0396EF  | A = number of tiles drawn - 1
0396F1 / Don't draw if offscreen
0396F5 Return
03972A Return
039755 Return
03975D Return
039772 Return
039775 Return
03977D Return
039790 Y = Index into sprite OAM
0397F8 Return
039871 Return
039885 Return
039886 (0-1FF: 000 = 6 0'clock, 080 = 9 o'clock,
03988A 100 = 12 o'clock, 180 = 3 o'clock)
03989F Break bridge when necessary
0398A3 \ Set radius for Reznor sign rotation
0398A5  |
0398A7 /
0398AB \ X position of Reznor sign
0398AD  |
0398AF /
0398B2 \ Y position of Reznor sign
0398B4  |
0398B6 /
0398BE Applies position changes to Reznor sign
0398C2 Pull, X = sprite index
0398C5 \ Rotate 1 frame around the circle (clockwise)
0398C7  | $37,36 = 0 to 1FF, denotes circle position
0398C8  |
0398CB  |
0398CE /
0398D6 \ Branch if timer to trigger level isn't set
0398D9 /
0398DE Prevent mario from walking at level end
0398E1 \ Set time before return to overworld
0398E3 /
0398E6 \
0398E8 / Play sound effect
0398EB Return
0398EC \
0398EF  |
0398F0  |
0398F3  |
0398F6  |
0398F9  |
0398FB  |
0398FD  | Set time to trigger level if all Reznors are dead
0398FF /
039906 \ Zero out extended sprite table
039908  |
03990A  |
03990D  |
03990E /
03991A \ Load Y with Reznor number (0-3)
03991B  |
03991D /
03991E \
039920  |
039921  |
039924  | $01,00 = 0-1FF, position Reznors on the circle
039926  |
039928  |
03992B  |
03992D /
03992F \   Index (16 bit) Accum (16 bit)
039931  | Make Reznors turn clockwise rather than counter clockwise
039933  | ($01,00 = -1 * $01,00)
039936  |
039937 /
0399A4 X = sprite index
0399E9 \ If a Reznor is dead, make it's platform standable
0399EC  |
0399EE  |
0399F2 /
0399F5 \ Don't try to spit fire if turning
0399F7  |
0399F9  |
0399FC /
039A0B \ Set time to show firing graphic = 0A
039A0D /
039A19 Firing
039A1C Turning
039A21 \ if direction has changed since last frame...
039A24  |
039A25  |
039A28  |
039A29  |
039A2C  |
039A2D  |
039A30  |
039A32  | ...set time to show turning graphic = 0A
039A34 /
039A37 \ If disable interaction timer > 0, just draw Reznor
039A3A /
039A3C \ Interact with mario
039A40 / If no contact, just draw Reznor
039A42 \ Disable interaction timer = 08
039A44 / (eg. after hitting Reznor, or getting bounced by platform)
039A47 \ Compare y positions to see if mario hit Reznor
039A49  |
039A4A  |
039A4C  |
039A4E /
039A50 \ See if mario hit side of the platform
039A52  |
039A54  |
039A56 /
039A58 ??Something about boosting mario on platform??
039A5D \ Time to bounce platform = 0F
039A5F /
039A62 \ Set mario's y speed to rebound down off platform
039A64 /
039A66 \
039A68 / Play sound effect
039A6D \ Set mario to bounce back
039A70  | (hit side of platform?)
039A73  |
039A75 /
039A77 Hurt Mario
039A7B Set normal image
039A90 \ Set turning image
039A92 /
039A95 \ Shoot fire if "time to show firing image" == 20
039A98  |
039A9A  | (shows image for 20 frames after the fireball is shot)
039A9C  |
039A9E /
039AA1 \ Set firing image
039AA3 /
039AA6 Draw Reznor
039AAD \ If sprites locked, or mario already killed the Reznor on the platform, return
039AAF  |
039AB2 /
039AB4 \ If time to bounce platform != 0C, return
039AB7  | (causes delay between start of boucing platform and killing Reznor)
039AB9 /
039ABB \
039ABD / Play sound effect
039AC0 Prevent from throwing fire after death
039AC3 Record a hit on Reznor
039AC6 \ Load Y with a free sprite index for dead Reznor
039ACA / Return if no free index
039ACC \ Set status to being killed
039ACE /
039AD1 \ Sprite to use for dead Reznor
039AD3 /
039AD6 \ Transfer x position to dead Reznor
039AD8  |
039ADB  |
039ADE /
039AE1 \ Transfer y position to dead Reznor
039AE3  |
039AE6  |
039AE9 /
039AEC \
039AED  | Before: X must have index of sprite being generated
039AEE /  Routine clears all old sprite values and loads in new values for the 6 main sprite tables
039AF2 \ Set y speed for Reznor's bounce off the platform
039AF4 /
039AF6 pull, X = sprite index
039AF7 Return
039AF8 \ find a free extended sprite slot, return if all full
039AFA  |
039AFD  |
039AFF  |
039B00  |
039B02 / Return if no free slots
039B03 \
039B05 / Play sound effect
039B08 \ Extended sprite = Reznor fireball
039B0A /
039B50 Return
039B75 \ if the reznor is dead, only draw the platform
039B78 /
039B7A after: Y = index to sprite tile map, $00 = sprite x, $01 = sprite y
039B7D \ $03 = index to frame start (frame to show * 4 tiles per frame)
039B80  |
039B81  |
039B82 /
039B84 \ $02 = direction index
039B87  |
039B88  |
039B89 /
039BB1 \ set tile
039BB4 /
039BB7 \ set palette/properties
039BBA  | if turning, don't flip
039BBC  |
039BBE  | if direction = 0, don't flip
039BC0  |
039BC2  |
039BC4 /
039BC7 \ pull, X = current tile of the frame we're drawing
039BC8  | Increase index to sprite tile map ($300)...
039BC9  |    ...we wrote 4 bytes...
039BCA  |    ...so increment 4 times
039BCB  |
039BCC  | Go to next tile of frame and loop
039BCD /
039BCF \
039BD0  | Y = 02 (All 16x16 tiles)
039BD2  | A = number of tiles drawn - 1
039BD4 / Don't draw if offscreen
039BE2 Return
039C19 \ Tile of reznor platform...
039C1B  | ...store left side
039C1E /  ...store right side
039C21 \ Palette of reznor platform...
039C23  |
039C26  | ...flip right side
039C28 /
039C2B \
039C2D  | A = number of tiles drawn - 1
039C2F / Don't draw if offscreen
039C33 Return
039C34 \ Branch if sprite isn't "Invisible solid block"
039C36  |
039C38 /
039C3A \ Call "Invisible solid block" routine
039C3E / Return
039C46 Return
039C7A \ Branch if not touching object
039C7D  |
039C7F /
039CA3 Return
039CA8 \ Branch if not on ground
039CAB  |
039CAD /
039CBA \ Set fire breathing timer
039CBC /
039CD3 \ If not facing mario, change directions
039CD6  |
039CD7 /
039CDE \ Set x speed for rhino based on direction and sprite number
039CE1  |
039CE3  |
039CE5  |
039CE7  |
039CE8  |
039CE9  |
039CEC /
039CF1 \ Branch if not touching object
039CF4  |
039CF6 /
039D00 Return
039D41 Sprite X Speed = 0
039D55 \ Play sound effect
039D57 /
039D94 \ Branch if Mario has star
039D97 /
039D9D Return
039DEE Return
039DFD Return
039EA8 Return
039F31 Return
039F56 Return
039F8A Return
039F98 Sprite Y Speed = 0
039F9A Return
039FA3 Return
039FB0 Return
039FC7 Return
039FD5 Return
039FEC Return
039FFA \ Play sound effect
039FFC /
03A044 Return
03A061 Return
03A071 Y = Index into sprite OAM
03A081 Return
03A0F0 Return
03A117 Return
03A125 Return
03A12E Return
03A137 Return
03A140 Return
03A149 Return
03A152 Return
03A15B Return
03A164 Return
03A16D Return
03A176 Return
03A17F Return
03A188 Return
03A191 Return
03A19A Return
03A1A3 Return
03A1AC Return
03A1B5 Return
03A1C2 Return
03A1CB Return
03A1D4 Return
03A1DD Return
03A1E6 Return
03A1F1 Return
03A1FA Return
03A203 Return
03A20C Return
03A215 Return
03A222 Return
03A22B Return
03A234 Return
03A23D Return
03A246 Return
03A24F Return
03A258 Return
03A264 Return
03A340 Return
03A436 Return
03A454 Sprite X Speed = 0
03A464 Return
03A465 Sprite Y Speed = 0
03A467 Sprite X Speed = 0
03A47B Return
03A481 Return
03A48F Return
03A4D1 Return
03A4EA Return
03A4FC Return
03A52C Return
03A5BC Return
03A5D0 \ Play sound effect
03A5D2 /
03A5D7 Return
03A603 \ Play sound effect
03A605 /
03A60D Return
03A61C Return
03A64C Return
03A6BF Return
03A6C5 Sprite X Speed = 0
03A6C7 Return
03A6E2 \ Sprite status = Killed by spin jump
03A6E4 /
03A6E7  \ Time to show cloud of smoke = #$1F
03A6E9  /
03A6EF Return
03A703 / Change music
03A711 Sprite X Speed = 0
03A713 Sprite Y Speed = 0
03A71E Return
03A7A9 / Change music
03A7AC Return
03A7C3 / Change music
03A7DE Return
03A7F5 Return
03A7F6 \ Play sound effect
03A7F8 /
03A7FB \ Sprite status = Normal
03A7FD /
03A83D / Play sound effect
03A840 Return
03A84B Sprite Y Speed = 0
03A86D Return
03A877 Sprite X Speed = 0
03A879 Sprite Y Speed = 0
03A88E / Change music
03A89C Return
03A8A4 Sprite X Speed = 0
03A8A6 Sprite Y Speed = 0
03A8AD Return
03A8B2 \ Play sound effect
03A8B4 /
03A8BD Return
03A8E2 Return
03A8E3 \ Play sound effect
03A8E5 /
03A8E8 \ Sprite status = Normal
03A8EA /
03A92D Return
03AAF3 X = Sprite index
03AB14 Return
03AB61 Return
03AB8C \ Play sound effect
03AB8E /
03AB99  \ Set ground shake timer
03AB9B  /
03AB9E Return
03ABBD Return
03ABC1 Sprite X Speed = 0
03ABC3 Sprite Y Speed = 0
03ABEA Return
03ABF5 / Change music
03AC02 Return
03AC4C Return
03AC54 / Change music
03AC62 Return
03AC92 Return
03AD18 Sprite X Speed = 0
03AD5A Sprite Y Speed = 0
03AD73 Return
03ADB2 Return
03ADCB Return
03ADD8 Return
03AE13 Return
03AE24 Return
03AE31 Return
03AE5A Return
03AEC7 Return
03AECF Return
03AED7 Return
03AF33 Return
03AFE0 Y = Index into sprite OAM
03B012 Return
03B02A Return
03B02B \ Sprite status = Normal
03B02D /
03B073 Return
03B0B8 \ Play sound effect
03B0BA /
03B0DB Return
03B0F2 Return
03B129 \ Play sound effect
03B12B /
03B155 \ Sprite status = Killed
03B157 /
03B160 Return
03B1A3 \ Play sound effect
03B1A5 /
03B1A8  \ Set ground shake timer
03B1AA  /
03B1B1 \ Play sound effect
03B1B3 /
03B1D4 Return
03B261 Y = Index into sprite OAM
03B2A6 Return
03B2C3 \ Branch if not on ground
03B2C6  |
03B2C8 /
03B2CA Sprite Y Speed = 0
03B2E3 \ Branch if not touching object
03B2E6  |
03B2E8 /
03B306 Return
03B307 Wrapper
03B30E Return
03B3EE Return
03B43B Return
03B442 Return
03B48B Return
03B56B Return
03B665 \
03B667  |
03B668  |
03B66A  | $00 = (Mario X position + #$02) Low byte
03B66C  |
03B66E  |
03B670 / $08 = (Mario X position + #$02) High byte
03B672 \ $06 = Clipping width X (#$0C)
03B674 /
03B676 \ If mario small or ducking, X = #$01
03B678  | else, X = #$00
03B67A  |
03B67C  |
03B67E  |
03B680 /
03B681 \ If on Yoshi, X += #$02
03B684  |
03B686  |
03B687 /
03B688 \ $03 = Clipping height
03B68C /
03B68E \
03B690  |
03B691  |
03B695  | $01 = (Mario Y position + displacement) Low byte
03B697  |
03B699  |
03B69B / $09 = (Mario Y position + displacement) High byte
03B69E Return
03B6A1 Y = Sprite index
03B6A2 \ X = Clipping table index
03B6A5  |
03B6A7 /
03B6A8 \
03B6AA  | Load low byte of X displacement
03B6AE  |
03B6B0  | $0F = High byte of X displacement
03B6B2  |
03B6B3  |
03B6B6  | $04 = (Sprite X position + displacement) Low byte
03B6B8  |
03B6BB  |
03B6BD / $0A = (Sprite X position + displacement) High byte
03B6BF \ $06 = Clipping width
03B6C3 /
03B6C5 \
03B6C7  | Load low byte of Y displacement
03B6CB  |
03B6CD  | $0F = High byte of Y displacement
03B6CF  |
03B6D0  |
03B6D3  | $05 = (Sprite Y position + displacement) Low byte
03B6D5  |
03B6D8  |
03B6DA / $0B = (Sprite Y position + displacement) High byte
03B6DC \ $07 = Clipping height
03B6E0 /
03B6E2 X = Sprite index
03B6E4 Return
03B6E7 Y = Sprite index
03B6E8 \ X = Clipping table index
03B6EB  |
03B6ED /
03B6EE \
03B6F0  | Load low byte of X displacement
03B6F4  |
03B6F6  | $0F = High byte of X displacement
03B6F8  |
03B6F9  |
03B6FC  | $00 = (Sprite X position + displacement) Low byte
03B6FE  |
03B701  |
03B703 / $08 = (Sprite X position + displacement) High byte
03B705 \ $02 = Clipping width
03B709 /
03B70B \
03B70D  | Load low byte of Y displacement
03B711  |
03B713  | $0F = High byte of Y displacement
03B715  |
03B716  |
03B719  | $01 = (Sprite Y position + displacement) Low byte
03B71B  |
03B71E  |
03B720 / $09 = (Sprite Y position + displacement) High byte
03B722 \ $03 = Clipping height
03B726 /
03B728 X = Sprite index
03B72A Return
03B75B Return
03B760 Reset sprite offscreen flag, vertical
03B763 Reset sprite offscreen flag, horizontal
03B766 \
03B768  | Set horizontal offscreen if necessary
03B76A  |
03B76D  |
03B76F  |
03B771 /
03B774 \
03B777  | Mark sprite invalid if far enough off screen
03B778  |
03B77C  |
03B77D  |
03B77F  |
03B780  |
03B783  |
03B788  |
03B789  |
03B78B  |
03B78E /
03B790 \ set up loop:
03B792  |
03B795  | if not smushed (1662 & 0x20), go through loop twice
03B797  | else, go through loop once
03B799 /
03B79A \
03B79C  | set vertical offscree
03B79D  |
03B7A0  |
03B7A1  | (vert screen boundry)
03B7A3  |
03B7A5  |
03B7A6  |
03B7A9  |
03B7AB  |
03B7AD  |
03B7AF  |
03B7B1  | (vert offscreen)
03B7B4  |
03B7B7  |
03B7BA  |
03B7BB /
03B7BD get offset to sprite OAM
03B7C0 \
03B7C2  |
03B7C3  |
03B7C5 / $00 = sprite x position relative to screen boarder
03B7C7 \
03B7C9  |
03B7CA  |
03B7CC / $01 = sprite y position relative to screen boarder
03B7CE Return
03B7CF \ Return from *main gfx routine* subroutine...
03B7D0  |    ...(not just this subroutine)
03B7D1 /
03B7FB Sprite Y Speed = 0
03B816 Return
03B828 Return
03B83A Return
03B84F \ Entry point of routine determines value of $03
03B851  |
03B853  |
03B855  |
03B857  |
03B859  |
03B85B  |
03B85D /
03B85F \ if sprite is not off screen, return
03B862 /
03B864 \  vertical level
03B866  |
03B868 /
03B86A \
03B86C  |
03B86D  | if the sprite has gone off the bottom of the level...
03B86F  | (if adding 0x50 to the sprite y position would make the high byte >= 2)
03B872  |
03B874  |
03B876 /    ...erase the sprite
03B878 \ if "process offscreen" flag is set, return
03B87B  |
03B87D /
03B8AC \ If sprite status < 8, permanently erase sprite
03B8AF  |
03B8B1 /
03B8B3  \ Branch if should permanently erase sprite
03B8B6   |
03B8B8  /
03B8BA  \ Allow sprite to be reloaded by level loading routine
03B8BC  /
03B8C2 Return
03B8C3 \ If "process offscreen" flag is set, return
03B8C6  |
03B8C8 /
03B8CA \ Return every other frame
03B8CC  |
03B8CD /
03B8FB \ If sprite is on screen, A = 0
03B8FE  |
03B901 / Return
03C000 $9C = tile to generate
03C002 \ $9A = Sprite X position + #$08
03C004  | for block creation
03C005  |
03C007  |
03C009  |
03C00C  |
03C00E /
03C010 \ $98 = Sprite Y position + #$08
03C012  | for block creation
03C013  |
03C015  |
03C017  |
03C01A  |
03C01C /
03C01E Generate the tile
03C022 Return
03C023 Wrapper
03C02A Return
03C037 \ Play sound effect
03C039 /
03C05F No Yoshi wing ability
03C067 \ Sprite status = Normal
03C069 /
03C06C \ Play sound effect
03C06E /
03C09A Return
03C0B1 Return
03C111 Return
03C11E \ If sprites locked...
03C120  | ...or battle is over (set to FF when over)...
03C123 / ...return
03C125 \ If platform at a maximum tilt, (stationary timer > 0)
03C128  |
03C12A / decrement stationary timer
03C12D \ Return every other time through...
03C12F  |
03C131  | ...return if stationary
03C134 /
03C136 $1907 holds the total number of tilts made
03C139 \ X=1 if platform tilted up to the right (/)...
03C13B / ...else X=0
03C13C $1907 holds the current phase: 0/ 1\ 2/ 3\ 4// 5\\
03C13F \ If this is phase 4 or 5...
03C141  | ...cause a steep tilt by setting X=X+2
03C143  |
03C144 /
03C145 $36 is tilt of platform: //D8 /E8 -0- 18\ 28\\
03C147 \ Get new tilt of platform by adding value
03C148  |
03C14C /
03C14F $37 is boolean tilt of platform: 0\ /1
03C151 \ if tilted up to left,  $37=0
03C155  | if tilted up to right, $37=1
03C157 /
03C15A \ Return if platform not at a maximum tilt
03C15E /
03C160 Increment total number of tilts made
03C163 \ Set timer to stay stationary
03C165 /
03C168 Increment phase
03C16B \ If phase > 5, phase = 0
03C16E  |
03C170  |
03C172 /
03C175 Return
03C1EB Return
03C209 \ Play sound effect
03C20B /
03C244 Y = Index into sprite OAM
03C25A Return
03C263 Wrapper
03C26A Return
03C2D8 Return
03C2D9 \ Find free sprite slot (#$0B-#$00)
03C2DA  |
03C2DC  |
03C2DF  |
03C2E1  |
03C2E2  |
03C2E4  |
03C2E5 /
03C2E6 \ Sprite status = Normal
03C2E8 /
03C2EB \ Sprite = 1Up
03C2ED /
03C2EF \ Sprite X position = Mario X position
03C2F1  |
03C2F3  |
03C2F5 /
03C2F8 \ Sprite Y position = Matio Y position
03C2FA  |
03C2FC  |
03C2FE /
03C301 Load sprite tables
03C305 \ Disable interaction timer = #$10
03C307 /
03C30E Return
03C312 \ Return if no interaction
03C316 /
03C318 \ Replace, Sprite = Mushroom
03C31A /
03C31C Reset sprite tables
03C320 \ Disable interaction timer = #$20
03C322 /
03C325 \ Sprite Y position = Mario Y position - $000F
03C327  |
03C328  |
03C32A  |
03C32C  |
03C32F  |
03C331 /
03C334 \ Sprite direction = dirction of Mario's X speed
03C336  |
03C338  |
03C33A  |
03C33B /
03C33E \ Set upward speed
03C340 /
03C342 \ Play sound effect
03C344 /
03C347 Return
03C34C  Draw sprite using the routine for sprites <= 53
03C350 \ Return if sprites locked
03C352 /
03C354 \ Always face mario
03C357  |
03C358 /
03C35B Only process while onscreen
03C35E Interact with mario
03C362 Update position based on speed values
03C366 \ Branch if not on ground
03C369   | Bug: Ninji can jump through ceiling.  See NinjiFix.asm
03C36B  /       Should set Y Speed = 0 if ($1588,x & #$08)
03C36D Sprite Y Speed = 0
03C38F Return
03C3AD Return
03C3B2 Return
03C44D Return
03C456 \ Find a free extended sprite slot
03C458  |
03C45B  |
03C45D  |
03C45E  |
03C460 / Return if no free slots
03C461 \ Extended sprite = Bone
03C463 /
03C48E Return
03C4A5 Y = Index into sprite OAM
03C4D7 Return
03C4F9 Return
03C625 Return
03C7A6 Return
03C7CF Return
03C7D0 \ Sprite status = Normal
03C7D2 /
03C80F Return
03C815 Return
03C830 \ Play sound effect
03C832 /
03C83C Return
03C84F  \ Play sound effect
03C852  /
03C855  \ Play sound effect
03C858  /
03C888 Return
03C896  \ Play sound effect
03C899  /
03C89C  \ Play sound effect
03C89F  /
03C8E2 Sprite Y Speed = 0
03C8F0 Return
03C968 Return
03C9B8 Return
03CBAC Return
03CBB3 \ Return if no free slots
03CBB7 /
03CBB9 \ Sprite = Football
03CBBB /
03CBC5 \ Sprite status = Normal
03CBC7 /
03CC08 Return
03CC09 Wrapper
03CC13 Return
03CC37 Return
03CCDF Return
03CCE8 \ Sprite status = Normal
03CCEA /
03CD20 Return
03CD36 Return
03CDD9 Return
03CDEE Return
03CDFC Return
03CE0D Return
03CE22 Sprite Y Speed = 0
03CE26 / Play sound effect
03CE29 Return
03CE35 / Play sound effect
03CE41 Return
03CE48 / Play sound effect
03CE55 Return
03CE80 / Play sound effect
03CE9B / Change music
03CEA6 Return
03CEC3 / Play sound effect
03CECD / Play sound effect
03CEEC Return
03CEF1 Return
03D4DE Return
03D6AB Return
03D70D \ Return if less than 2 reznors killed
03D710  |
03D711  |
03D714  |
03D717  |
03D71A  |
03D71C /
03D754 / Play sound effect
03D758 Return
03D765 Return
03D77E Return
03D7EB Return
03D990 Return
03D9DD Return
03DDA4  \ $00 = Pointer in bank 0 (from above tables)
03DDA7   |
03DDA9   |
03DDAC   |
03DDAE  /
03DDB0  \ Read 0B bytes and put them in $0707
03DDB2   |
03DDB4   |
03DDB7   |
03DDB8  /
03DDE4 Return
03DE38 Return
03DE4D Return
03DEBA Return
03DFAD Return
03DFC3 Return
03E018 / Play sound effect
03E05B Return
03E400 \ Unreachable
03E402 / Decrease Mario's Status
05CC00 Wrapper
0C938D Wrapper
0C939A Wrapper
0C93A5 Wrapper
0CAB13 Wrapper
0480B8 Return
0480DF Return
0480E0 \
0480E2  |If lower 3 bits of frame counter isn't 0,
0480E4 / don't update the water animation
048101 \
048103  |If lower 3 bits of frame counter isn't 0,
048105 / don't update the waterfall animation
04810C \
04810E  |If lower 3 bits of frame counter isn't 0,
048110 / branch to $8123
048171 Return
04819E Return
048244  \ If player 1 pushes select...
048246   |
048249   | ...disabled by BRA
04824B  / Change to BEQ to enable debug code below
04824D \ Unreachable
048250  | Debug: Change Yoshi color
048251  |
048252  |
048254  |
048256  |
048258  |
04825A  |
04825C  |
04825E /
04826A \ If "! blocks flying away color" is 0,
04826D / don't play the animation
048275 \ If not showing Continue/End message,
048278 / branch to $8281
0482F8 \
0482F9  |
0482FA  |Makes you wonder what used to be here...
0482FB  |
0482FC  |
0482FD /
048383  Look around overworld
0483CE / Play sound effect
0483D3 / Change music
048405 / Play sound effect
048414 Return
048430 Return
048509 \ Get current player's submap
04850C /
04850F Store it in $01
048511 Store x00 in $00
048513 16 bit A
048515 Set X to Current character*4
048518 Set Y to x34
048535 Store Y in "Warp destination"
048538 8 bit A
04853A Return
048575 Return
0485A9  \ Mario X postion = #$001E
0485AC   | (On overworld boarder)
0485AD   |
0485AF  /
0485B1  \ Mario Y postion = #$0006
0485B4   | (On overworld boarder)
0485B5   |
0485B7  /
04862D Return
048630 \ Get current player's X position
048633 /
048636 \ Subtract x1A
048637 /
048639 \ If A >= x100,
04863C / branch to $864D
04863E \ Store in $00 and $08
048640 /
048788 Return
0487CA Return
0489DD Return
048D73 Return
048E44 / Change music
048E48 Return
048FE8 Return
049036 Return
049057 Return
049136 Change to BEQ to enable below debug code
049138 \ Unreachable
04913B  | Debug: Warp to star road from Yoshi's house
04913D  |
04913F /
049141 \
049143  |If L and R aren't pressed,
049145  |branch to OWPU_NoLR
049147 /
049149 \
04914C  |If Mario is standing on Destroyed Castle,
04914E / branch to OWPU_EnterLevel
049150 \
049152  |If A, B, X or Y are pressed,
049154  |branch to OWPU_ABXY
049156  |Otherwise,
049158 / branch to $91E9
04915E \
049161  |If not standing on a star tile,
049163 / branch to OWPU_NotOnStar
04916A Set "Fly away" speed to 0
04916D Set "Stay on ground" timer to 0 (31 = Fly away)
049170 \ Star Road sound effect
049172 /
049175 \ Activate star warp
049177 /
04917D \
049180  |If standing on Pipe#1 (unused),
049182 / branch to OWPU_IsOnPipe
049184 \ If not standing on Pipe#2,
049186 / branch to OWPU_NotOnPipe
049190 Set auto-walk to 0
049193 \ Fade to overworld
049195 /
049198 Return
049199 \
04919B  |If standing on a tile >= (?) Destroyed Castle,
04919D / branch to $91E9
04919F \
0491A2  |If current player is Luigi,
0491A3  |change Luigi's animation in the following lines
0491A5 /
0491A6 \
0491A8  |
0491AB  |If Mario isn't swimming, use "raise hand" animation
0491AD  |Otherwise, use "raise hand, swimming" animation
0491AF  |
0491B1  |
0491B2 /
0491B5 Get current character
0491B8 \ Get character's coins
0491BB /
0491BE \ Get character's lives
0491C1 /
0491C4 \ Get character's powerup
0491C7 /
0491C9 \
0491CC  |Get character's Yoshi color
0491CF  |
0491D2 /
0491D5 \ Get character's reserved item
0491D8 /
0491DB \ Related to fade speed
0491DD /
0491E0 \ Music fade out
0491E2 / 
0491E5 Fade to level
0491E8 Return
0491E9 16 bit A
0491EB Get current character * 4
0491EE Get character's X coordinate
0491F1 \
0491F2  |Divide X coordinate by 16
0491F3  |
0491F4 /
0491F5 \ Store in $00 and $1F1F,x
0491F7 /
0491FA Get character's Y coordinate
0491FD \
0491FE  |Divide Y coordinate by 16
0491FF  |
049200 /
049201 \ Store in $02 and $1F21,x
049203 /
049206 \
049207  |Divide (current character * 4) by 4
049208  |
049209 /
04920A Calculate current tile pos
04920D 8 bit A
04920F \ If auto-walk=0,
049212 / branch to OWPU_NotAutoWalk
04921C 16 bit A,X,Y
04921E X = tile pos
049220 \ Get level number of current tile pos
049224 /
04925A 8 bit A,X,Y
04925C Set auto-walk to 0
04925F \
049261  |If no dir button is pressed (one frame),
049263 / branch to $926E
049265 \
049268  |If standing on Pipe#2,
04926A  |branch to $92AD
04926C / Otherwise, branch to $928C
04926E \ Decrease "Face walking dir" timer
049271 / If >= 0, branch to $9287
049273 Set "Face walking dir" timer to 0
049276 \
049279  |Set X to current character * 2
04927A  |
04927C /
04927D \
049280  |Set current character's animation to "facing down"
049282  |or "facing down in water", depending on if character
049284 / is in water or not.
049467 Return
0495D7 \ Load OW tile number
0495DB /
0495DE Set "Current OW tile"
0496A2 / Play sound effect
049884 Return
049885 Get overworld X pos/16 (X)
049887 \
04988A  |
04988C  |
04988E  |
049891  |Set tile pos to ((X&0xF)+((X&0x10)<<4))
049892  |
049893  |
049894  |
049895  |
049897 /
049899 Get overworld Y pos/16 (Y)
04989B \
04989C  |
04989D  |Increase tile pos by ((Y<<4)&0xFF)
04989E  |
04989F  |
0498A2  |
0498A4 /
0498A6 \
0498A8  |
0498AB  |If (Y&0x10) isn't 0,
0498AD  |increase tile pos by x200
0498AF  |
0498B0  |
0498B3 /
0498B5 \
0498B8  |
0498BB  |If on submap,
0498BD  |Increase tile pos by x400
0498BF  |
0498C0  |
0498C3 /
0498C5 Return
0498FA Return
049963 Return
049A92 Return
049AC4 Return
049D7E Return
049D99 Return
049E21 Return
049E4B Return
049E51 Return
049E95 Return
049E9B \ Unreachable
049E9D  | While A >= #$0A...
049E9F  |
049EA1  | A -= #$0A
049EA3  | Y++
049EA4 /
049EA6 / Return
04D76F Return
04D7F1 Return
04D85C Return
04DAAC Return
04DAB2 Return
04DAEE Return
04DB9C Return
04DBC7 Return
04DBFB / Change music
04DC01 Return
04DC69 Return
04DCAD Return
04DD3F Return
04DD56 Return
04DD8C Return
04E469 Return
04E495 Return
04E4CF Return
04E51F Return
04E56F Return
04E631 Return
04E63F Return
04E671 / Play sound effect
04E676 Return
04E689 Return
04E6D2 Return
04E6F8 Return
04E765 / Play sound effect
04E76B Return
04E823 Return
04E8E3 Return
04EA24 Return
04EAA3 Return
04EAC8 Return
04EBF3 Return
04EC66 Return
04EC77 Return
04ECA7 Return
04ECAC / Play sound effect
04ECD2 Return
04EE2F Return
04EE79 Return
04F29A Return
04F2A6 / Play sound effect
04F396 Return
04F3E4 Return
04F3FE Return
04F401 / Play sound effect
04F410 Return
04F44A Return
04F52A Return
04F569 / Play sound effect
04F624 Return
04F6CF Return
04F738 / Play sound effect
04F828 Return
04F8A5 Return
04F9A7 Return
04FA7A / Play sound effect
04FA82 Return
04FAF4 NOP this and the sprite doesn't appear
04FAF7 NOP this and the sprite stops animating.
04FAFA Tile for pirahna plant, #1
04FB00 Tile for pirahna plant, #2, stored in $0242
04FB02 YXPPCCCT - 00110010
04FB0A Tilemap
04FB0E Property
04FB17 X Position
04FB21 Y Position
04FB36 Return
04FB37 \Overworld Sprite X Speed
04FB39 /
04FB3C \Overworld Sprite Y Speed
04FB3E /
04FB41 Move the overworld cloud
04FB84 Return
04FC1D Return
04FCE0 Return
04FCE1 Bowser's sign code starts here.
04FCE4 \How many tiles to show up for Bowser's sign
04FCE6 /
04FCF9 Jump to CLC, then the OAM part of the Pirahna Plant code.
04FD09 Return
04FD6F Return
04FE5A Return
04FE61 Return
04FE8F Return
04FE90 Transfer X to A
04FE91 Clear Carry Flag
04FE92 Add #$20 to A
04FE94 Transfer A to X
04FE98 Load OW Sprite XPos Low
04FE9B If it is => 80
04FE9D Store 00 OW Sprite Xpos Low
04FEA0 Transfer X to A
04FEA1 Set Carry Flag...
04FEA2 ...for substraction
04FEA4 Transfer A to X
04FEAB Load OW Sprite X Speed
04FEAE Multiply it by 2
04FEAF 4...
04FEB0 8...
04FEB1 16...
04FEB2 Clear Carry Flag
04FEB6 And store it in
04FEB9 Load OW Sprite X Speed
04FEBD Divide by 2
04FEBE 4
04FEBF 8
04FEC0 16
04FEC1 Load $00 in Y
04FED6 Return
04FEEE Return
04FF2D Return
04FF66 Return
04FFB0 Return
058000 Addresses to tileset-specific MAP16 data
05801F 8 bit A
058021 16 bit X,Y
058023 \
058026  |
058028  |Set all background tiles (lower bytes) to x25
05802C  |
058030  |
058031  |
058034 /
058039 \
05803B  |If the layer 2 data is a background,
05803D / branch to $8074
05803F 16 bit X,Y
058041 \
058044  |
058046  |If Layer 2 pointer >= $E8FF,
058049  |the background should use Map16 page x11 instead of x10
05804B  |
05804E \
058051  |
058052  |Set the background's Map16 page
058056  |(i.e. setting all high tile bytes to Y)
05805A  |
05805B  |
05805E /
058060 \ Set highest Layer 2 address to x0C
058062 / (All backgrounds are stored in bank 0C)
058064 \ Set tileset to 0
058067 /
05806F 16 bit A
058074 8 bit A
058076 \
058079  |
05807B  |Clear level data
05807E  |
05807F  |
058081  |
058084  |
058087 /
05808C Load the level
05808F 8 bit A,X,Y
058091 \
058094  |
058096  |If level mode is less than x22,
058098  |JSL to $02A751
05809D Return
0580A1 Zero a byte in the middle of the RAM table for the level header
0580A9 $4D to $50 = #$FF
0580AD -> here
058125 Return
0581BA Return
0581FD \
058200  |Store tileset*2 in X
058201 /
058202 \Store x05 in $0F
058204 /
058206 \Store x00 in $84
058208 /
05820A \Store xC4 in $1430
05820C /
05820F \Store xCA in $1431
058211 /
058216 \Store xE55E in $82-$83
058219 /
05821B \Store address to MAP16 data in $00-$01
05821F /
058221 \Store x8000 in $02-$03
058224 /
058226 \Store x81BB in $0D-$0E
058229 /
05822B \
05822D  |Store x00 in $04, $09 and $0B
05822F /
058233 \Set X and Y to x0000
058236 /
0582C7 Return
058339 Return
0583AB Return
0583AF Layer number (0=Layer 1, 1=Layer 2)
0583B2 Loads level header
0583B8 Get current level mode
0583BB \
0583BD  |
0583BF  |If the current level is a boss level,
0583C1  |don't load anything else.
0583C3  |
0583C5 /
0583C7 \
0583C9  |
0583CB  |If level isn't empty, load the level.
0583CD  |
0583CF /
0583D4 Get current level mode
0583D7 \
0583D9  |
0583DB  |
0583DD  |
0583DF  |If the current level isn't a Layer 2 level,
0583E1  |branch to LoadLevelDone
0583E3  |
0583E5  |
0583E7  |
0583E9  |
0583EB  |
0583ED  |
0583EF /
0583F1 \Increase layer number and load into A
0583F4 /
0583F7 \If it is x02, end. (Layer 1 and 2 are done)
0583F9 /
0583FB \
0583FD  |
0583FE  |
058400  |Move address stored in $68-$6A to $65-$67.
058402  |(Move Layer 2 address to "Level to load" address)
058404  |It also increases the address by 5 (to ignore Layer 2's header)
058406  |
058408  |
05840A /
058416 Return
058417 Vertical level settings for each level mode
05841B Format:
05841F ?uuuuu?v
058427 ?= Unknown purpose
05842B u= Unused?
05842F v= Vertical level
058437 Main screen settings for each level mode
058457 Subscreen settings for each level mode
058477 CGADSUB settings for each level mode
058497 Special level settings for each level mode
05849B 00: Normal level
05849F 80: Iggy/Larry level
0584A3 C0: Morton/Ludwig/Roy level
0584A7 C1: Bowser level
0584B7 XYPPCCCT settings for each level mode
0584BB (The XYPPCCCT setting appears to be XORed with nearly all
0584BF sprites' XYPPCCCT settings)
0584D7 How many 100s of seconds to use for the four time limits
0584DB A level can choose between 8 tracks.
0584DF This table contains the tracks to choose from.
0584E5 Get first byte
0584E7 \
0584E8  |Get amount of screens
0584EA  |
0584EB /
0584ED \
0584EE  |
0584EF  |
0584F0  |Get BG color setting
0584F1  |
0584F2  |
0584F3 /
0584F6 \Get second byte
0584F7 /
0584F9 \Get level mode
0584FB /
0584FF \Get XYPPCCCT settings from table
058503 /
058505 \Get main screen setting from table
058509 /
05850C \Get subscreen setting from table
058510 /
058513 \Get CGADSUB settings from table
058517 /
058519 \Get special level setting from table
05851D /
058520 \Get vertical level setting from table
058524 /
058526 \
058527  |
058529  |If level mode is even:
05852B  |Store screen amount in $5E and x01 in $5F
05852D  |Otherwise:
05852E  |Store x01 in $5E and screen amount in $5F
058530  |
058532 /
058534 Reload second byte
058536 \
058537  |
058538  |Get BG color settings
058539  |
05853A  |
05853B /
05853E \Get third byte
05853F /
058541 "Push" third byte
058543 "Push" third byte
058544 \Load sprite set
058546 /
058549 "Pull" third byte
05854A \
05854B  |
05854C  |
05854D  |
05854E  |
058550  |Get music
058551  |
058555  | \
058558  |  |
05855A  |  |Related to not restarting music if the new track
05855C  |  |is the same as the old one?
05855F  |  |
058561  | /
058563 /
058566 "Pull" third byte
058568 \
05856A  |
05856B  |
05856C  |Get Layer 3 priority
05856D  |
05856E  |
058570 /
058572 \Get fourth bit
058573 /
058575 "Push" fourth bit
058577 \
058578  |
058579  |
05857A  |
05857B  |
05857C  |
05857D  |Get time
05857E  |
058581  |
058583  |
058587  |
05858A  |
05858D /
058590 "Pull" fourth bit
058592 \Get FG color settings
058594 /
058597 "Pull" fourth bit (again)
058599 \
05859B  |
05859C  |Get sprite palette
05859D  |
05859E /
0585A1 \Get fifth byte
0585A2 /
0585A4 \
0585A6  |Get tileset
0585A9 /
0585AC Reload fifth byte
0585AE \
0585B0  |
0585B1  |Get item memory settings
0585B2  |
0585B3 /
0585B6 Reload fifth byte
0585B8 \
0585BA  |Get horizontal/vertical scroll
0585BB  |
0585BC  |
0585BD  |
0585BE  | \
0585C0  |  |If scroll mode is x03, disable both
0585C2  |  |vertical and horizontal scroll
0585C5  | /
0585C7 /
0585CA \
0585CC  |
0585CD  |
0585CF  |Make $65 point at the level data
0585D1  |(Level data comes right after the header)
0585D3  |
0585D5 /
0585D7 We're done!
0585FE Return
058601 \
058603  |
058605  |
058607  |
058608  |Read three bytes of level data
05860A  |Store them in $0A, $0B and $59
05860C  |
05860D  |
05860F  |
058611 /
058612 \
058613  |
058614  |
058616  |Increase address by 3 (as 3 bytes were read)
058618  |
05861A  |
05861C /
05861E \
058620  |
058621  |
058622  |
058623  |
058624  |Get block number, store in $5A
058626  |
058628  |
05862A  |
05862B  |
05862D /
05862F A = vertical level setting
058631 \
058634  |If $1933=x00, divide A by 2
058636 /
058637 \
058639  |If lowest bit of A is set, jump to sub
05863B /
05863E \
058640  |
058642  |
058643  |
058644  |Set upper half of $57 to Y pos
058645  |and lower half of $57 to X pos
058646  |
058648  |
05864A  |
05864C  |
05864E /
058652 \
058655  |Load $1993*2 into X
058658  |
058659 /
058666 \
058669  |Set Y to Level Mode*2
05866C  |
05866D /
05868D \
05868F  |
058691  |If New Page flag is set, increase $1928 by 1
058692  |(A = $1928)
058695 /
058698 Store A in $1BA1
05869B \
05869C  |Multiply A by 2 and add $1928 to it
05869D  |Set Y to A
0586A0 /
0586BB \
0586BD  |If high coordinate is set...
0586BF  |(Lower half of horizontal level)
0586C1  |(Right half of vertical level)
0586C3  |...increase $6C and $6F
0586C5 \
0586C7  |If block number is x00 (extended object),
0586C9  |Jump to sub LevLoadExtObj
0586CC  |                  (Why didn't they use BRA here?)
0586CF  |Jump to sub LevLoadNrmObj
0586D6 \
0586D9  |
0586DB  |If the next byte is xFF, return (loading is done).
0586DD  |Otherwise, repeat this routine.
0586DF  |
0586E2 /
0586E9 Return
0586F0 Return
058775 Return
058789 Load "Xpos of Screen Boundary"
05878B \
05878C  |Multiply by 16
05878D  |
05878E /
058790 \
058791 /Subtract 8
058794 Store to $45 (Seems to be Scratch RAM)
058796 Get back the multiplied XPos
058798 Add $17
05879B Store to $47 (Seems to be Scratch RAM)
05879F \
0587A1  | LDA $45,x  / $55
0587A2 /
0587A4 \ multiply by 8
0587A5  |
0587A6 /
0587A9 AND to make it either 6, 4, 2, or 0.
0587AD \LDY #$0266
0587B0 |
0587B1 /
0587BB MAP16 pointer table
0587C1 8 bytes per tile?
0587E3 Load the vertical level flag
0587E5 \if bit 1 is set, process based on that
0587E7 /
0587E9 Not a vertical level
0587EB \Y = L2XPos * 16
0587ED |
0587EE |
0587EF |
0587F0 |
0587F1 /
058802 \A = Y = $04*16 (?)
058804 |
058806 |
058807 |
058808 |
058809 |
05880A /
05880B \
05880C  |Subtract x08 and store in $49
05880F /
058811 \
058812  |"Undo", add x17 and store in $4B
058813  |
058816 /
058819 Return
058A9A Return
058B8C Return
058C70 Return
058D79 Return
058E18 Return
05B16D Return
05B29A Return
05B31A Return
05B328 Return
05B32C / Play sound effect
05B34F / Play sound effect
05B35A Return
05B363 \ Unreachable
05B374 / Return
05BBA5 Return
05BC48 Return
05BC49 Return
05BC71 Return
05BC75 Return
05BC87  00 - Auto-Scroll, Unused?
05BC89  01 - Auto-Scroll
05BC8B  02 - Layer 2 Smash
05BC8D  03 - Layer 2 Scroll
05BC8F  04 - Unused
05BC91  05 - Unused
05BC93  06 - Layer 2 Falls
05BC95  07 - Unused
05BC97  08 - Layer 2 Scroll
05BC99  09 - Unused
05BC9B  0A - Unused
05BC9D  0B - Layer 2 On/Off Switch controlled
05BC9F  0C - Auto-Scroll level
05BCA1  0D - Fast BG scroll
05BCA3  0E - Layer 2 sink/rise
05BCE8 Return
05BCF0  00 - Auto-Scroll, Unused?
05BCF2  01 - Auto-Scroll
05BCF4  02 - Layer 2 Smash
05BCF6  03 - Layer 2 Scroll
05BCF8  04 - Unused
05BCFA  05 - Unused
05BCFC  06 - Layer 2 Falls
05BCFE  07 - Unused
05BD00  08 - Layer 2 Scroll
05BD02  09 - Unused
05BD04  0A - Unused
05BD06  0B - Layer 2 On/Off Switch controlled
05BD08  0C - Auto-Scroll level
05BD0A  0D - Fast BG scroll
05BD0C  0E - Layer 2 sink/rise
05BD35 Return
05BD7A Return
05BD7B \ Unreachable
05BDDC Return
05BE39 Return
05BE89 Return
05BEA5 Return
05BFB9 Return
05BFF5 Return
05C035 Return
05C05E Return
05C197 Return
05C1AD Return
05C1AE \ Unreachable
05C32D Return
05C405 Return
05C493 Return
05C4F8 Return
05C51E Return
05C673 Return
05C6CD \ Unreachable
05C749 Return
05C760 / Play sound effect
05C763  \ Set ground shake timer
05C766  /
05C87F Return
05C98A Return
05C9C3 / Play sound effect
05C9C6  \ Set ground shake timer 
05C9C8  / 
05C9D0 Return
05CC06 Return
05CD3E Return
05CDE5 / Play sound effect
05CDE8 Return
05CE39 Return
05CEA2 Return
05CF4A / Play sound effect
05CFE9 Return
05D847 16 bit A,X,Y
05D849 Set "X position of screen boundary" to 0
05D84B Set "Layer 2 X position" to 0
05D882 \
05D885  |
05D888  |Set Y to current player
05D889  |
05D88A /
05D88B \ Get current player's submap
05D88E /
05D891 \
05D893  |
05D894  |If on submap, increase X by x400
05D895  |
05D898  |
05D899 8 bit A
05D89F Store overworld level number
05D8A2 \
05D8A4  |
05D8A6  |If A>= x25,
05D8A7  |subtract x24
05D8AC Store A as lower level number byte
05D8AE \
05D8B1  |Set higher level number byte to:
05D8B3  |0 if on overworld
05D8B5 /
05D8B7 16 bit A,X,Y
05D8B9 \
05D8BB  |
05D8BC  |Multiply level number by 3 and store in Y
05D8BD  |(Each L1/2 pointer table entry is 3 bytes long)
05D8BF /
05D8C0 8 bit A
05D8C2  \ 
05D8C5  |
05D8C7   |Load Layer 1 pointer into $65-$67 
05D8CA  |
05D8CC   | 
05D8CF /
05D8D1  \ 
05D8D4  |
05D8D6   |Load Layer 2 pointer into $68-$6A 
05D8D9  |
05D8DB   | 
05D8DE /
05D8E0 16 bit A
05D8E2 \
05D8E4  |Multiply level number by 2 and store in Y
05D8E5 / (Each sprite pointer table entry is 2 bytes long)
05D8E9 8 bit A
05D8EB  \ 
05D8EE  |Store location of sprite level Y in $CE-$CF
05D8F0   | 
05D8F3 /
05D8F5 \ Set highest byte to x07
05D8F7 / (All sprite data is stored in bank 07)
05D8F9 \ Get first byte of sprite data (header)
05D8FB  |Get level's sprite memory
05D8FD / Store in $1692
05D900 \ Get first byte of sprite data (header) again
05D902  |Get level's sprite buoyancy settings
05D904 / Store in $190E
05D907 16 bit X,Y
05D909 8 bit A
05DAEE Return
05DB6D Return
05DBC8 Return
05DC39 Return
05DC45 Return
07FC47 \ Find a free extended sprite slot
07FC49  |
07FC4C  |
07FC4E  |
07FC4F  |
07FC51 / Return if no free slots
07FC52 \ Extended sprite = Spin jump stars
07FC54 /
07F1FF Return
07F24D Return
07F26B Return
07F78A Return
07F79F Return
07F7D1 Return
07F7DA Return
07FC46 Return
07FC8F Return
07F754 Sprite X Speed = 0
07F759 Sprite Y Speed = 0
07F24A X = Sprite index
07FC58 X = Sprite index
0C9448 / Change music
0CA40D / Change music
0CA5C3 / Change music
0C9399 Return
0C93A4 Return
0C93AC Return
0C93C0 Return
0C944B Return
0C94BF Return
0C9558 Return
0C95C6 Return
0C9F5B Return
0C9FE6 Return
0CA042 Return
0CA08E Return
0CA135 Return
0CA1D3 Return
0CA1F5 Return
0CA30C Return
0CA3B3 Return
0CA438 Return
0CA5B1 / Play sound effect
0CA5D1 Return
0CA65A Return
0CA6AF Return
0CA720 Return
0CA74E Return
0CA759 Return
0CA777 Return
0CA7B8 Return
0CA8A2 Return
0CA8D0 Return
0CA939 Return
0CAA0A Return
0CAA52 Return
0CAB12 Return
0CAB1A Return
0CAB9B Return
0CAC28 Return
0CADB4 Return
0CAEAC Return
0CB635 Return
0CC97D Return
0CC98B Return
0CCACD Return
0CCAFC Return
0CCB1B Return
0CCB7B Return
0CCBF9 Return
0CCC48 Return
0CCD22 Return
0CCD6A / Play sound effect
0CCEA2 Return
0CCED3 Return
0CCF2E / Play sound effect
0CCF71 Return
0CCFC4 Return
0CCFF6 Return
0CD002 Return
0CD0BB Return
0CD0D1 Return
0CD107 Return
0CD12C / Play sound effect
0CD132 Return
0CD16E Return
0CD19B Return
0CD1A6 Return
0CD1EF Return
0CD282 Return
0CD294 Return
0CD297 / Play sound effect
0CD2B4 / Play sound effect
0CD2BF / Play sound effect
0CD2DA / Play sound effect
0CD2EB Return
0CD367 Return
0CD372 Return
0CD385 Return
0CD3E9 / Play sound effect
0CD3F3 Return
0CD463 Return
0CD4F3 Return
0CD556 Return
0CD5C5 Return
0CD5D8 Return
0CD6C3 Return
0CD751 Return
0CD7A8 Return
0CD7C8 Return
0CD7D3 Return
0CD7DA / Play sound effect
0CD7DD Return
0CD7EA Return
0CD86E Return
0CA20A  \ Mario's image = Going Down Pipe 
0CA20C  / 
0CA6C4  \ Mario's image = Peace Sign 
0CA6C6  / 
0CD762  \ Mario's image = Ducking, back to camera 
0CD764  / 
0CD7B5  \ Mario's image = Standing, back to camera 
0CD7B7  / 
0DA105 Return
0DA414 Return
0DA53C Return
0DA547 Return
0DA5B0 Return
0DA64C Return
0DA670 Return
0DA68D Return
0DA6B0 Return
0DA6B9 Return
0DA6CC Return
0DA6ED Return
0DA747 Return
0DA78C Return
0DA7E2 Return
0DA808 Return
0DA829 Return
0DA83D Return
0DA876 Return
0DA8A5 Return
0DA95A Return
0DA97C Return
0DA991 Return
0DA9B3 Return
0DA9D5 Return
0DA9EE Return
0DAA07 Return
0DAA0C Return
0DAA11 Return
0DAAA3 Return
0DAB0C Return
0DAB3D Return
0DABF6 Return
0DAC91 Return
0DAD43 Return
0DAD9F Return
0DADEA Return
0DAE69 Return
0DAEFB Return
0DAF60 Return
0DAFDE Return
0DAFE9 Return
0DB038 Return
0DB0EF Return
0DB15B Return
0DB1C7 Return
0DB211 Return
0DB2C9 Return
0DB335 Return
0DB3BA Return
0DB3DA Return
0DB42A Return
0DB460 Return
0DB49B Return
0DB4F9 Return
0DB51E Return
0DB546 Return
0DB568 Return
0DB582 Return
0DB59D Return
0DB5A7 Return
0DB5E7 Return
0DB6C0 Return
0DB6E0 Return
0DB6F4 Return
0DB72E Return
0DB7A9 Return
0DB84D Return
0DB915 Return
0DB961 Return
0DB996 Return
0DB9BF Return
0DB9F5 Return
0DBA09 Return
0DBA43 Return
0DBA7B Return
0DBB2B Return
0DBB62 Return
0DC26A Return
0DC317 Return
0DC340 Return
0DC3D7 Return
0DC42B Return
0DC44B Return
0DC46E Return
0DC4C8 Return
0DC4EE Return
0DC589 Return
0DC5D7 Return
0DC61F Return
0DCE8F Return
0DCEA5 Return
0DCEBD Return
0DCED7 Return
0DCEEF Return
0DCF0F Return
0DCF2F Return
0DCF52 Return
0DCFB0 Return
0DCFEF Return
0DD033 Return
0DD06F Return
0DD0C2 Return
0DD102 Return
0DD144 Return
0DD181 Return
0DD1A4 Return
0DD1CA Return
0DD24B Return
0DD281 Return
0DDA60 Return
0DDA79 Return
0DDA9D Return
0DDAC3 Return
0DDAF1 Return
0DDB8E Return
0DDC01 Return
0DDC5D Return
0DDCA8 Return
0DDCE9 Return
0DDD25 Return
0DDD5B Return
0DDD86 Return
0DDE3B Return
0DDEDB Return
0DE05D Return
0DE12B Return
0DE185 Return
0DE970 Return
0DE98E Return
0DE9E0 Return
0DEA1D Return
0DEA70 Return
0DEADD Return
0DEB92 Return
0DEC5B Return
0DEC65 Return
0DEC7D Return
0DECC0 Return
0DED08 Return
0DED42 Return
0DED64 Return
0DED94 Return
0DEDB8 Return
0DEDDA Return
0DEE16 Return
0DEE51 Return
0DEE88 Return
0DEEBF Return
0DEF44 Return
0DEF66 Return
0DEFA1 Return
0DF02A Return
0DF065 Return
0DF089 Return
