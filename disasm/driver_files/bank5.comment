058000 Addresses to tileset-specific MAP16 data
05801F 8 bit A
058021 16 bit X,Y
058023 \
058026  |
058028  |Set all background tiles (lower bytes) to x25
05802C  |
058030  |
058031  |
058034 /
058039 \
05803B  |If the layer 2 data is a background,
05803D / branch to $8074
05803F 16 bit X,Y
058041 \
058044  |
058046  |If Layer 2 pointer >= $E8FF,
058049  |the background should use Map16 page x11 instead of x10
05804B  |
05804E \
058051  |
058052  |Set the background's Map16 page
058056  |(i.e. setting all high tile bytes to Y)
05805A  |
05805B  |
05805E /
058060 \ Set highest Layer 2 address to x0C
058062 / (All backgrounds are stored in bank 0C)
058064 \ Set tileset to 0
058067 /
05806F 16 bit A
058074 8 bit A
058076 \
058079  |
05807B  |Clear level data
05807E  |
05807F  |
058081  |
058084  |
058087 /
05808C Load the level
05808F 8 bit A,X,Y
058091 \
058094  |
058096  |If level mode is less than x22,
058098  |JSL to $02A751
05809D Return
0580A1 Zero a byte in the middle of the RAM table for the level header
0580A9 $4D to $50 = #$FF
0580AD -> here
058125 Return
0581BA Return
0581FD \
058200  |Store tileset*2 in X
058201 /
058202 \Store x05 in $0F
058204 /
058206 \Store x00 in $84
058208 /
05820A \Store xC4 in $1430
05820C /
05820F \Store xCA in $1431
058211 /
058216 \Store xE55E in $82-$83
058219 /
05821B \Store address to MAP16 data in $00-$01
05821F /
058221 \Store x8000 in $02-$03
058224 /
058226 \Store x81BB in $0D-$0E
058229 /
05822B \
05822D  |Store x00 in $04, $09 and $0B
05822F /
058233 \Set X and Y to x0000
058236 /
0582C7 Return
058339 Return
0583AB Return
0583AF Layer number (0=Layer 1, 1=Layer 2)
0583B2 Loads level header
0583B8 Get current level mode
0583BB \
0583BD  |
0583BF  |If the current level is a boss level,
0583C1  |don't load anything else.
0583C3  |
0583C5 /
0583C7 \
0583C9  |
0583CB  |If level isn't empty, load the level.
0583CD  |
0583CF /
0583D4 Get current level mode
0583D7 \
0583D9  |
0583DB  |
0583DD  |
0583DF  |If the current level isn't a Layer 2 level,
0583E1  |branch to LoadLevelDone
0583E3  |
0583E5  |
0583E7  |
0583E9  |
0583EB  |
0583ED  |
0583EF /
0583F1 \Increase layer number and load into A
0583F4 /
0583F7 \If it is x02, end. (Layer 1 and 2 are done)
0583F9 /
0583FB \
0583FD  |
0583FE  |
058400  |Move address stored in $68-$6A to $65-$67.
058402  |(Move Layer 2 address to "Level to load" address)
058404  |It also increases the address by 5 (to ignore Layer 2's header)
058406  |
058408  |
05840A /
058416 Return
058417 Vertical level settings for each level mode
05841B Format:
05841F ?uuuuu?v
058427 ?= Unknown purpose
05842B u= Unused?
05842F v= Vertical level
058437 Main screen settings for each level mode
058457 Subscreen settings for each level mode
058477 CGADSUB settings for each level mode
058497 Special level settings for each level mode
05849B 00: Normal level
05849F 80: Iggy/Larry level
0584A3 C0: Morton/Ludwig/Roy level
0584A7 C1: Bowser level
0584B7 XYPPCCCT settings for each level mode
0584BB (The XYPPCCCT setting appears to be XORed with nearly all
0584BF sprites' XYPPCCCT settings)
0584D7 How many 100s of seconds to use for the four time limits
0584DB A level can choose between 8 tracks.
0584DF This table contains the tracks to choose from.
0584E5 Get first byte
0584E7 \
0584E8  |Get amount of screens
0584EA  |
0584EB /
0584ED \
0584EE  |
0584EF  |
0584F0  |Get BG color setting
0584F1  |
0584F2  |
0584F3 /
0584F6 \Get second byte
0584F7 /
0584F9 \Get level mode
0584FB /
0584FF \Get XYPPCCCT settings from table
058503 /
058505 \Get main screen setting from table
058509 /
05850C \Get subscreen setting from table
058510 /
058513 \Get CGADSUB settings from table
058517 /
058519 \Get special level setting from table
05851D /
058520 \Get vertical level setting from table
058524 /
058526 \
058527  |
058529  |If level mode is even:
05852B  |Store screen amount in $5E and x01 in $5F
05852D  |Otherwise:
05852E  |Store x01 in $5E and screen amount in $5F
058530  |
058532 /
058534 Reload second byte
058536 \
058537  |
058538  |Get BG color settings
058539  |
05853A  |
05853B /
05853E \Get third byte
05853F /
058541 "Push" third byte
058543 "Push" third byte
058544 \Load sprite set
058546 /
058549 "Pull" third byte
05854A \
05854B  |
05854C  |
05854D  |
05854E  |
058550  |Get music
058551  |
058555  | \
058558  |  |
05855A  |  |Related to not restarting music if the new track
05855C  |  |is the same as the old one?
05855F  |  |
058561  | /
058563 /
058566 "Pull" third byte
058568 \
05856A  |
05856B  |
05856C  |Get Layer 3 priority
05856D  |
05856E  |
058570 /
058572 \Get fourth bit
058573 /
058575 "Push" fourth bit
058577 \
058578  |
058579  |
05857A  |
05857B  |
05857C  |
05857D  |Get time
05857E  |
058581  |
058583  |
058587  |
05858A  |
05858D /
058590 "Pull" fourth bit
058592 \Get FG color settings
058594 /
058597 "Pull" fourth bit (again)
058599 \
05859B  |
05859C  |Get sprite palette
05859D  |
05859E /
0585A1 \Get fifth byte
0585A2 /
0585A4 \
0585A6  |Get tileset
0585A9 /
0585AC Reload fifth byte
0585AE \
0585B0  |
0585B1  |Get item memory settings
0585B2  |
0585B3 /
0585B6 Reload fifth byte
0585B8 \
0585BA  |Get horizontal/vertical scroll
0585BB  |
0585BC  |
0585BD  |
0585BE  | \
0585C0  |  |If scroll mode is x03, disable both
0585C2  |  |vertical and horizontal scroll
0585C5  | /
0585C7 /
0585CA \
0585CC  |
0585CD  |
0585CF  |Make $65 point at the level data
0585D1  |(Level data comes right after the header)
0585D3  |
0585D5 /
0585D7 We're done!
0585FE Return
058601 \
058603  |
058605  |
058607  |
058608  |Read three bytes of level data
05860A  |Store them in $0A, $0B and $59
05860C  |
05860D  |
05860F  |
058611 /
058612 \
058613  |
058614  |
058616  |Increase address by 3 (as 3 bytes were read)
058618  |
05861A  |
05861C /
05861E \
058620  |
058621  |
058622  |
058623  |
058624  |Get block number, store in $5A
058626  |
058628  |
05862A  |
05862B  |
05862D /
05862F A = vertical level setting
058631 \
058634  |If $1933=x00, divide A by 2
058636 /
058637 \
058639  |If lowest bit of A is set, jump to sub
05863B /
05863E \
058640  |
058642  |
058643  |
058644  |Set upper half of $57 to Y pos
058645  |and lower half of $57 to X pos
058646  |
058648  |
05864A  |
05864C  |
05864E /
058652 \
058655  |Load $1993*2 into X
058658  |
058659 /
058666 \
058669  |Set Y to Level Mode*2
05866C  |
05866D /
05868D \
05868F  |
058691  |If New Page flag is set, increase $1928 by 1
058692  |(A = $1928)
058695 /
058698 Store A in $1BA1
05869B \
05869C  |Multiply A by 2 and add $1928 to it
05869D  |Set Y to A
0586A0 /
0586BB \
0586BD  |If high coordinate is set...
0586BF  |(Lower half of horizontal level)
0586C1  |(Right half of vertical level)
0586C3  |...increase $6C and $6F
0586C5 \
0586C7  |If block number is x00 (extended object),
0586C9  |Jump to sub LevLoadExtObj
0586CC  |                  (Why didn't they use BRA here?)
0586CF  |Jump to sub LevLoadNrmObj
0586D6 \
0586D9  |
0586DB  |If the next byte is xFF, return (loading is done).
0586DD  |Otherwise, repeat this routine.
0586DF  |
0586E2 /
0586E2 Return
0586E9 Return
0586F0 Return
058775 Return
058789 Load "Xpos of Screen Boundary"
05878B \
05878C  |Multiply by 16
05878D  |
05878E /
058790 \
058791 /Subtract 8
058794 Store to $45 (Seems to be Scratch RAM)
058796 Get back the multiplied XPos
058798 Add $17
05879B Store to $47 (Seems to be Scratch RAM)
05879F \
0587A1  | LDA $45,x  / $55
0587A2 /
0587A4 \ multiply by 8
0587A5  |
0587A6 /
0587A9 AND to make it either 6, 4, 2, or 0.
0587AD \LDY #$0266
0587B0 |
0587B1 /
0587BB MAP16 pointer table
0587C1 8 bytes per tile?
0587E3 Load the vertical level flag
0587E5 \if bit 1 is set, process based on that
0587E7 /
0587E9 Not a vertical level
0587EB \Y = L2XPos * 16
0587ED |
0587EE |
0587EF |
0587F0 |
0587F1 /
058802 \A = Y = $04*16 (?)
058804 |
058806 |
058807 |
058808 |
058809 |
05880A /
05880B \
05880C  |Subtract x08 and store in $49
05880F /
058811 \
058812  |"Undo", add x17 and store in $4B
058813  |
058816 /
058819 Return
058A9A Return
058B8C Return
058C70 Return
058D79 Return
058E18 Return
05B16D Return
05B29A Return
05B31A Return
05B328 Return
05B32C / Play sound effect
05B34F / Play sound effect
05B35A Return
05B363 \ Unreachable
05B374 / Return
05B374 Return
05BBA5 Return
05BC48 Return
05BC49 Return
05BC71 Return
05BC75 Return
05BC87  00 - Auto-Scroll, Unused?
05BC89  01 - Auto-Scroll
05BC8B  02 - Layer 2 Smash
05BC8D  03 - Layer 2 Scroll
05BC8F  04 - Unused
05BC91  05 - Unused
05BC93  06 - Layer 2 Falls
05BC95  07 - Unused
05BC97  08 - Layer 2 Scroll
05BC99  09 - Unused
05BC9B  0A - Unused
05BC9D  0B - Layer 2 On/Off Switch controlled
05BC9F  0C - Auto-Scroll level
05BCA1  0D - Fast BG scroll
05BCA3  0E - Layer 2 sink/rise
05BCE8 Return
05BCF0  00 - Auto-Scroll, Unused?
05BCF2  01 - Auto-Scroll
05BCF4  02 - Layer 2 Smash
05BCF6  03 - Layer 2 Scroll
05BCF8  04 - Unused
05BCFA  05 - Unused
05BCFC  06 - Layer 2 Falls
05BCFE  07 - Unused
05BD00  08 - Layer 2 Scroll
05BD02  09 - Unused
05BD04  0A - Unused
05BD06  0B - Layer 2 On/Off Switch controlled
05BD08  0C - Auto-Scroll level
05BD0A  0D - Fast BG scroll
05BD0C  0E - Layer 2 sink/rise
05BD35 Return
05BD7A Return
05BD7B \ Unreachable
05BDDC Return
05BE39 Return
05BE89 Return
05BEA5 Return
05BFB9 Return
05BFF5 Return
05C035 Return
05C05E Return
05C197 Return
05C1AD Return
05C1AE \ Unreachable
05C32D Return
05C405 Return
05C493 Return
05C4F8 Return
05C51E Return
05C673 Return
05C6CD \ Unreachable
05C749 Return
05C760 / Play sound effect
05C763  \ Set ground shake timer
05C766  /
05C87F Return
05C98A Return
05C9C3 / Play sound effect
05C9C6  \ Set ground shake timer 
05C9C8  / 
05C9D0 Return
05CC06 Return
05CD3E Return
05CDE5 / Play sound effect
05CDE8 Return
05CE39 Return
05CEA2 Return
05CF4A / Play sound effect
05CFE9 Return
05D847 16 bit A,X,Y
05D849 Set "X position of screen boundary" to 0
05D84B Set "Layer 2 X position" to 0
05D882 \
05D885  |
05D888  |Set Y to current player
05D889  |
05D88A /
05D88B \ Get current player's submap
05D88E /
05D891 \
05D893  |
05D894  |If on submap, increase X by x400
05D895  |
05D898  |
05D899 8 bit A
05D89F Store overworld level number
05D8A2 \
05D8A4  |
05D8A6  |If A>= x25,
05D8A7  |subtract x24
05D8AC Store A as lower level number byte
05D8AE \
05D8B1  |Set higher level number byte to:
05D8B3  |0 if on overworld
05D8B5 /
05D8B7 16 bit A,X,Y
05D8B9 \
05D8BB  |
05D8BC  |Multiply level number by 3 and store in Y
05D8BD  |(Each L1/2 pointer table entry is 3 bytes long)
05D8BF /
05D8C0 8 bit A
05D8C2  \ 
05D8C2 \
05D8C5  |
05D8C7   |Load Layer 1 pointer into $65-$67 
05D8C7  |Load Layer 1 pointer into $65-$67
05D8CA  |
05D8CC   | 
05D8CC  |
05D8CF /
05D8D1  \ 
05D8D1 \
05D8D4  |
05D8D6   |Load Layer 2 pointer into $68-$6A 
05D8D6  |Load Layer 2 pointer into $68-$6A
05D8D9  |
05D8DB   | 
05D8DB  |
05D8DE /
05D8E0 16 bit A
05D8E2 \
05D8E4  |Multiply level number by 2 and store in Y
05D8E5 / (Each sprite pointer table entry is 2 bytes long)
05D8E9 8 bit A
05D8EB  \ 
05D8EB \
05D8EE  |Store location of sprite level Y in $CE-$CF
05D8F0   | 
05D8F0  |
05D8F3 /
05D8F5 \ Set highest byte to x07
05D8F7 / (All sprite data is stored in bank 07)
05D8F9 \ Get first byte of sprite data (header)
05D8FB  |Get level's sprite memory
05D8FD / Store in $1692
05D900 \ Get first byte of sprite data (header) again
05D902  |Get level's sprite buoyancy settings
05D904 / Store in $190E
05D907 16 bit X,Y
05D909 8 bit A
05DAEE Return
05DB6D Return
05DBC8 Return
05DC39 Return
05DC45 Return
