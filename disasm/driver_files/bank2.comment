02AA33 \ Unreachable
02AA67 / Return
02AF29 \ Unreachable
02AF2C /
02C6B5 \ Unreachable
02C6B7 / Play sound effect
02CE8C \ Unreachable
02CE8F / Call Pea Bouncer gfx routine
02D0EA \ Unreachable
02D0EC  | Something to do with Yoshi?
02D2C7 \ Unreachable
02D2FA / Return
02E429 Unreachable instruction
02FE75 Unreachable instruction
02FECD \ Unreachable
02FF1D / Return
02FF1E \ Unreachable, called from above routine
02FF4E /
029472 \ Branch if can't be jumped on
029475  |
029477 /
029479 \ Branch if dies when jumped on
02947C  |
02947E /
029C00 \ Extended sprite = Yoshi stomp smoke
02B803 \ Take away a segment by unsetting a bit
02B805  |
02B808 /
02B9FE Unreachable/unused code
02BAEC ?
02BCEE \ Branch if not Spike Top
02BCF0  |
02BCF2 /
02BD4A \ Branch if Spike Top
02BD4C  |
02BD4E /
02BD50 \ Branch if Wall-follow Urchin
02BD52 /
02BD54 \ Branch if Ground-guided Fuzzball/Sparky
02BD56 /
02BD58 \ Branch if Ground-guided Hothead
02BD5A /
02BD75 \ Branch if Wall-detect Urchin
02BD77  |
02BD79 /
02BDD6 \ Branch if Wall-follow Urchin
02BDD8  |
02BDDA /
02BDE9 \ Branch if Wall-follow Urchin
02BDEB  |
02BDED /
02BE3B \ Branch if not Ground-guided Fuzzball/Sparky
02BE3D  |
02BE3F /
02DB5C Draw sprite
02DB5F \ $1594 = #$FF
02DB61 /
02DB64 \ Check sprite slots 0-9 for Hammer Brother
02DB66  |
02DB69  |
02DB6B  |
02DB6D  |
02DB70  |
02DB72  |
02DB74  |
02DB75  |
02DB77 / Branch if no Hammer Brother
02DB79 \ $1594 = index of Hammer Bro
02DB7A /
02DB7D \ Hammer Bro X postion = Platform X position
02DB7F  |
02DB82  |
02DB85 /
02DB88 \ Hammer Bro Y position = Platform Y position - #$10
02DB8A  |
02DB8B  |
02DB8D  |
02DB90  |
02DB93  |
02DB95 /
02DB98 \ Draw Hammer Bro
02DB99  |
02DB9A  |
02DB9D /
0291B8 \ Block to generate = Invisible solid
029E14 X = Sprite index
029EE2 X = Sprite index
02A0A5 X = Sprite index
02A20D X = Sprite index
02A250 X = Sprite index
02A3AA X = Sprite index
02A3E9 X = Sprite index
02A5B8 X = Sprite index
02A6DF X = Sprite index
02A9EF \ Subroutine: Return the first free sprite slot in Y (#$FF if not found)
02A9F2  | Y = Sprite memory index
02A9F5  |
02A9F7  |
02A9FA  |
02A9FB  |
02A9FD  |
02A9FE  | If free slot...
02AA01  |  ...return
02AA03  |
02AA04  |
02AA06  |
02AA08  | If no free slots, Y=#$FF
02AA0A /
02AE35 X = Sprite index
02B516 X = Sprite index
02B55C X = Sprite index
02B685 Y = Index into sprite OAM
02B745 Y = Index into sprite OAM
02B9FE Unused/unreachable code
02BA92 X = Sprite index
02BAB7 \ Find a free sprite slot and branch
02BABA  |
02BABC  |
02BABD /
02BABF Return if no slots found
02BAC0 \ Sprite status = Normal
02BAC2 /
02BAC5 \ Sprite number = Mushroom
02BAC7 /
02BACA \ Sprite and block X position = $00,$08
02BACC  |
02BACF  |
02BAD1  |
02BAD3  |
02BAD6 /
02BAD8 \ Sprite and block Y position = $01,$09
02BADA  |
02BADD  |
02BADF  |
02BAE1  |
02BAE4 /
02BAE8 Reset sprite tables
02BAEC Change index into object clipping table
02BAEF \ Change the index into sprite clipping table
02BAF2  | to "resize" the sprite
02BAF4  |
02BAF6 /
02BAF9 \ No longer gives powerup when eaten
02BAFC  |
02BAFE /
02BB02 \ Block to generate = Tree behind berry
02BB06 Generate the tile
02BE58 Y = Index into sprite OAM
02BFC0 X = Sprite index
02C905 X = Sprite index
02CA8F X = Sprite index
02CAF6 X = Sprite index
02CCCB Y = Index into sprite OAM
02CCEF X = Sprite index
02CEF9 Y = Index into sprite OAM
02CF37 X = Sprite index
02D149 \ $18B2 = Sprite Y position + #$08
02D14B  |
02D14C  |
02D14E /
02D151 \ $00 = (Sprite Y position + #$08) rounded down to closest #$10 low byte
02D153 /
02D155 \
02D158  | Return if off screen
02D15A  |
02D15C  |
02D15E  | $02 = (Sprite Y position + #$08) High byte
02D160 /
02D163 \ $18B0 = Sprite X position + $0014/$FFFC
02D166  |
02D168  |
02D169  |
02D16C  | $01 = (Sprite X position + $0014/$FFFC) Low byte
02D16E  |
02D171  |
02D174  |
02D177  | Return if past end of level
02D179  |
02D17B  |
02D17E / $03 = (Sprite X position + $0014/$FFFC) High byte
02D180 \ $00 = bits 4-7 of Y position, bits 4-7 of X position
02D182  |
02D183  |
02D184  |
02D185  |
02D186  |
02D188 /
02D1B1 X = Sprite index
02D1F3 \ Set X position of block
02D1F6  |
02D1F8  |
02D1FB /
02D1FD \ Set Y position of block
02D200  |
02D202  |
02D205 /
02D207 \ Block to generate = Tree behind berry
02D3D5 Y = Index into sprite OAM
02D686 X = Sprite index
02D8CB Y = Index into sprite OAM
02DC50 Y = Index into sprite OAM
02DE4D Y = Index into sprite OAM
02DEF0 Y = Index into sprite OAM
02E00E Y = Index into sprite OAM
02E249 Y = Index into sprite OAM
02E2D5 \ Block to generate = Coin
02E3C0 Y = Index into sprite OAM
02E61C X = Sprite index
02E6C7 Y = Index into sprite OAM
02EA25 Y = Index into sprite OAM
028042 \ Sprite status = Normal
028044 /
028168 \ Sprite status = Killed
02816A /
02862F \ Return if no free slots
028633 /
028636 \ Sprite status = Being carried
028638 /
028B35 \ Return if no free slots
028B39 /
028B3C \ Sprite status = Initialization
028B3E /
02945B \ Sprite status = Killed
02945D /
029480 \ Sprite status = Carryable
029482 /
02A973 \ Sprite status = Killed by spin jump
02A975 /
02A9B4 \ Sprite status = Normal
02A9B6 /
02AC1D \ Sprite status = Being carried
02AC1F /
02AF45 \ Return if no free slots
02AF49 /
02AF4C \ Sprite status = Initialization
02AF4E /
02AFAF \ Return if no free slots
02AFB3 /
02AFB6 \ Sprite status = Normal
02AFB8 /
02B048 \ Sprite status = Normal
02B04A /
02B4A7 \ Only shoot every #$80 frames
02B07E  |
02B080 /
02B08E \ Sprite status = Normal
02B090 /
02B120 \ Sprite status = Normal
02B122 /
02B168 \ Sprite status = Normal
02B16A /
02B1C9 \ Sprite status = Normal
02B1CB /
02B214 \ Sprite status = Normal
02B216 /
02B288 \ Sprite status = Normal
02B28A /
02B2E3 \ Sprite status = Normal
02B2E5 /
02B336 \ Sprite status = Normal
02B338 /
02B4AC \ Sprite status = Initialization
02B4AE /
02B82E \ Return if no free slots
02B832 /
02B834 \ Sprite status = Killed
02B836 /
02B9DE \ Sprite status = Normal
02B9E0 /
02C19A \ Return if no free slots
02C19E /
02C1A0 \ Sprite status = Normal
02C1A2 /
02C5C2 \ Sprite status = Normal
02C5C4 /
02C7B3 \ Sprite status = Killed
02C7B5 /
02D8FD \ Sprite status = Normal
02D8FF /
02DBFD \ Sprite status = Killed
02DBFF /
02DD8F \ Return if no free slots
02DD93 /
02DD9A \ Sprite status = Normal
02DD9C /
02EAF2 \ Return if no free slots
02EAF6 /
02EAF8 \ Sprite status = Normal
02EAFA /
02ED93 \ Branch if no free slots
02ED97 /
02ED99 \ Sprite status = Normal
02ED9B /
02EF7B \ Sprite status = Normal
02EF7D /
02F29D \ Sprite status = Killed
02F29F /
02F558 \ Sprite status = Normal
02F55A /
02ED24 X = Sprite index
02EDB3 X = Sprite index
02EDFA Y = Index into sprite OAM
02EE6D X = Sprite index
02EF2A Y = Index into sprite OAM
02F19D X = Sprite index
02F1A5 Y = Index into sprite OAM
02F1C8 Y = Index into sprite OAM
02F228 Y = Index into sprite OAM
02F48D Y = Index into sprite OAM
02FB79 X = Sprite index
02FC3E X = Sprite index
0291B8 \ Block to generate = #$09
0291BA /
02B8BC \ Only increase X speed every 4 frames
02B8BE  |
02B8C0 /
02B8C2 \ If not at maximum, increase X speed
02B8C5  |
02B8D2 \ Apply speed to position
02B8D8 \ If sprite has Y speed...
02B8DA  |
02B8DC  | ...Decrease Y speed every other frame
02B8DE  |
02B8E0  |
02B8E2 /
02B8E4 \ Run $02B952 every 8 frames
02B8E5  |
02B8E6  |
02B8E8  |
02B8EA  |
02B8EC /
02B9A4 $9C = tile to generate
02B9A6 \ $9A = Sprite X position
02B9A8  | for block creation
02B9AA  |
02B9AD /
02B9AF \ $98 = Sprite Y position
02B9B1  | for block creation
02B9B3  |
02B9B6 /
02B9B8 Generate the tile
02BB02 \ Block to generate = #$04
02BB04 /
02C2BD \ Block to generate = #$02
02C2BF /
02C2DA \ Block to generate = #$02
02C2DC /
02CD60 \ Block to generate = #$1B
02CD62 /
02D207 \ Block to generate = #$04
02D209 /
02E2C3 \ $9A = Sprite X position
02E2C5  | for block creation
02E2C7  |
02E2CA /
02E2CC \ $98 = Sprite Y position
02E2CE  | for block creation
02E2D0  |
02E2D3 /
02E2D5 \ Block to generate = #$06
02E2D7 /
02E536 $9C = tile to generate
02E538 \ $9A = Sprite X position
02E53A  | for block creation
02E53C  |
02E53F /
02E541 \ $98 = Sprite Y position
02E543  | for block creation
02E545  |
02E548 /
02E54A Generate the tile
02E8C9 $9C = tile to generate
02E8CB \ $9A = Sprite X position
02E8CD  | for block creation
02E8CF  |
02E8D2 /
02E8D4 \ $98 = Sprite Y position
02E8D6  | for block creation
02E8D8  |
02E8DB /
02E8DD Generate the tile
02E8E4 $9C = tile to generate
02E8E6 \ $9A = Sprite X position + #$10
02E8E8  | for block creation
02E8E9  |
02E8EB  |
02E8ED  |
02E8F0  |
02E8F2 /
02E8F4 \ $98 = Sprite Y position
02E8F6  | for block creation
02E8F8  |
02E8FB /
02E8FD Generate the tile
02E672 Wrapper
02F57C Wrapper
02F584 Wrapper
02F58C Wrapper
02F808 Wrapper
02CC41 \ $00 = Sprite X position
02CC43  |
02CC45  |
02CC48 /
02CC4A \ $02 = Sprite Y position
02CC4C  |
02CC4E  |
02CC51 /
02B3EB \ Sprite status = Normal
02B3ED /
02B3F0 \ Sprite = Torpedo Ted
02B3F2 /
02B3F5 \ Sprite position = Shooter position
02B3F8  |
02B3FB  |
02B3FE  |
02B401  |
02B404  |
02B407  |
02B40A /
02B40E X = sprite index
02B40F Setup sprite tables
02B413 \ Direction = Towards Mario
02B416  |
02B417 /
02B41A $00 = sprite direction
02B41C \ Set time to stay behind objects
02B41E /
02B421 X = shooter index
02B81C Wrapper
02B88A \ Save $64
02B88C /
02B88D \ If being launched...
02B890  | ...set $64 = #$10...
02B892  | ...so it will be drawn behind objects
02B894 /
02B896 Draw sprite
02B899 \ Restore $64
02B89A /
02B89C \ Return if sprites locked
02B89E /
02B8A7 \ Branch if not being launched
02B8AA /
02B8AC \ Sprite Y speed = #$08
02B8AE /
02B8B0 Apply speed to position
02B8B3 \ Sprite Y speed = #$10
02B8B5 /
02B8C5 \ If not at maximum, increase X speed
02B8C7  |
02B8CA  |
02B8CC  |
02B8CD  |
02B8D0 /
02B8D2 \ apply speed to position
02B8D5 /
02CD2D Wrapper
02D288 \ Adjust index so we use X values rather than Y
02D289  |
02D28A  |
02D28C /
02D290 X = sprite index
02D294 \ $14EC or $14F8 += 16 * speed
02D296  |
02D297  |
02D298  |
02D299  |
02D29A  |
02D29B  |
02D29E /
02D2A5 \ Amount to move sprite = speed / 16
02D2A7  |
02D2A8  |
02D2A9  |
02D2AA /
02D2AB \ If speed was negative...
02D2AD  |
02D2AF  | ...set high bits
02D2B1 /
02D2B3 \ Add to position
02D2B4  |
02D2B6  |
02D2B8  |
02D2B9  |
02D2BC  |
02D2BF /
02D2C3 $1491 = amount sprite was moved
02B00C 00 - Eerie, generator                       
02B00E 01 - Para-Goomba, generator                 
02B010 02 - Para-Bomb, generator                   
02B012 03 - Para-Bomb and Para-Goomba, generator   
02B014 04 - Dolphin, left, generator               
02B016 05 - Dolphin, right, generator              
02B018 06 - Jumping fish, generator                
02B01A 07 - Turn off generator 2 (sprite E5)       
02B01C 08 - Super Koopa, generator                 
02B01E 09 - Bubble with Goomba and Bob-omb, generator
02B020 0A - Bullet Bill, generator                 
02B022 0B - Bullet Bill surrounded, generator      
02B024 0C - Bullet Bill diagonal, generator        
02B026 0D - Bowser statue fire breath, generator   
02B028 0E - Turn off standard generators           
02B3B0 00 - Bullet Bill shooter
02B3B2 01 - Torpedo Ted launcher
02B3B4 02 - Unused
02CBFE \ If sprites not locked,
02CC00  | increment sprite frame counter
02CC02 /
02CC1E \ Return if Mario animation sequence active
02CC20  |
02CC22 /
02CC66 \ Mario's X speed = 0
02CC68 /
02DA80 \ Increment $1570,x 3 out of every 4 frames
02DA82  |
02DA84  |
02DA86 /
02DA97 \ Don't throw if...
02DA9A  | ...not yet time
02DA9D  | ...sprite offscreen
02DAA0  |
02DAA3  | ...we just threw one
02DAA6 /
02DAA8 \ Set minimum time in between throws
02DAAA /
02DAAD \ $00 = Hammer X speed,
02DAAF  | based on sprite's direction
02DAB2  |
02DAB4  |
02DAB6 /
02DAC8 \ Hammer X pos = sprite X pos
02DACA  |
02DACD  |
02DAD0 /
02DAD3 \ Hammer Y pos = sprite Y pos
02DAD5  |
02DAD8  |
02DADB /
02DADE \ Hammer Y speed = #$D0
02DAE0 /
02DAE3 \ Hammer X speed = $00
02DAE5 /
029B2B 00 - Empty slot
029B2D 01 - Puff of smoke
029B2F 02 - Reznor fireball                          
029B31 03 - Tiny flame left by hopping flame         
029B33 04 - Hammer                                   
029B35 05 - Mario fireball
029B37 06 - Bone
029B39 07 - Lava splash
029B3B 08 - Torpedo Ted shooter's arm                
029B3D 09 - Unused (Red thing that flickers from 16x16 to 8x8)
029B3F 0A - Coin from cloud game
029B41 0B - Piranha fireball                         
029B43 0C - Volcano lotus fire
029B45 0D - Baseball                                 
029B47 0E - Flower of Wiggler
029B49 0F - Trail of smoke                           
029B4B 10 - Spin Jump stars                           
029B4D 11 - Yoshi fireballs
029B4F 12 - Water bubble                             
028534 \ Find a free extended sprite slot
028536  |
028539  |
02853B  |
02853C  |
02853E / Return if no free slots
02853F \ Extended sprite = Lava splash
028541 /
029BDA Clear extended sprite
029BF5 \ Find a free extended sprite slot
029BF7  |
029BFA  |
029BFC  |
029BFD  |
029BFF / Return if no free slots
029C00 \ Extended sprite = Smoke trail
029C02 /
029C7F Clear extended sprite
029D5A Clear extended sprite
029D99 Clear extended sprite
029EE6 Clear extended sprite
02A0AC \ Return every other frame
02A0AD  |
02A0AF  |
02A0B1 /
02A0B5 $185E = Y = Extended sprite index
02A0BD \ Skip current sprite if status < 8
02A0C0  |
02A0C2 /
02A0C4 \ Skip current sprite if...
02A0C7  | ...invincible to fire/cape/etc
02A0C9  | ...sprite being eaten...
02A0CC  | ...interactions disabled...
02A0D2 /
02A0E1 \ if Yoshi fireball...
02A0E4  |
02A0E6  |
02A0E8  |
02A0E9  |
02A0EA  | ...?
02A0ED /
02A0EE \ Skip sprite if fire killing is disabled
02A0F1  |
02A0F3 /
02A0F5 \ Branch if takes 1 fireball to kill
02A0F8  |
02A0FA /
02A0FF \ If fire count >= 5, kill Chuck:
02A104  |
02A106  | Play sound effect
02A108  |
02A10B  | Sprite status = Killed
02A10D  |
02A110  | Set death Y speed
02A112  |
02A117  | Set death X speed
02A11A  |
02A11C  | Increase points
02A11E  |
02A122 /
02A126  | Play sound effect
02A129  | Sprite = Moving Coin
02A12B  |
02A12D  | Sprite status = Normal
02A12F  |
02A132  | Reset sprite tables
02A136  | Set upward speed
02A138  |
02A140 /
02A14D $15E9 = Sprite index
02A211 \ Clear extended sprite
02A213 /
02A2BF Clear extended sprite
02A419 Clear extended sprite
02B422 \ Find a free extended sprite slot
02B424  |
02B427  |
02B429  |
02B42A  |
02B42C / Return if no free slots
02B42D \ Extended sprite = Torpedo Ted arm
02B42F /
02B4E8 / Return if no free slots
02C46E \ Find a free extended sprite slot
02C470  |
02C473  |
02C475  |
02C476  |
02C478 / Return if no free slots
02C479 \ Extended sprite = Baseball
02C47B /
02DAB8 \ Find a free extended sprite slots
02DABA  |
02DABD  |
02DABF  |
02DAC0  |
02DAC2 / Return if no free slots
02DAC3 \ Extended sprite = Hammer
02DAC5 /
02E085 \ Find a free extended sprite slot
02E087  |
02E08A  |
02E08C  |
02E08D  |
02E08F / Return if no free slots
02E090 \ Extended sprite = Volcano Lotus fire
02E092 /
02E1C2 \ Find a free extended sprite slot
02E1C4  |
02E1C7  |
02E1C9  |
02E1CA  |
02E1CC / Return if no free slots
02E1CD \ Extended sprite = Piranha fireball
02E1CF /
02EFB1 \ Find a free extended sprite slot
02EFB3  |
02EFB6  |
02EFB8  |
02EFB9  |
02EFBB / Return if no free slots
02EFBC \ Extended sprite = Cloud game coin
02EFBE /
02F2D7 \ Find a free extended sprite slot
02F2D9  |
02F2DC  |
02F2DE  |
02F2DF  |
02F2E1 / Return if no free slots
02F2E2 \ Extended sprite = Wiggler flower
02F2E4 /
02A0B8 Loop over sprites:
02A0FC Increase times Chuck hit by fireball
02A0FF \ Branch if fire count < 5
02A102  |
02A104 /
02A12D \ Sprite status = Normal
02A12F /
02A132 Reset sprite tables
02A136 \ Set upward speed
02A138 /
02A14C $15E9 = Sprite index
02A14D
02C7E8 Increase Chuck stomp count
02C7EB \ Kill Chuck if stomp count >= 3
02C7EE  |
02C7F0  |
02C7F2  | Sprite Y Speed = 0
02C7F4 /
02C7F2 Sprite Y Speed = 0
028927 \ Set sprite status
02892A /
02893A \ Set sprite number
02893D /
028BB0 \ This routine does nothing at all
028BB1  | I believe it used to call the below
028BB2  | routine to add smoke when boarding
028BB3  | Yoshi
028BB6  |
028BB7 / Return
028BB9 \ Display smoke when getting on Yoshi
028BBB  |
028BBE  |
028BC0  |
028BC2  |
028BC5  |
028BC7  |
028BC8  |
028BCA / Return
0294C1 \ Set ground shake timer
0294C3 /
0294CC Loop over sprites:
0294CE \ Skip current sprite if status < 8
0294D1  |
0294D3 /
0294D5 \ Skip current sprite if not on ground
0294D5 \ Branch if not on ground
0294DC \ Skip current sprite if...
0294DF  | ...can't be killed by cape...
0294E1  | ...or sprite being eaten...
0294E4  | ...or interaction disabled
0294E7 /
02B4B1 \ New sprite = Bullet Bill
02D017 \ Entry point of routine determines value of $03
02D019  |
02D01B  |
02D01D  |
02D01F  |
02D021  |
02D023  |
02D025 /
02D027 \ if sprite is not off screen, return
02D02A /
02D02C \  vertical level
02D02E  |
02D030 /
02D038 \
02D03A  |
02D03B  | if the sprite has gone off the bottom of the level...
02D03D  | (if adding 0x50 to the sprite y position would make the high byte >= 2)
02D040  |
02D042  |
02D044 /    ...erase the sprite
02D046 \ if "process offscreen" flag is set, return
02D049  |
02D04B /
02D07A \ If sprite status < 8, permanently erase sprite
02D07D  |
02D07F /
02D08D Erase sprite
02D091 \ If "process offscreen" flag is set, return
02D094  |
02D096 /
02D098 \ Return every other frame
02D09A  |
02D09B /
0294D5 \ Branch if not on ground
0294D8  |
0294DA /
02B6EC \ Branch if not on ground
02B6EF  |
02B6F1 /
02C009 \ Branch if not touching object
02C00C  |
02C00E /
02C044 \ Branch if not on ground
02C047  |
02C049 /
02C23D \ Branch if on ground
02C240  |
02C242 /
02C274 \ Branch if not touching object
02C277  |
02C279 /
02C294 \ Branch if on ground
02C297  |
02C299 /
02C2A6 \ Branch if not on ground
02C2A9  |
02C2AB /
02C2E4 \ Branch if not on ground
02C2E7  |
02C2E9 /
02C2F7 \ Branch if not on ground
02C2FA  |
02C2FC /
02C507 \ Branch if not on ground
02C50A  |
02C50C /
02C541 \ Branch if not on ground
02C544  |
02C546 /
02C56E \ Branch if not on ground
02C571  |
02C573 /
02C6A7 \ Branch if not on ground
02C6AA  |
02C6AC /
02C6F5 \ Branch if not on ground
02C6F8  |
02C6FA /
02DCD0 \ Branch if not on ground
02DCD3  |
02DCD5 /
02DEC5 \ Branch if not on ground
02DEC8  |
02DECA /
02DFB3 \ Branch if not on ground
02DFB6  |
02DFB8 /
02E195 \ Branch if not on ground
02E198  |
02E19A /
02E7EF \ Branch if not touching object
02E7F2  |
02E7F4 /
02E808 \ Branch if not on ground
02E80B  |
02E80D /
02EE4C \ Branch if not on ground
02EE4F  |
02EE51 /
02F09B \ Branch if touching object
02F09E  |
02F0A0 /
02F0A2 \ Branch if not on ground
02F0A5  |
02F0A7 /
029aa8 Find next usable location in score sprite table
029aae add a "10" score sprite
029ad7  $99E3 puts #$00 into $17D0 and returns
029ada for (c=3;c>=0;c--)
029adc {
029adf  check if there is empty space in smoke/dust sprite table
029ae2 }
029ae4  if no empty space, return
029ae5 if there's an empty space, make it 5 (glitter sprite)
029aea  nots sure what 17E4 is used for yet - copied from $1933
029aed carryout = $17E4 % 2
029aef get x coordinate low byte
029af2 if carryout == 1
029af4   x-coord -= $26
029af6 store x-coord
029af9 get y coordinate low byte
029afd if carryout == 1
029aff   y-coord -=$28
029b01 store y-coord
029b06 duration = 10
02ac4d clear ram before entering new stage/area
028012 \ Play sound effect
028014 /
028414 \ Play sound effect
028416 /
028969 / Change music
028ACD \ Play sound effect
028ACF /
028AD5 \ Branch if Mario doesn't have star
028AD8 /
028CC4 \ Branch if sprites locked
028CC6 /
028DCF \ Branch if sprites locked
028DD1 /
028DDB \ Branch if sprites locked
028DDD /
028F8B \ Branch if sprites locked
028F8D /
02917D \ Play sound effect
02917F /
02918C \ Play sound effect
02918E /
029BE9 \ Play sound effect
029BEB /
02A045 \ Play sound effect
02A047 /
02A106 \ Play sound effect
02A108 /
02A124 \ Turn sprite into coin:
02A469 \ Branch if Mario has star
02A46C /
02A47C \ Play sound effect
02A47E /
02A481 \ Play sound effect
02A483 /
02B043 \ Play sound effect
02B045 /
02B088 \ Play sound effect
02B08A /
02B0DF \ Play sound effect
02B0E1 /
02BFE2 \ Branch if Mario doesn't have star
02BFE5 /
02C381 \ Play sound effect
02C383 /
02C4F8 \ Play sound effect
02C4FA /
02C536 \ Play sound effect
02C538 /
02C5AE \ Play sound effect
02C5B0 /
02C6B5 \ Play sound effect
02C6B7 /
02C707 \ Play sound effect
02C709 /
02C7A8 \ Branch if Mario doesn't have star
02C7AB /
02C7B8 \ Play sound effect
02C7BA /
02C7D2 \ Play sound effect
02C7D4 /
02C7F6 \ Play sound effect
02C7F8 /
02CDEC \ Play sound effect
02CDEE /
02D474 \ Play sound effect
02D476 /
02D918 \ Play sound effect
02D91A /
02DD64 \ Play sound effect
02DD66 /
02DECC \ Play sound effect
02DECE /
02E284 / Change music
02F24F \ Branch if Mario has star
02F252 /
02F26B \ Play sound effect
02F26D /
02F2C0 \ Play sound effect
02F2C3 /
02F67A \ Play sound effect
02F67C /
02F683 \ Play sound effect
02F685 /
02F765 \ Play sound effect
02F767 /
02F76E \ Play sound effect
02F770 /
02F9F0 \ Branch if Mario has star
02F9F3 /
028758 \ Increase points
028773 Deflect Mario downward
028779 Actually break the block
02877D Handle sprite/block interaction
028780 \ Replace block with "nothing" tile
028782  |
028784 /
028792 \ Reset turning block
028818 \ Play on/off sound if appropriate
02881A  |
02881C  |
02881E  |
028820 /
02882D Set block bounce sprite type
028830 \ set (times can be hit?)
028832 /
028835 \ Set bounce block y position
028837  |
02883A  |
02883C /
02883F \ Set bounce block x position
028841  |
028844  |
028846 /
028852 \ Set bounce y speed
028855 /
028858 \ Set bounce x speed
02885B /
028864 \ Set tile to turn block into
028866 /
028869 \ Time to show bouncing block
029aa8  Find next usable location in score sprite table
029aae  add a 10 score sprite
029ab4 set Yposition low byte
029aba set Ypos high byte
029ac0 set Xpos low byte
029ac6 set Xpos high byte
029acb set initial speed to 30
02ace5  takes sprite type -5 as input in A
02ace7 Add 5 to sprite type (200,400,1up)
02ace9 Set score sprite type/initial position
02acef  - note coordinates are level coords, not screen
02acf0    sprite type 1=10,2=20,3=40,4=80,5=100,6=200,7=400,8=800,9=1000,A=2000,B=4000,C=8000,D=1up
02acf1 Get next free position in table($16E1) to add score sprite
02acf6 Set score sprite type (200,400,1up, etc)
02acf9 Load y position of sprite jumped on
02acfc   - make the score sprite appear a little higher
02acfe Set this as score sprite y-position
02ad01 save that value
02ad02 Get y-pos high byte for sprite jumped on
02ad07 Set score sprite y-pos high byte
02ad0a restore score sprite y-pos to A
02ad0b \
02ad0c |
02ad0e |if (score sprite ypos <1C && >=0C)
02ad10 |{
02ad12 |
02ad15 |
02ad17 |  move score sprite down by #$10
02ad1a |
02ad1d |
02ad1f /}
02ad22 \
02ad24 /Set score sprite x-position
02ad27 \
02ad2a /Set score sprite x-pos high byte
02ad2d \
02ad2f /scoreSpriteSpeed = #$30
02ad34 (here css is used to index through the table of score sprites in table at $16E1
02ad36 for (css=5;css>=0;css--){
02ad39  if (css's type == 0)      --check for empty space
02ad3c }
02ad3e $18f7--;                   --gives LRU
02ad41 if ($18f7 <0)
02ad43   $18f7=5;
02ad48 return $18f7 in Y;
028014 / Play sound effect
028071 Return
028089 Return
0280A4 Return
02814F Return
028177 Return
0283C7 Return
0283F7 Return
028416 / Play sound effect
028438 Return
02848C Return
02849E Return
0284A5 Return
0284BB Return
0284E7 Return
02850F Return
02853E Return
02858E Return
0285C4 Return
0285DE Return
0285EE Return
02862E Return
028662 Return
028681 / Play sound effect
0286BE Return
0286EC Return
028739 Return
028788 Return
0288A0 Return
028904 Return
02894C / Play sound effect
028969 / Play sound effect
0289CC Return
028A07 Return
028A29 Return
028A65 Return
028AA8 Return
028ACF / Play sound effect
028B66 Return
028B77 Return
028BB7 Return
028BB8 Return
028BCA Return
028C08 Return
028C3A Return
028C60 Return
028C69 Return
028CB7 Return
028D41 Return
028D65 Return
028DD6 Return
028E75 Return
028E79 Return
028ECB Return
028F2A Return
028F86 Return
028F8A Return
02902C Return
02904C Return
0290C3 Return
0290CD Return
02917F / Play sound effect
02918E / Play sound effect
02919C Return
0291EC Return
029264 Return
0292C9 Return
029355 Return
029391 Return
029397 Return
029403 Return
029426 Return
0294C0 Return
0294F4 Return
02950A Return
02953B Return
0295AD Return
029630 Return
029656 Return
029695 Return
0296B7 Return
0296D7 Return
0296E2 Return
029749 Return
029792 Return
029796 Return
029837 Return
0298BD Return
0298C1 Return
029921 Return
02999E Return
0299D1 Return
0299E2 Return
0299E8 Return
029A6D Return
029AA7 Return
029AE4 Return
029B09 Return
029B15 Return
029BD9 Return
029BDD Return
029BEB / Play sound effect
029BFF Return
029C32 Return
029C7E Return
029C82 Return
029CAF Return
029D44 Return
029D59 Return
029D5D Return
029D9C Return
029E35 Return
029E3C Return
029E81 Return
029EE5 Return
029EE9 Return
029F60 Return
029F98 Return
02A041 Return
02A047 / Play sound effect
02A0A8 Return
02A108 / Play sound effect
02A126 / Play sound effect
02A150 Return
02A1A3 Return
02A210 Return
02A216 Return
02A253 Return
02A2BE Return
02A2C2 Return
02A2DE Return
02A316 Return
02A343 Return
02A3AD Return
02A3F5 Return
02A468 Return
02A47E / Play sound effect
02A483 / Play sound effect
02A4AD Return
02A4B2 Return
02A4E8 Return
02A546 Return
02A56D Return
02A591 Return
02A5BB Return
02A610 Return
02A678 Return
02A728 Return
02A72A Return
02A734 Return
02A772 Return
02A84B Return
02A93B Return
02A9EE Return
02AA0A Return
02AA67 Return
02AA8C Return
02AABC Return
02AB10 Return
02AB77 Return
02AC5B Return
02ACA0 Return
02ACE0 Return
02ACEE Return
02AD33 Return
02AD4B Return
02ADC8 Return
02ADD8 Return
02AEFB Return
02AF28 Return
02AF2C Return
02AF86 Return
02AFFD Return
02B02A Return
02B031 Return
02B035 Return
02B045 / Play sound effect
02B07B Return
02B08A / Play sound effect
02B0C8 Return
02B0E1 / Play sound effect
02B0F9 Return
02B152 Return
02B1B7 Return
02B206 Return
02B259 Return
02B287 Return
02B2CF Return
02B31E Return
02B386 Return
02B3AA Return
02B42C Return
02B463 Return
02B4A9 / Play sound effect
02B4DD Return
02B4E8 Return
02B519 Return
02B525 Return
02B553 Return
02B55F Return
02B58D Return
02B5BB Return
02B5C7 Return
02B5EB Return
02B652 Return
02B6A6 Return
02B6AE Return
02B7AB Return
02B7D5 Return
02B7EC Return
02B81B Return
02B823 Return
02B881 Return
02B889 Return
02B8B7 Return
02B8EF Return
02B9A3 Return
02B9BC Return
02B9D8 Return
02B9F9 Return
02BA47 Return
02BABF Return
02BB0A Return
02BB87 Return
02BBFF Return
02BC0D Return
02BD3E Return
02BD74 Return
02BDA6 Return
02BE4B Return
02BE78 Return
02BE8C Return
02BFCC Return
02C089 Return
02C0C9 Return
02C125 Return
02C131 Return
02C155 Return
02C17D Return
02C193 Return
02C1F2 Return
02C212 Return
02C227 Return
02C25A Return
02C383 / Play sound effect
02C3B2 Return
02C418 Return
02C439 Return
02C45B Return
02C45F Return
02C478 Return
02C4B4 Return
02C4E2 Return
02C4FA / Play sound effect
02C538 / Play sound effect
02C53B Return
02C555 Return
02C563 Return
02C57D Return
02C5B0 / Play sound effect
02C601 Return
02C617 Return
02C627 Return
02C62D Return
02C665 Return
02C69A Return
02C69E Return
02C6B7 / Play sound effect
02C709 / Play sound effect
02C725 Return
02C73C Return
02C776 Return
02C798 Return
02C7BA / Play sound effect
02C7C3 Return
02C7D4 / Play sound effect
02C7F8 / Play sound effect
02C80F Return
02C819 Return
02C908 Return
02CA92 Return
02CAF9 Return
02CB40 Return
02CB8F Return
02CBFB Return
02CBFC Return
02CBFD Return
02CCB0 Return
02CD2C Return
02CD34 Return
02CDC4 Return
02CDEE / Play sound effect
02CDFE Return
02CE1F Return
02CE2E Return
02CE39 Return
02CE66 Return
02CE6F Return
02CE7D Return
02CE85 Return
02CE8B Return
02CE8F Return
02CF51 Return
02CFEA Return
02CFFD Return
02D090 Return
02D0CF Return
02D0E5 Return
02D148 Return
02D1F0 Return
02D20F Return
02D287 Return
02D293 Return
02D2C6 Return
02D2FA Return
02D373 Return
02D3E6 Return
02D3E9 Return
02D421 Return
02D444 Return
02D451 Return
02D454 Return
02D476 / Play sound effect
02D480 Return
02D488 Return
02D49B Return
02D4DB Return
02D4E4 Return
02D4F1 Return
02D50B Return
02D51D Return
02D5A3 Return
02D629 Return
02D806 Return
02D83F Return
02D86F Return
02D8A0 Return
02D8B4 Return
02D91A / Play sound effect
02D977 Return
02D9A0 Return
02DA59 Return
02DAC2 Return
02DAE8 Return
02DB53 Return
02DC0E Return
02DCB6 Return
02DCE9 Return
02DCFE Return
02DD0B Return
02DD44 Return
02DD4A Return
02DD66 / Play sound effect
02DD80 Return
02DD8E Return
02DDC5 Return
02DEAF Return
02DECE / Play sound effect
02DEFB Return
02DF21 Return
02DF8A Return
02DF92 Return
02DFC8 Return
02DFD5 Return
02DFDE Return
02DFEE Return
02E007 Return
02E08F Return
02E0C4 Return
02E0CC Return
02E158 Return
02E176 Return
02E1A3 Return
02E1CC Return
02E21C Return
02E284 / Play sound effect
02E287 Return
02E2DD Return
02E2F2 Return
02E302 Return
02E30A Return
02E351 Return
02E41E Return
02E462 Return
02E494 Return
02E4A4 Return
02E51F Return
02E558 Return
02E57D Return
02E5BB Return
02E5F6 Return
02E636 Return
02E679 Return
02E726 Return
02E74B Return
02E77B Return
02E787 Return
02E7A3 Return
02E7B4 Return
02E7BC Return
02E82C Return
02E834 Return
02E871 Return
02E8B9 Return
02E901 Return
02E93C Return
02E985 Return
02E9A1 Return
02E9B3 Return
02E9CE Return
02E9D4 Return
02E9E1 Return
02EA4D Return
02EA89 Return
02EACD Return
02EAD1 Return
02EAD9 Return
02EAF0 Return
02EB26 Return
02EB2E Return
02EB48 Return
02EB7C Return
02EBC9 Return
02EBD0 Return
02EBE6 Return
02EC05 Return
02ED89 Return
02EDCF Return
02EDD7 Return
02EDF5 Return
02EEA8 Return
02EEB0 Return
02EF66 Return
02EF7A Return
02EFA9 Return
02EFBB Return
02EFE9 Return
02F010 Return
02F028 Return
02F030 Return
02F102 Return
02F26D / Play sound effect
02F295 Return
02F29A Return
02F2C3 / Play sound effect
02F2C6 Return
02F2D2 Return
02F2E1 Return
02F30E Return
02F316 Return
02F370 Return
02F380 Return
02F38E Return
02F3A2 Return
02F3B6 Return
02F3DA Return
02F42B Return
02F433 Return
02F462 Return
02F4CC Return
02F4D4 Return
02F4E6 Return
02F53D Return
02F547 Return
02F552 Return
02F57B Return
02F583 Return
02F58B Return
02F593 Return
02F59D Return
02F618 Return
02F66D Return
02F67C / Play sound effect
02F685 / Play sound effect
02F69F Return
02F6F0 Return
02F767 / Play sound effect
02F770 / Play sound effect
02F807 Return
02F80F Return
02F820 Return
02F864 Return
02F8FB Return
02F93B Return
02F93F Return
02F9A5 Return
02F9A9 Return
02F9FE Return
02FA83 Return
02FAA3 Return
02FBBA Return
02FCD8 Return
02FCE1 Return
02FDB7 Return
02FE70 Return
02FEC4 Return
02FF1D Return
02FF97 Return
02FFA2 Return
02FFD0 Return
02FFE1 Return
02867F \
02B466 \ Return if it's not time to generate			     
02B469 /								     
02B46B \ Set time till next generation = 60			     
02B46D /								     
02B470 \ Don't generate if off screen vertically			     
02B473  |							     
02B475  |							     
02B478  |							     
02B47A /								     
02B47C \ Don't generate if off screen horizontally		     
02B47F  |							     
02B481  |							     
02B484  |							     
02B486 / 							     
02B488 \ ?? something else related to x position of generator??	     
02B48B  | 							     
02B48C  |							     
02B48E  |							     
02B48F  |							     
02B491  |							     
02B493 /								     
02B495 \ Don't fire if mario is next to generator		     
02B497  |							     
02B49A  |							     
02B49B  |							     
02B49D  |							     
02B49F /								     
02B4A1 \ Get an index to an unused sprite slot, return if all slots full
02B4A5 / After: Y has index of sprite being generated		
02B4A7 \ 							
02B4A9 / Play sound effect					
02B4AC \ Set sprite status for new sprite			
02B4AE /								
02B4B1 \ Set sprite number for new sprite			
02B4B3 /								
02B4B6 \ Set x position for new sprite				
02B4B9  |							
02B4BC  |							
02B4BF /								
02B4C2 \ Set y position for new sprite				
02B4C5  | (y position of generator - 1)				
02B4C6  |							
02B4C8  |							
02B4CB  |							
02B4CE  |							
02B4D0 /								
02B4D3 \ Before: X must have index of sprite being generated	
02B4D4  | Routine clears *all* old sprite values...		
02B4D5  | ...and loads in new values for the 6 main sprite tables
02B4D9 / 							
02B4DA Display smoke graphic                                   
02B4DE \ Find a free slot to display effect
02B4E0  |
02B4E3  |
02B4E5  |
02B4E6  |
02B4E8 / Return if no slots open
02B4EB \ Set effect graphic to smoke graphic		
02B4ED /							
02B4F0 \ Smoke y position = generator y position		
02B4F3 /							
02B4F6 \ Set time to show smoke				
02B4F8 /							
02B4FB \ Load generator x position and store it for later
02B4FE /							
02B4FF \ Determine which side of the generator mario is on
02B501  |						
02B504  |						
02B506  |						
02B509  |						
02B50B  |						
02B50D /							
02B50E \ Set smoke x position from generator position	
02B50F  |						
02B510  |						
02B513 /
02808A Make sprite unstompable
02808D \ Set new clipping area for explosion
02808F /
028095 \ Increase frame count if sprites not locked
028097  |
028099 /
02809C \ When timer is up free up sprite slot
02809F  |
0280A1 /
02864D \ Sprite = Throw Block
02864F /
02A129 \ Sprite = Moving Coin
02A12B /
02A9B0 \ Sprite = Moving Coin
02A9B2 /
02AF51 \ Sprite = Grey Platform on Chain
02AF53 /
02B04D \ Sprite = Bowser's Statue Fireball
02B04F /
02B093 \ Sprite = Bullet Bill
02B095 /
02B11B \ Sprite = Bullet Bill
02B11D /
02B16D \ Sprite = Flying Fish
02B16F /
02875B  |
02875C  |
02875F  |
028760  |
028763  |
028764  |
028766  |
028769  |
02876B  |
02876E  |
028770 /
028773 \ Deflect Mario upward
028775 /
028777 for shatter routine?
028792 \ Find slot for bounce block
028794  |
028797  |
028799  |
02879A /
0287A9 \ Branch if not a turn block
0287AC  |
0287AE /
0287B0 \ Save [$98-$9A]
0287B2  |
0287B3  |
0287B5  |
0287B6  |
0287B8  |
0287B9  |
0287BB /
0287BC \ Block Y position = Bounce Y sprite position
0287BF  |
0287C1  |
0287C4 /
0287C6 \ Block X position = Bounce X sprite position
0287C9  |
0287CA  | (Round to nearest #$10)
0287CC  |
0287CE  |
0287D0  |
0287D3  |
0287D5 /
0287D7 \ Block to generate = Bounce sprite block
0287DA /
0287DC \ Save [$04-$07]
0287DE  |
0287DF  |
0287E1  |
0287E2  |
0287E4  |
0287E5  |
0287E7 /
0287EC \ Restore [$04-$07]
0287ED  |
0287EF  |
0287F0  |
0287F2  |
0287F3  |
0287F5  |
0287F6 /
0287F8 \ Restore [$98-$9A]
0287F9  |
0287FB  |
0287FC  |
0287FE  |
0287FF  |
028801  |
028802 /
02882A \
02882C  |
02882D / Set block bounce sprite type
028905 \ Find a last free sprite slot from 00-0B
028907  |
02890A  |
02890C  |
02890D  |
02890F /
02B6F3 Sprite Y Speed = 0
02BBD5 Sprite Y Speed = 0
02C010 Sprite X Speed = 0
02C019 Sprite Y Speed = 0
02C04B Sprite Y Speed = 0
02C448 Sprite Y Speed = 0
02C579 Sprite X Speed = 0
02C57B Sprite Y Speed = 0
02C7B1 Sprite X Speed = 0
02C7F2 Sprite Y Speed = 0
02D442 Sprite Y Speed = 0
02DCD7 Sprite Y Speed = 0
02DCD9 Sprite X Speed = 0
02DFBA Sprite Y Speed = 0
02E13C Sprite Y Speed = 0
02E791 Sprite X Speed = 0
02F38F Sprite Y Speed = 0
02F391 Sprite X Speed = 0
02B63C \ After: Y = number of segments
02B63E  | $C2,x has a bit set for each segment remaining
02B63F  | for X=0 to X=4...
02B641  |
02B643  |
02B644  |
02B646  | ...Increment Y if bit X is set
02B647  |
02B648  |
02B64A /
02B64B \ Update the index into the clipping table
02B64E /
02B677 \ Branch if Status == Normal
02B67A  |
02B67C /
02B6A7 \ Erase sprite if no segments remain
02B6A9  |
02B6AB  |
02B6AE / Return
02B6AE Return
02813E   |
028140   |
028141   | Skip sprite if it's already dying/dead
028144   |
028146   |
028148   | Check for contact
02814B   |
02814C   | Next
02814D  /
028151  \ Return if no sprite contact
028152   |
028156   |
028157   |
02815B   |
02815F  /
028161  \ Return if sprite is invincible
028164   | to explosions
028166  /
02816D  \ Sprite Y speed = #$C0
02816F  /
028172  \ Sprite X speed = #$00
028174  /
02840F  \ Set ground shake timer
028411  /
02858F  \ If Big Mario:
028591   | Y = #$1F
028593   | X = #$00
028595   | Small Mario:
028597   | Y = #$0F
028599  / X = #$10
02882A  \
02882D  Set block bounce sprite type
02882A  \ Set block bounce sprite type
02882D  /
028B20  \ Return if timer not set
028B23  /
028B25  \ Decrement every other frame...
028B27   |
028B29   | ...as long as sprites not locked...
028B2E   |
028B30  /
028B33  Return if the timer hasn't just run out
028B41  \ Sprite = Sprite to respwan
028B44  /
028B61  Reset sprite tables
029056  \ Decrement bounce sprite timer if > 0
029078  /
02907A  \ Initialize only once
02907D   | (Generate invisible tile sprite)
02907F   |
029082  /
0291BA  /
029191  \ Toggle On/Off
029194   |
029196  /
0291A2   |
0291A4   |
0291A6   |
0291A8  / Block to generate = Bounce sprite block to turn into
0291B4  Block to generate = Used block
0291BC  \ Block Y position = Bounce sprite Y position
0291BF   |
0291C0   | (Rounded to nearest #$10)
0291C2   |
0291C4   |
0291C6   |
0291C9   |
0291CB  /
0291CD  \ Block X position = Bounce sprite X position
0291D0   |
0291D1   | (Rounded to nearest #$10)
0291D3   |
0291D5   |
0291D7   |
0291DA   |
0291DC  /
029AD7   $99E3 puts #$00 into $17D0 and returns
029AD7  Puts #$00 into $17D0 and returns
029BE4  \ Set ground shake timer
029BE6  /
02A7FE   |
02A800  /
02A804  \ Branch if horizontal level
02A806   |
02A807  /
02A809  \ Vertical level:
02A80B   | $00,$01 = Screen boundary Y + offset
02A80C   |
02A80F   |
02A811   |
02A813   |
02A815  /
02A817  \ Horizontal level:
02A819   | $00,$01 = Screen boundary X + offset
02A81A   |
02A81D   |
02A81F   |
02A821   |
02A823   |
02A826   |
02A828  /
02A82A  X = #$00 (Number of sprite in level)
02A82C  Y = #$01 (Index into level data)
02A830  \ Return when we encounter $FF, as it signals the end
02A832  /
02A834  \ If 's' is set, $02 = #$10
02A835   | Else, $02 = #$00
02A836   |
02A837   |
02A839  /
02A83B  Next byte
02A83C  Byte format: XXXXSSSS
02A83E  \ Skip all sprites until we find one at the adjusted screen boundary:
02A840   |
02A842   | If sprite screen (sSSSS) < adjusted screen boundary...
02A844  / ...skip the sprite
02A847   |
02A848   |
02A849  /
02A84C  Return if sprite screen > adjusted screen boundary
02A84E  Byte format: XXXXSSSS
02A850  \ Skip sprite if not right at the screen boundary
02A852   |
02A854  /
02A856  \ This table has a flag for every sprite in the level (not just those onscreen)
02A859  / Skip sprite if it's already been loaded/permanently killed
02A85B  $02 = Number of sprite in level
02A85D  Mark sprite as loaded
02A860  Next byte
02A861  Byte format: Sprite number
02A863  $05 = Sprite number
02A865  Previous byte
02A866  \ Branch if sprite number < #$E7
02A868  /
02A874  \ $143E = Type of scroll sprite
02A876   | (Sprite number - #$E7)
02A877   |
02A879  /
02A87C  Previous byte
02A87D  Byte format: YYYYEEsy
02A88C  \ Branch if sprite number != 5 Eeries
02A88E  /
02A89C  \ Branch if sprite number != 3 Platforms on Chain
02A89E  /
02A8AC  \ Branch if sprite number < #$CB
02A8AE  /
02A8B0  \ Branch if sprite number >= #$DA
02A8B2  /
02A8B5   | (Sprite number - #$CA)
02A8B7   |
02A8B8  /
02A8BB  Allow sprite to be reloaded by level loading routine
02A8C0  \ Branch if sprite number < #$E1
02A8C2  /
02A8D4  \ Branch if sprite number < #$C9
02A8D6  /
02A8DF  / Eventually goes into sprite status
02A8E1  Previous byte
02A973  \ Sprite status = Killed by spin jump
02A938  Allow sprite to be reloaded by level loading routine
02A93E  \ Branch if horizontal level
02A940   |
02A941  /
02A943  \ Vertical level:
02A945   | Same as below with X and Y coords swapped
02A946   |
02A948   |
02A94A   |
02A94B   |
02A94D   |
02A950   |
02A952   |
02A954   |
02A956   |
02A959  /
02A95B  Byte format: YYYYEEsy
02A95D  \ Bits 11110000 are low byte of Y position
02A95E   |
02A960  /
02A962  \ Bits 00001101 are high byte of Y position
02A963   | (Extra bits are stored in Y position)
02A965  /
02A968  \ X position = adjusted screen boundary
02A96A   |
02A96C   |
02A96E  /
02A973  \ Sprite status = ??
02A999  \ $161A,x = index of the sprite in the level
02A99B  / (Number of sprites in level, not just onscreen)
02A9C9  Reset sprite tables
02A9CD  \ Set off screen horizontally
02A9CF  /
02A9D2  \ ?? $1FE2,X = #$04
02A9D4  /
02A9E0   |
02A9E2  /
02AB99  \ Allow sprite to be reloaded by level loading routine
02AB9B  /
02ABF4  Allow sprite to be reloaded by level loading routine
02AC00  \ Set to permanently erase sprite
02AC02  /
02AED6  \ Maxed out at #$0E makes 3up the limit
02AED8  /
02AEDC  Bug: only 2up/3up supported.  See 5up-fix.asm
02AFBB  \ Sprite = Wave Eerie
02AFBD  /
02B02E  Don't respawn any sprites
02C0DC  \ Return if sprite is offscreen
02C0DF   |
02C0E2  /
02D081  \ Branch if should permanently erase sprite
02D084   |
02D086  /
02D088  \ Allow sprite to be reloaded by level loading routine
02D08A  /
02D46F  \ Set ground shake timer
02D471  /
02DD5F  \ Set ground shake timer
02DD61  /
02DD8F  \ Return if no free slots
02DD95  \ Sprite = Lightning
02DD97  /
02DD9F  \ Lightning X position = Sprite X position + #$04
02DDA1   |
02DDA3   |
02DDA6   |
02DDA9   |
02DDAB  /
02DDAE  \ Lightning Y position = Sprite Y position
02DDB0   |
02DDB3   |
02DDB6  /
02DDBA  \ Reset sprite tables
02DDBB  /
02DDBF  \ $1FE2,x = #$10
02DDC1  / Time to not interact with ground??
02F283  Bug: Value should capped at #$08 to prevent wiggler 1up/score glitch.  See wigglerfix.asm
02FAE9  Allow sprite to be reloaded by level loading routine
